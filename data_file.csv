repo,language,readme_contents
WesCook/Nutrition,Java,"# Nutrition

Nutrition is a highly configurable mod to enable the creation of health systems in Minecraft.

[Download](https://github.com/WesCook/Nutrition/releases) | [Wiki](https://github.com/WesCook/Nutrition/wiki) | [Changelog](changelog.md)

![Nutrition GUI](screenshots/gui.png ""Nutrition GUI"")

Through its [config files](https://github.com/WesCook/Nutrition/wiki/Configuration), Nutrition allows you to define custom food groups (called [nutrients](https://github.com/WesCook/Nutrition/wiki/Nutrients)) which apply [effects](https://github.com/WesCook/Nutrition/wiki/Effects) based on nutrition levels.

By default, Nutrition comes configured with the classic five food group system: dairy, fruit, grain, protein, and vegetables.  However many different systems are possible.  Some examples include:

* A spicy tolerance bar, where eating enough spicy foods will grant a permanent resistance to fire.
* A zombie simulation where you must eat brains to avoid negative effects.
* Gluten intolerance.  Eat bread, get sick.

When updating the mod, please delete your `/config/nutrition/nutrients/` directory to receive new mod support.  This is necessary so we don't overwrite any customizations.

## Mods Supported

Mods that are supported with the default five-food group system include:

* [AbyssalCraft](https://www.curseforge.com/minecraft/mc-mods/abyssalcraft)
* [Actually Additions](https://www.curseforge.com/minecraft/mc-mods/actually-additions)
* [Advent of Ascension](https://www.curseforge.com/minecraft/mc-mods/advent-of-ascension-nevermine)
* [The Aether](https://www.curseforge.com/minecraft/mc-mods/the-aether)
* [akkamaddi's Ashenwheat](https://www.curseforge.com/minecraft/mc-mods/akkamaddis-ashenwheat)
* [Animalium](https://www.curseforge.com/minecraft/mc-mods/animalium)
* [Animania](https://www.curseforge.com/minecraft/mc-mods/animania)
* [Aquaculture](https://www.curseforge.com/minecraft/mc-mods/aquaculture)
* [Beasts](https://www.curseforge.com/minecraft/mc-mods/beasts)
* [Better Animals Plus](https://www.curseforge.com/minecraft/mc-mods/betteranimalsplus)
* [BetterNether](https://www.curseforge.com/minecraft/mc-mods/betternether)
* [Better with Addons](https://www.curseforge.com/minecraft/mc-mods/better-with-addons)
* [Better with Mods](https://www.curseforge.com/minecraft/mc-mods/bwm-suite)
* [The Betweenlands](https://www.curseforge.com/minecraft/mc-mods/angry-pixel-the-betweenlands-mod)
* [Bewitchment](https://www.curseforge.com/minecraft/mc-mods/bewitchment)
* [Biomes O' Plenty](https://www.curseforge.com/minecraft/mc-mods/biomes-o-plenty)
* [The Birdwatching Mod](https://www.curseforge.com/minecraft/mc-mods/the-birdwatching-mod)
* [Cave Root](https://www.curseforge.com/minecraft/mc-mods/cave-root)
* [ChinjufuMod](https://www.curseforge.com/minecraft/mc-mods/chinjufumod)
* [Chococraft](https://www.curseforge.com/minecraft/mc-mods/chococraft-3)
* [Combustive Fishing](https://www.curseforge.com/minecraft/mc-mods/combustive-fishing)
* [Complex Crops](https://www.curseforge.com/minecraft/mc-mods/complex-crops)
* [Defiled Lands](https://www.curseforge.com/minecraft/mc-mods/defiled-lands)
* [Duck Craft](https://www.curseforge.com/minecraft/mc-mods/duck-craft)
* [Edible Bugs](https://www.curseforge.com/minecraft/mc-mods/edible-bugs)
* [Erebus](https://www.curseforge.com/minecraft/mc-mods/the-erebus)
* [Exotic Birds](https://www.curseforge.com/minecraft/mc-mods/exotic-birds)
* [Ex Sartagine](https://www.curseforge.com/minecraft/mc-mods/ex-sartagine)
* [Extra Utilities 2](https://www.curseforge.com/minecraft/mc-mods/extra-utilities)
* [Familiar Fauna](https://www.curseforge.com/minecraft/mc-mods/familiar-fauna)
* [Fauna and Ecology](https://www.curseforge.com/minecraft/mc-mods/fauna-and-ecology)
* [Food Expansion](https://www.curseforge.com/minecraft/mc-mods/food-expansion)
* [Forestry](https://www.curseforge.com/minecraft/mc-mods/forestry)
* [Fossils and Archeology Revival](https://www.curseforge.com/minecraft/mc-mods/fossils)
* [Galacticraft](https://micdoodle8.com/mods/galacticraft)
* [Glacidus](https://www.curseforge.com/minecraft/mc-mods/glacidus)
* [Grim Pack](https://www.curseforge.com/minecraft/mc-mods/grim-pack)
* [Grimoire of Gaia](https://www.curseforge.com/minecraft/mc-mods/grimoire-of-gaia)
* [Growthcraft Community Edition](https://www.curseforge.com/minecraft/mc-mods/growthcraft-community-edition)
* [Heat and Climate](https://defeatedcrow.jp/modwiki/HeatAndClimate_EN)
* [Ice and Fire](https://www.curseforge.com/minecraft/mc-mods/ice-and-fire-dragons)
* [Inspirations](https://www.curseforge.com/minecraft/mc-mods/inspirations)
* [JAFFA Foods](https://www.curseforge.com/minecraft/mc-mods/jaffa-foods-a-harvestcraft-addon)
* [JurassiCraft](https://www.curseforge.com/minecraft/mc-mods/jurassicraft)
* [Lycanites Mobs](https://www.curseforge.com/minecraft/mc-mods/lycanites-mobs)
* [The Midnight](https://www.curseforge.com/minecraft/mc-mods/the-midnight)
* [Mo' Creatures](https://www.curseforge.com/minecraft/mc-mods/mo-creatures)
* [Mob Mash](https://www.curseforge.com/minecraft/mc-mods/mob-mash)
* [Mystical World](https://www.curseforge.com/minecraft/mc-mods/mystical-world)
* [Natura](https://www.curseforge.com/minecraft/mc-mods/natura)
* [Natural Fauna](https://www.curseforge.com/minecraft/mc-mods/natural-fauna-mod-a-zawa-addon)
* [NetherEx](https://www.curseforge.com/minecraft/mc-mods/netherex)
* [Oh The Biomes You'll Go](https://www.curseforge.com/minecraft/mc-mods/oh-the-biomes-youll-go)
* [Pam's BreadCraft](https://www.curseforge.com/minecraft/mc-mods/pams-breadcraft)
* [Pam's BrewCraft](https://www.curseforge.com/minecraft/mc-mods/pams-brewcraft)
* [Pam's HarvestCraft](https://www.curseforge.com/minecraft/mc-mods/pams-harvestcraft)
* [Pam's Simply Strawberries](https://www.curseforge.com/minecraft/mc-mods/pams-simply-strawberries)
* [PizzaCraft](https://www.curseforge.com/minecraft/mc-mods/pizzacraft)
* [Plant Mega Pack](https://web.archive.org/web/20181020031322/http://10paksmods.net/pmp.html)
* [Plants](https://www.curseforge.com/minecraft/mc-mods/plants)
* [PrimalCore](https://www.curseforge.com/minecraft/mc-mods/primalcore)
* [Primitive Mobs](https://www.curseforge.com/minecraft/mc-mods/primitive-mobs)
* [Project: Vibrant Journeys](https://www.curseforge.com/minecraft/mc-mods/project-vibrant-journeys)
* [Pyrotech](https://www.curseforge.com/minecraft/mc-mods/pyrotech)
* [Quark](https://quark.vazkii.net/)
* [Rats](https://www.curseforge.com/minecraft/mc-mods/rats)
* [RealWorld](https://web.archive.org/web/20181008045611/https://10paksmods.net/realworld.html)
* [Reptile Mod](https://www.curseforge.com/minecraft/mc-mods/lizardmod/files/3247823)
* [Rockhounding Surface](https://www.curseforge.com/minecraft/mc-mods/rockhounding-mod-surface)
* [Roots](https://www.curseforge.com/minecraft/mc-mods/roots)
* [Roots Classic](https://www.curseforge.com/minecraft/mc-mods/roots-classic)
* [Rustic](https://www.curseforge.com/minecraft/mc-mods/rustic)
* [SaltyMod](https://www.curseforge.com/minecraft/mc-mods/saltymod)
* [Simple Corn](https://www.curseforge.com/minecraft/mc-mods/simple-corn)
* [Simply Tea!](https://www.curseforge.com/minecraft/mc-mods/simply-tea)
* [Skye's Bakery](https://www.curseforge.com/minecraft/mc-mods/skyes-bakery)
* [Taco Tuesday](https://www.curseforge.com/minecraft/mc-mods/taco-tuesday)
* [Tea the Story](https://www.curseforge.com/minecraft/mc-mods/tea-the-story)
* [Thaumcraft](https://www.curseforge.com/minecraft/mc-mods/thaumcraft)
* [Tinkers Construct](https://www.curseforge.com/minecraft/mc-mods/tinkers-construct)
* [Tiny Progressions](https://www.curseforge.com/minecraft/mc-mods/tiny-progressions)
* [Tropicraft](https://www.curseforge.com/minecraft/mc-mods/tropicraft)
* [Twilight Forest](https://www.curseforge.com/minecraft/mc-mods/the-twilight-forest)
* [VanillaFoodPantry](https://www.curseforge.com/minecraft/mc-mods/vanillafoodpantry-mod)
* [XL Food Mod](https://www.curseforge.com/minecraft/mc-mods/xl-food-mod)
* [Zoo & Wild Animals Rebuilt](https://www.curseforge.com/minecraft/mc-mods/zoo-wild-animals-rebuild)

Mod support contributions are welcome!  Please create a [Pull Request](https://github.com/WesCook/Nutrition/pulls) or an [Issue](https://github.com/WesCook/Nutrition/issues) with the relevant .json files.
"
wangtianrui/NutritionMaster,Java,"
## 营养大师

一款基于数据分析的智能饮食推荐APP  

仓库地址: https://github.com/wangtianrui/NutritionMaster

### 数据分析

* 人体健康信息
  * 体重
  * 身高
  * 年龄
* 菜品信息
  * 菜的名称
  * 卡路里
  * 蛋白质,脂肪等
  * 推荐的食用量
* 某个人群对应的改善体质(减肥,塑性,增肌等)的方案
  * 菜谱
  * 运动方式

### 数据集和api

**赵励志收集的资料**

* 图像识别食物,获取卡路里: https://cloud.baidu.com/product/imagerecognition/fine_grained
* **nutrition facts** from food : https://www.kaggle.com/openfoodfacts/world-food-facts#en.openfoodfacts.org.products.tsv
  * https://world.openfoodfacts.org/ 数据集官网
  * 456赞,目前为止发现的最高的相关数据集
* nutrition facts for **McDonald’s** : https://www.kaggle.com/mcdonalds/nutrition-facts
  * Calories, fat, and sugar for every cheeseburger, fries, and milkshake on menu
* 更牛逼的食材分析和菜谱推荐: http://pic2recipe.csail.mit.edu/    加强版百度API
* 莫须有数据集
  * 糖尿病 时间-血糖含量关系数据 : https://archive.ics.uci.edu/ml/datasets/diabetes
  * GPA和饮食习惯的关系 : https://www.kaggle.com/borapajo/food-choices

**王天锐收集的资料**

0、9种体质   //暂定
1、根据用户的体质来进行推荐菜谱与制定营养计划     ----  两种模式：9体模式和普通健身模式
2、用户可以随时输入自己当前吃的食物的名字与量     ----  随时记
3、动态爬虫——http://www.boohee.com/       每种食材的卡路里等信息（优先kaggle）
4、卡路里累加器及其可视化、每天个人信息可视化
5、https://www.xinshipu.com/      菜谱信息
6、通过照片提取出食物的卡路里等信息  百度api
7、http://www.zyyssl.com/cookbook.html    //中药食材信息、药膳信息、9体、各种病针对的药膳
8、照片识菜帮
9、http://www.ttmeishi.com/CaiXi/YaoShan/  //病人对应的食谱  
10、测算http://www.chinacaipu.com/zt/sccs.html  体质算法 
11、http://www.chinacaipu.com/menu/jianya/      特殊人群（压力之类的）



### 需求分析

* 登陆、注册
* 输入基本信息信息（身高、体重、性别、年龄）
  * 额外信息（工作、周均运动时间、睡眠段、九体、病史）
* 针对没有填写额外信息的用户：选择减肥、增肌、塑形 、保持
* 可视化（自己的信息和目标标准的比较、根据上述选择改变）每天的量（手环、手机计步器），近几天的曲线
* 推荐菜谱：两个tab，一个定制菜谱，一个是随机智能推送
  * 单一菜推荐
  * 组合推荐
  * 一周大菜谱推荐（根据每日你自己加的一些信息动态改变）
  * 如果填了额外信息的，就是药膳推荐（一周药膳、周二普通、周三药膳。。。。）（注意可能不想减肥啥的）
* 百度api->动态录入每顿饭的信息（防抖处理，这里吹牛逼算法，推测吃了多少卡路里），识别后把，动态改变一周定制计划
* 做菜环节加入识菜帮所有功能，并加入详细食材信息卡路里等
* 针对特殊人群，混到推荐里推送有利于健康的**方法**信息（敷黄瓜方法）
* 特殊病人群体每日相关东西的摄取量的一个限定区间显示
* ocr体检单信息录入
* **针对照片中菜的数量分析吃了多少菜,包含多少卡路里**



### 10-6更新：小细节

* BMI小数
* 需不需要为每个用户加一个用于存放一周定制的类，（这个应该不是特别需要，只是想想）
* 模糊搜索
* 食材对应menu



#### 24日更新内容



粉尘接触得多的 吃纤维素

* 职业,某种病对各种物质的需求
  * 修改职业,病(一些菜谱分类),体质 表
  * 把职业分为几类(多动的,少动的)用于BMI标准
* https://www.google.com/search?q=%E8%90%A5%E5%85%BB%E5%85%83%E7%B4%A0%E9%9C%80%E6%B1%82&oq=%E8%90%A5%E5%85%BB%E5%85%83%E7%B4%A0&aqs=chrome.1.69i57j69i59j0l4.5781j0j1&sourceid=chrome&ie=UTF-8
* 职业\病\九体\体质(BMI) 结合起来的**物质需求标准**  (要求有 **卡路里**  六芒星),以周为单位计算需求量 
* 特殊职业(比如运动员)对身体素质(BMI)标准
* 早  中晚餐分类:
  * 早: 饼 粥 羹 面 奶  
* **加入季节方案(比如夏天就推荐防暑的,冬天推荐暖身的)**
* 蒋:
  * 补充菜谱: url补充缺失值,卡路里,热量,脂肪,蛋白质等
    * 爬卡路里时,原来的菜名是一列,新爬到的是一列,后面几列就是卡路里,脂肪等,注意数据规整
    * 爬不到就先空下,根据食材的信息计算
  * 食材的信息(包括卡路里等)
  * http://www.boohee.com/food/search?keyword=%E8%8C%B6%E5%8F%B6%EF%BC%88%E7%BA%A650%E5%85%8B%EF%BC%89
  * 菜谱的简单介绍
* 浏览记录(post  username和menuname和时间)

王:定制( 需要蒋给我比如:蛋白质在100-200范围内的菜谱)

蒋: 

* 体质表: 添加几列对某种物质的需求  √

* 职业表: 添加几列对某种物质的需求,添加一列BMI的需求 √

* user表: 添加综合对物质的需求 √

* 菜单表: 
  * 添加一列早/午晚餐,早为1,else为0.  根据 饼 粥 羹 面 奶  判断  
  * 补充一下缺失的url,卡路里 √
  * 添加几列各种物质的需求 √
    * 有一部分数据是爬下的csv里面直接读取,一部分缺失的用food_material的组合来计算

* **对接任务**: 接口使用方法可以参尻main函数里面的注释和数据库ER图

  * WebUtil改成了单例,一些方法注意一下

  * 注册: `createUser`.注意年龄应该让用户填出生年,获取年龄时每次都根据年份计算一下

    * 直接set设置用户的各种信息,不需要的就空着不用set,特殊的一点是病有多个值,要用一个List

    ![](http://ww1.sinaimg.cn/large/0077h8xtly1fvu5tfi47aj30mv0gg403.jpg)

  * 修改用户信息 `changeUserInfo`,注意username必须设置,其他的是需要改的值.**修改会覆盖之前的内容**.比如用户之前illness是健忘食谱,想增加一个高血压食谱, 就需要把之前的也写上,就是一起传 `健忘食谱,高血压食谱`这两个参数.写到List里面. 具体参考main函数里面的

  * 获取九体信息 `getPhysique`方法

  * 获取用户营养元素所需的量: 先`getUser`获取到用户的病/职业/体质名字,然后根据这些名字查询每个 病/职业/体质信息对应的元素需求,最后加权计算 (这里是不是麻烦了点?)

  * 用户职业BMI分类 3多动,2中等,1少动  先 `getUser`获取到用户的职业名字.然后`getOccupation`获取到该职业的BMI分类

  * 动态改变用户已吃的营养元素的量: 在用户表添加element参数,每周自动清空一次

    * Map的可选参数:  `[calorie,carbohydrate,fat ,protein,cellulose,vitaminA,vitaminB1,vitaminB2,vitaminB6,vitaminC,vitaminE,carotene,cholesterol,Mg,Ca,Fe,Zn,Cu,Mn,K ,P ,Na,Se,niacin ,thiamine]`

    ```java
    public static void main(String[] args) {
        	//只传入变动的参数就行.
        	//比如 这顿饭摄入了100卡路里,10脂肪.就这样写.
            Map<String, Double> params = new HashMap<>();
            params.put(""calorie"", 100.0);
            params.put(""fat"", 10.0);
    		
        	//第一个参数是username,第二个参数是摄入的营养元素值.可以看函数的源码,有注释
            WebUtil.getInstance().eatenElements(""test5"", params, new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
    
                }
    
                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    System.out.println(new Gson().fromJson(response.body().string(), MyUser.class));
    
                }
            });
    }
    ```

  * 获取用户本周已摄入的营养元素的量: `getUser`得到当前用户的信息,解析后用`MyUser`的`getEaten_elements()`获取到Element对象.里面有各种元素信息

  * 根据多个食材组合来搜菜

    ```java
    List<String> materialList = new ArrayList<>();
            materialList.add(""黄瓜"");
            materialList.add(""茄子"");
    //        materialList.add(""鸡蛋"");
            WebUtil.getInstance().getMenusByMaterials(materialList, new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
    
                }
    
                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    //必须判断状态码,如果为200说明正常,如果为404,说明这几个食材组合查询不到可以做的菜
                    if (response.code() == 200) {
                        String json = response.body().string();
                        FoodMenu[] menus = new Gson().fromJson(json, FoodMenu[].class);
                        System.out.println(menus);
                        for (FoodMenu menu : menus) {
                            System.out.println(menu.getName());
                        }
                    } else {
                        System.out.println(""查不到组合食材可以做的菜"");
                    }
                }
            });
    ```

  * 用户的浏览历史: 添加用户和菜谱的多对多关系

    ```java
    //获取历史记录  传入username
    WebUtil.getInstance().getEatenHistory(""test5"", new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
    
                }
    
                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    String json = response.body().string();
                    History[] histories = new Gson().fromJson(json, History[].class);
                    System.out.println(Arrays.toString(histories));
                }
            });
    //添加历史记录  传入username 和 Menu的名字
    WebUtil.getInstance().addEatenHistory(""test5"", ""多味茄子泥"", new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
    
                }
    
                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    String json = response.body().string();
                    History history = new Gson().fromJson(json, History.class);
                    System.out.println(history);
                }
            });
    ```

  * 菜名搜索: `getMenu`方法,传入菜名(菜名通过其他的各种关联方式获取) (menu.calorie是直接爬到的卡路里值,营养元素里的menu.elements.calorie卡路里是根据每个食材的卡路里计算的,相对来说,menu.calorie的值更准确)

  * 功效搜菜 `getMenuClassification`传入分类(功效)参数,比如川菜.搜到所有的川菜名字.然后可以用菜名搜索搜某个菜的详细信息

  * **点赞或评论来影响推荐顺序**

  * **晒图区域**

  * 营养量搜菜 : 搜索某个营养量范围内的菜

    可选参数:  `[calorie,carbohydrate,fat ,protein,cellulose,vitaminA,vitaminB1,vitaminB2,vitaminB6,vitaminC,vitaminE,carotene,cholesterol,Mg,Ca,Fe,Zn,Cu,Mn,K ,P ,Na,Se,niacin ,thiamine]`

    ```java
    public static void main(String[] args) {
        	//首先构造一个Map, key是参数的名字,value是参数的值.用不到的参数不用写.
        	//我在服务器端根据这些参数构造一个sql,就是 ... WHERE key1 <= val1 AND ...这样的.
       		//所以你只传入需要作为搜索条件的参数就可以了.
            Map<String, Double> params = new HashMap<>();
            params.put(""calorie"", 100.0);
            params.put(""fat"", 10.0);
            WebUtil.getInstance().getMenusByElements(params, new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
    
                }
    
                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    String json = response.body().string();
                    System.out.println(json);
                    //用轻量级的菜单类MenuLight解析json,这个类只有Menu的[名字,卡路里,元素对象的主码id]这三个域.想获取详细信息可以用getMenu方法获取
                    //这样是为了查询更快
                    FoodMenuLight[] foodMenuLights = new Gson().fromJson(json, FoodMenuLight[].class);
                    System.out.println(Arrays.toString(foodMenuLights));
                }
            });
    }
    ```

  * **季节搜菜**

  * 小知识获取 : `getRandomTricks`



![1538310994730](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1538310994730.png)

![1538313835249](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1538313835249.png)



#### 又想到的补充内容

- 根据口味推荐,或者口味混合搭配推荐
- 注意冬天不推荐夏天的菜谱

### 数据库设计

![](http://ww1.sinaimg.cn/large/0077h8xtly1fvu67fbm8qj312f0sux6p.jpg)

**加下划线为主码,加粗为外码,默认not null**

* **菜谱**(<u>str菜名</u>,  **nullable str体质_名称**(对应最优菜谱的效果) ,int卡路里,int制作时间(分钟),str口味,str工艺,str做法,str图片url)
  * menu
* **食材**( <u>str名称</u>)
  * material
* **体质**(<u>str体质名称</u>,str体质特点,str运动调理方式)
  * physique
* **体质性状**(<u>str性状名称</u>)
  * Physical properties
* **菜谱功能和分类**( <u>str分类名称</u>)
  * menu classification
* **用户**( <u>str用户名</u>,str密码, **nullable str 体质-名称**,**nullable str特殊职业**)
  * User
* **特殊职业**( <u>str职业名称</u>)
  * Occupation
* 菜谱功能分类_可治愈的职业\_特殊职业( <u> **特殊职业-str职业名称**</u>, <u> **菜谱功能和分类-str分类名称**</u>)
* 菜谱\_做菜_食材 ( <u>**str菜谱-菜名**</u>,**<u>str食材-名称**</u>,int用量)
  * cook quantity
* 食材\_效果_体质(<u> **str食材-名称**</u>,<u> **nullable str体质-名称**</u>,int效果(1有利于,0不利于))
  * Material effect
* 体质\_身体状态_体质性状( <u> **str体质-名称**</u>, <u> **str体质性状-性状名称**</u>)
  * physical_state
* 菜谱\_菜谱效果_菜谱功能和分类( <u> **str菜谱-菜名**</u>, <u> **str菜谱功能和分类-分类名称**</u>)
  * menu_effect



### 服务器请求

| 说明     | 方法   | 请求示例                                     | 备注                            |
| ------ | ---- | ---------------------------------------- | ----------------------------- |
| 查询菜单信息 | GET  | http://120.77.182.38/menus/某菜名/          | 不加菜名默认请求所有菜单(服务器可能扛不住)        |
| 查询食材信息 | GET  | http://120.77.182.38/foodmaterial/西红柿/   | 同上                            |
| 查询用户信息 | GET  | http://120.77.182.38/myuser/zhaolizhi/   | 同上                            |
| 新建用户信息 | POST | http://120.77.182.38/myuser/             | 参数见下图                         |
| 查询菜谱分类 | GET  | http://120.77.182.38/menuclassification/糖尿病食谱/ | 不加分类名默认请求所有分类(和对应的菜谱),响应时间较长  |
| 查询职业信息 | GET  | http://120.77.182.38/occupation/电力工程师/   | 不加职业名默认查询所有,响应较快  返回职业对应的菜单分类 |
| 查询体质信息 | GET  | http://120.77.182.38/physique/气虚质/       | 返回体质需要的食材                     |
|        |      |                                          |                               |
|        |      |                                          |                               |

* POST新建用户信息`params`示例

  * 1♂   0♀
  * `occupation_name`,`physical_name`的值必须和数据库对应

  ![](http://ww1.sinaimg.cn/large/0077h8xtly1fvjbfh6vm1j30r70eh3zj.jpg)



## 国赛阶段

### 代码

* 优化了`getRandomMenus方法`,传入username参数.会根据user的体质,职业,病理推荐菜

  ```java
  public void getRandomMenus(int count, String username, Callback callback)
  ```

  这个方法之前的版本没有username参数,**现在弃用原来的版本,原来的方法仍然可以调用,需要把项目的所有getRandomMenus方法调用加上一个username参数**

### 问题

* ~~连续识别,出现错误的,点一下消去  锐!~~
* ~~bug: 连续拍照后 点了一周定制  锐~~
* ~~*食材模糊识别 ok*~~
* ~~通过食材组合,搜索菜 ,菜要符合username的信息   蒋和锐 `getMenusByMaterials`~~
* 卡路里不对
* ~~*早餐晚餐的搜索不随机 shuffle了一下.ok*~~

  * ~~`get_menus_by_elements` django随机一下~~
* 周定制下面的两个按钮  锐
* ~~*搜菜如果搜不到   把name减一下再搜  ok*~~
* getRandomMenus的调用里面加上username参数 锐
* 吃饭的时候没拍照,吃饭完了才想添加,但是菜图片没有了.需要输入添加 (王)
* 口味信息采集
* 历史记录
* 社交功能: 点赞,晒图,评论


  ### 时间安排

* 周日上午答辩
* 周五排练

### PPT安排

* 小组分工介绍


* 产品背景 秦
* 量身定制 林
* 周定制 林
* 动态添加 智能定量 赵
* 拍食材做菜(食菜帮) 赵
* 菜谱推荐 秦

* 产品亮点 秦
* 产品难点 王
* 未来展望 王
  * 相信在不就得将来,在AI智能定制膳食的帮助下,人们不再为职业病,慢性病所烦恼,享受科学膳食带来的健康生活.

### 需要演示的功能

* 拍照  菜品识别  识别  烤鸭 土豆丝  鱼香肉丝  红烧肉  炒面   (动态调量,修改当天余额)
* 拍照 食材识别  胡萝卜  白萝卜  姜  长条茄子  菜花   (根据用户的信息,并且是多搜索)

* 周定制(最左边的fragment) 
"
nutritionix/nutrition-label,JavaScript,"Nutrition Label jQuery Plugin by Nutritionix
============================================

[![NPM](https://nodei.co/npm/nutrition-label-jquery-plugin.png)](https://www.npmjs.com/package/nutrition-label-jquery-plugin)

[Check out the Demo!](http://dev2.nutritionix.com/html/label-jquery-plugin/demo/demo.html)

Summary: Create a FDA-style nutrition label with any nutrition data source (even the [Nutritionix API](http://www.nutritionix.com/api)!)


Installation
------------

**getting the files from github and including the required files using cdn**
```sh
git clone git@github.com:nutritionix/nutrition-label.git
```

```html
<!-- include the needed font from google api -->
<link rel=""stylesheet"" type=""text/css"" href=""http://fonts.googleapis.com/css?family=Archivo+Black"" />
<!-- include the nutrition label plugin css file -->
<link rel=""stylesheet"" type=""text/css"" href=""/bower_components/nutrition-label-jquery-plugin/dist/css/nutritionLabel-min.css"">
<!-- include the jquery library from the google cdn -->
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js""></script>
<!-- include the nutrition label plugin js file -->
<script type=""text/javascript"" src=""/bower_components/nutrition-label-jquery-plugin/dist/js/nutritionLabel-min.js""></script>
```

***

**using bower**
```sh
bower install --save nutrition-label-jquery-plugin
```
***

**using npm**
```sh
npm install nutrition-label-jquery-plugin
```
***

```html
<!-- include the needed font from google api -->
<link rel=""stylesheet"" type=""text/css"" href=""http://fonts.googleapis.com/css?family=Archivo+Black"" />
<!-- include the nutrition label plugin css file -->
<link rel=""stylesheet"" type=""text/css"" href=""/bower_components/nutrition-label-jquery-plugin/dist/css/nutritionLabel-min.css"">
<!-- include the jquery library -->
<script type=""text/javascript"" src=""/bower_components/jquery/dist/jquery.min.js""></script>
<!-- include the nutrition label plugin js file -->
<script type=""text/javascript"" src=""/bower_components/nutrition-label-jquery-plugin/dist/js/nutritionLabel-min.js""></script>
```


Usage
-----

For some sample usage, you can check out the [demo page](http://dev2.nutritionix.com/html/label-jquery-plugin/demo/demo.html)."
openfoodfacts/off-nutrition-table-extractor,Jupyter Notebook,"
# off-nutrition-table-extractor
This repository is the accumulation of all the work done during Google Summer of Code 2018.
- **Student**: Sagar Panchal
- **Github**: [sgrpanchal31](https://github.com/sgrpanchal31)
- **Organisation**: [Open Food Facts](https://world.openfoodfacts.org/)
- **Project**: [OCR on Nutritional Facts Table](https://summerofcode.withgoogle.com/projects/#6627107531128832)

## Technical Details
The pipeline is made up of three major parts namely table detection, text detection and OCR with post-processing.

### Table Detection
For detecting tables in an image, we are using the Single Shot Detector (SSD) object detection model. The model is trained on Tensorflow's Object Detection API. The provided Jupyter Notebook shows how we are using the pre-trained graph to detect tables in product images.
Before running the notebook, install the object detection model from the [Tensorflow's Github Repository](https://github.com/tensorflow/models).
![Table detection](/data/images/table_detection.jpeg)

### Text Detection and extraction
Text detection is done using the [text-detection-ctpn](https://github.com/eragonruan/text-detection-ctpn) which uses fast-rcnn to extract textual regions in the image. In future, we are planning to update it to a faster and more accurate text detection model.
![Text Detection](/data/images/text_detection.jpg)

### OCR and post-processing
For the text recognition, we are using Tesseract OCR. Every text box detected from the text detection step will be passed through the OCR and a raw string will be returned which is then passed throught many post processing steps that clean the string (through regular expressions) and rectify any spelling mistakes in the string (using the [symspell](https://github.com/wolfgarbe/SymSpell) spelling correction algorithm).

### Final Results
![Full pipeline detection](/data/images/final_result.jpg)
Output for the above image is given below:
```
Nutritional content = {
    'Dietary Fiber': (2.0, 'g'), 
    'Sugars': (9.0, 'g'),
    'Soluble Fiber': (1.0, 'g'), 
    'Monounsaturated Fat': (0.5, 'g'), 
    'Polyunsaturated Fat': (0.5, 'g'), 
    'Trans Fat': (0.0, 'g'), 
    'Other Carbohydrate': (11.0, 'g')
}
```

## Requirements
The code is compatible with Python 3.0+. If you find any other dependency required during the execution, do raise an issue and inform there. 
```
1. Tensorflow
2. OpenCV
3. Pillow
4. Numpy
5. Tesseract v4.0
6. Pytesseract
7. Django-2.0.5 (Only for API)
```

## How to test your image
- Download the frozen model for ctpn from [here](https://github.com/eragonruan/text-detection-ctpn/releases/download/untagged-48d74c6337a71b6b5f87/ctpn.pb).
- Save the model in `./nutrition_extractor/data` repository.
- Make a directory named `test_images` and put the images in that folder.
- run `python detection.py -i [IMAGE-PATH]` from inside nutrition_extractor folder.

## Planned functionality
- [x] Develop a table detection model to extract the region of interest (nutritional facts table) from images.
- [x] Crop the RoI from images and apply text detection pipeline to the region.
- [x] Pass every text blob through Tesseract OCR to extract the text.
- [x] Develop a post-processing method to clean the text and extract the nutritional label and its value form it.
- [ ] Create a spatial mapping algorithm to map the text blobs according to their location in the image. (Done but the accuracy is not upto the standards).

## Future Work
With GSoC 2018 being the kickstarter of this project, we are just getting started. There are a lot of things to do that we are going to do
* Improving the spatial mapping algorithm. 
* Training and using a faster and more accurate text detection model than the currently used fast-rcnn model.
* Creating a bigger nutritional table dataset and training that on a recent and bleeding edge object detection model to improve the accuracy.
* Developing a better image preprocessing algorithm to detect bold text.
* Implementing a method to unify the two models into one since the same calculations are being done twice in initial layers of the two models.
"
wger-project/wger,Python,"﻿# wger
<img src=""https://raw.githubusercontent.com/wger-project/wger/master/wger/core/static/images/logos/logo.png"" width=""100"" height=""100"" />

wger (ˈvɛɡɐ) Workout Manager is a free, open source web application that helps
you manage your personal workouts, weight and diet plans and can also be used
as a simple gym management utility. It offers a REST API as well, for easy
integration with other projects and tools.

For a live system, refer to the project's site: <https://wger.de/>

![Workout plan](https://raw.githubusercontent.com/wger-project/wger/master/wger/software/static/images/workout.png)


## Mobile app
[<img src=""https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png""
      alt=""Get it on Google Play""
      height=""80"">](https://play.google.com/store/apps/details?id=de.wger.flutter)
[<img src=""https://fdroid.gitlab.io/artwork/badge/get-it-on.png""
      alt=""Get it on F-Droid""
      height=""80"">](https://f-droid.org/packages/de.wger.flutter/)


## Installation

These are the basic steps to install and run the application locally on a Linux
system. There are more detailed instructions, other deployment options as well
as an administration guide available at <https://wger.readthedocs.io> or in the
[docs repo](https://github.com/wger-project/docs).

Please consult the commands' help for further information and available
parameters.


### Production

If you want to host your own instance, take a look at the provided docker
compose file. This config will persist your database and uploaded images:

<https://github.com/wger-project/docker>

### Demo

If you just want to try it out:

```shell script
    docker run -ti --name wger.demo --publish 8000:80 wger/demo
```

Then just open <http://localhost:8000> and log in as **admin**, password **adminadmin**

Please note that this image will overwrite your data when you pull a new version,
it is only intended as an easy to setup demo

### Development version

We provide a docker compose file that sets everything up for development and
persists the database on a volume. From the root folder just call

````shell script
docker-compose -f extras/docker/compose/docker-compose.yml up
````

Log in as: **admin**, password **adminadmin**

For more info, check the [README in wger/extras/docker/compose](
 ./extras/docker/compose/README.md
).

#### Local installation

If you prefer a local installation, consult the
[development documentation](https://wger.readthedocs.io/en/latest/development.html)


## Contact

Feel free to contact us if you found this useful or if there was something that
didn't behave as you expected. We can't fix what we don't know about, so please
report liberally. If you're not sure if something is a bug or not, feel free to
file a bug anyway.

* **discord:** <https://discord.gg/rPWFv6W>
* **issue tracker:** <https://github.com/wger-project/wger/issues>
* **twitter:** <https://twitter.com/wger_project>


## Sources

All the code and the content is available on github:

<https://github.com/wger-project/wger>


## Translation
Translate the app to your language on [Weblate](https://hosted.weblate.org/engage/wger/).

[![translation status](https://hosted.weblate.org/widgets/wger/-/web/multi-blue.svg)](https://hosted.weblate.org/engage/wger/)


## License

The application is licensed under the Affero GNU General Public License 3 or
later (AGPL 3+).

The initial exercise and ingredient data is licensed additionally under one of
the Creative Commons licenses, see the individual exercises for more details.

The documentation is released under a CC-BY-SA: either version 4 of the License,
or (at your option) any later version.

Some images were taken from Wikipedia, see the SOURCES file in their respective
folders for more details.
"
noizwaves/nutrition,JavaScript,"nutrition
=========

Easy vegan nutrition system with meal templates and shopping list generation
"
djhi/my-nutrition,JavaScript,"# My-Nutrition
[![Build Status](https://travis-ci.org/djhi/my-nutrition.svg?branch=master)](https://travis-ci.org/djhi/my-nutrition)

A Meteor application using Webpack, React and Redux for nutritionists who coach people and people wanting to keep track of their nutrition.

![Nutritional Planning](https://sc-cdn.scaleengine.net/i/4699b5eefe616db4ceca84b4e3d33c49.png)

You can see the roadmap [here](./ROADMAP.md).

## Installation

Ensure you installed Meteor by following the [instructions](https://www.meteor.com/install), then run:
```
make install
```

This will copy the settings dist files in `/settings` with default values.

## Development

To start Webpack and Meteor, run:
```
make run-dev
```

The application will be available on `http://localhost:3000`.

Just wait for the message in the console indicating Meteor is running the app at the specified address.
Be aware that it can take some time on the first run as Meteor will install all needed packages.

## Debug

To debug server side code, make sure you installed `node-inspector` and run:
```
make run-debug
```

## Mongo

To access the mongo console, run:
```
make mongo
```

## Meteor commands

Execute any meteor command by running `met [COMMAND]`. For example:
```
met add react
```

## Deployment

Deployment is handled by [MUP](https://github.com/arunoda/meteor-up).

Configure MUP for your environments in `./settings/staging/mup.json` and `./settings/production/mup.json`.

Deploy with either `make deploy-staging` or `make deploy-prod`.

## License

**my-nutrition** is licensed under the MIT Licence, courtesy of @marmelab.
"
davatron5000/a11y-nutrition-cards,HTML,"# A11Y Nutrition Cards

A11Y Nutrition Cards is an attempt to digest and simplify the accessibility expectations when it comes to component authoring. Based on the <a href=""https://w3c.github.io/aria-practices/"">WAI ARIA Authoring Practices Guide</a>.

## Roadmap

- [ ] Add more components
- [ ] Simplify language
- [ ] Add framework-less CodePen demos for each component
- [ ] Use `<details>` to hide/disclose optional or advanced techniques.
 
## Contributing

Thank you very much for your interest in this project. While I won't be prompt, there's like a 90% chance I'd merge anything you commit.

## Building Locally

The site is built with [Jekyll](https://jekyllrb.com/) (you'll need Ruby to run Jekyll) and deployed via Github Pages. Not sure if it's the best path but leveraging Jekyll's Collections feature to organize components. If you'd like to help contribute locally...

```
git clone git@github.com:davatron5000/a11y-nutrition-cards.git
gem install jekyll
jekyll serve --livereload
```

To add a new component, create a new file in the `_components/` folder.
"
camertron/active_nutrition,Ruby,"## active_nutrition

ActiveNutrition is an ActiveRecord-backed collection of models for storing and retrieving nutritional information from the USDA's Nutrient Database.

## Installation

`gem install active_nutrition`

## Usage

ActiveNutrition is meant to be used within a Rails application, but it should work within any Ruby project that uses ActiveRecord 3.0 or greater.

```ruby
require 'active_nutrition'
```

In a (possibly Rails) gemfile:

```ruby
gem 'active_nutrition', '~> 0.5.0'
```

### Getting the Data

ActiveNutrition has the ability to fetch the current Nutrient Database files from the USDA's website and load them into your ActiveRecord-supported database.  As long as you've established a connection via ActiveRecord, you should be able to import the nutrient data.

With Rails:

```bundle exec rake active_nutrition:migrate active_nutrition:rebuild```

Without Rails:

```ruby
require 'active_nutrition'

ActiveNutrition.migrate
ActiveNutrition.rebuild
```

_Note_: The full data import could take anywhere from 30 minutes to a few hours depending on how powerful your computer is.
_Note_: You can use `an` instead of `active_nutrition` for all rake tasks, eg. `rake an:rebuild`.

### Searching

ActiveNutrition provides a simple `#search` method that executes a SQL `LIKE` statement and returns an array of `Food` objects:

```ruby
ActiveNutrition.search(""olive oil"")
```

### Food Objects

Each `Food` object offers these methods

1.  `#nutrition_facts`: Returns an array of `NutritionFact` objects for each kind of nutrient associated with this food.  Examples include the amount of protein, fat, and sodium.  Each `NutritionFact` object knows its unit (eg. miligrams, grams, etc) and amount per 1 gram of the food.
2.  `#weights`: Returns an array of common unit weights for this food (eg. cups, tablespoons, etc) and their gram equivalents.
3.  `#food_group`: Returns an object that specifies the name and code of the food's food group (eg. Breads, Vegetables, etc).

### NutritionFact Objects

Each `NutritionFact` object has these important methods:

1.  `#value`: How much of this nutrient is present in 1 gram of the food.
2.  `#units`: The unit associated with `#value`.
3.  `#description`: A textual description of the nutrient.

```ruby
ActiveNutrition.search(""olive oil"").first.nutrition_facts
```

Calling `#nutrition_facts` on a `Food` object actually returns an instance of `NutritionFacts`, which provides a handy `#to_hash` convenience method to hash nutrient amounts by description:

```ruby
# { ""Protein"" => 0.0, ""Total lipid (fat)"" => 100.0, ... }
ActiveNutrition.search(""olive oil"").first.nutrition_facts.to_hash
```

The `#to_hash` method is capable of hashing nutrient amounts by any method supported by `NutritionFact` via the `:by` option:

```ruby
# { 203 => 0.0, 204 => 100.0, 205 => 0.0, 207 => 0.0, ... }
ActiveNutrition.search(""olive oil"").first.nutrition_facts.to_hash(:by => :nutrition_number)
```

### Weight Objects

Each `Weight` object offers these methods:

1.  `#amount`: The amount associated with `#measurement`, eg. 1, 0.5, etc.
2.  `#measurement`: The unit associated with `#amount`, eg. cup, tablespoon, gallon, dash, etc.
3.  `#grams`: Mass in grams.

Calling `#weights` on a `Food` object actually returns an instance of `Weights`, which provides a handy `#to_hash` convenience method to hash weights (grams) by measurement:

```ruby
# { ""tablespoon"" => 13.5, ""cup"" => 216.0, ""tsp"" => 4.5 }
ActiveNutrition.search(""olive oil"").first.weights.to_hash
```

## Requirements

No external requirements.

## Running Tests

No test suite exists for this gem yet - coming soon!


## Authors

Cameron C. Dutro: http://github.com/camertron

## Links
USDA Nutrition Database: [http://www.ars.usda.gov/Services/docs.htm?docid=8964](http://www.ars.usda.gov/Services/docs.htm?docid=8964)

## License

Licensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0

## Future Plans

* Ability to update your local database with `rake active_nutrition:update`.
* Test suite."
omaralbeik/NutritionCal,Swift,"# NutritionCal

Nutrition Diary is a food and nutrition app that helps you eat right and make healthier food decisions, get nutrition info for foods and drinks, keep track of what you eat, and sync your eaten foods with Apple's Health App.

![Alt text](https://github.com/omaralbeik/NutritionCal/blob/master/screenShots/readme_header.jpg ""Nutrition Cal"")

How to Use:

Nutrition Cal Has 3 main tabs

a. Foods Tab: 
	-Here You can search for foods and add them to favorites
	
	-To search for foods tap + Button in the top right corner
	
	-You can eat food simply by swiping to the left on a food and taping the fork icon, or you can tap on a food to check the nutrition info and them make a decision.
	
	-inside an item page you see a chart with the main nutritions for a food (calcium, carbohydrate, cholesterol, energy, fat, protein,  sugar, vitamin C), or tap on Show All Nutrients button to see all nutrients, once done, tap on Eat it! button to eat the food, or back to go and continue your search.
	
	-You can save foods in favorites, by swiping to the left, and tap the download button, saving an item will fetch all nutritions for offline and fast use.


b. History Tab:

	-Here you see a calendar view to check for foods eaten at a specific day,
	
	-Swipe to delete an item (note that this will not delete the info from Health App)


c. Settings Tab:
	
	-Here you can choose to sync eaten foods with Health App, or keep history for foods in Nutrition Cal, reply tutorial, and more.


Nutrition Cal is an App made for all sizes iPhone with autolayout, built using Swift 2.0 and XCode 7.
Nutrition Cal requires iOS 8.0 or later..
To run the app, Simply download it, unzip the file run from Nutrition Cal.xcworkspace, not Nutrition Cal.xcodeproj


![Alt text](https://github.com/omaralbeik/NutritionCal/blob/master/screenShots/tutorial.gif ""Tutorial"")

All items nutritions info is from: National Agricultural Library, Agricultural Research Service, U.S. Department of Agriculture
http://www.nal.usda.gov/

Icons and graphics made by Freepik
www.flaticon.com


Special thanks to:
Wenchao Ding (FSCalendar)
https://github.com/WenchaoIOS/FSCalendar

takuya ichise (MaterialDesignColor)
https://github.com/tichise/MaterialDesignColor

Nguyen Vinh (NVActivityIndicatorView)
https://github.com/ninjaprox/NVActivityIndicatorView

Ben Guild (BGTableViewRowActionWithImage)
https://github.com/benguild/BGTableViewRowActionWithImage

Kevin (PNChart)
https://github.com/kevinzhow/PNChart
"
aaronksaunders/Ionic-NutritionSample,JavaScript,"##**Updated Ionic2 version of this sample application is available here [https://github.com/aaronksaunders/Ionic2-NutritionSample](https://github.com/aaronksaunders/Ionic2-NutritionSample)**


# Ionic-NutritionSample

Collection Repeat w/ $http and $resource Factory Example
--------------------------------------------------------
using https://developer.nutritionix.com/ for nutrition information; showing how to access REST API with either $http or $resource with IonicFramework collection-repeat directive.

API Information available here - https://developer.nutritionix.com

A [Pen](http://codepen.io/aaronksaunders/pen/jEYGPe) by [aaron k saunders](http://codepen.io/aaronksaunders) on [CodePen](http://codepen.io/).

[License](http://codepen.io/aaronksaunders/pen/jEYGPe/license).
"
Technigo/project-nutrition,JavaScript,"# Project Nutrition

Replace this readme with your own information about your project.

Start by briefly describing the assignment in a sentence or two. Keep it short and to the point.

## The problem

Describe how you approached to problem, and what tools and techniques you used to solve it. How did you plan? What technologies did you use? If you had more time, what would be next?

## View it live

Every project should be deployed somewhere. Be sure to include the link to the deployed project so that the viewer can click around and see what it's all about.
"
aaronksaunders/Ionic2-NutritionSample,CSS,"# Ionic2-NutritionSample

This is a sample application based on off a Ionic2 to show the use of http in an application. 

### YouTube Channel
--
#### [Check out the videos and leave suggestions for new ones and subscribe for updates](https://www.youtube.com/c/AaronSaundersCI)
--

In this example, we are using https://developer.nutritionix.com/for nutrition information; showing how to access REST API using ngFor directive for rendering the data.

####Ionic Version Information
```
Cordova CLI: 6.4.0
Ionic Framework Version: 2.0.0
Ionic CLI Version: 2.2.1
Ionic App Lib Version: 2.1.7
Ionic App Scripts Version: 1.0.0
ios-deploy version: 1.9.1
ios-sim version: 5.0.6
OS: macOS Sierra
Node Version: v5.0.0
Xcode version: Xcode 8.2.1 Build version 8C1002
```

####Function in service to query REST API
```javascript
    getSearchResults(_searchString) {

        // fields to get back from API based on documenation
        let fields = 'brand_id,item_name,item_id,brand_name,nf_calories,nf_total_fat';

        // set the parameters for the http request, these will be 
        // added to the query string
        let params: URLSearchParams = new URLSearchParams();
        params.set('appId', this.APP_ID);
        params.set('appKey', this.API_KEY);
        params.set('fields', fields)

        // construct the URL, adding the search term to the url
        let url = this.BASE_URL + _searchString
        
        // execute the http get request, passing in query tring parameters
        // use the .map() to convert results to JSON to be returned to
        // the caller
        return this.http.get(url, { search: params })
            .map(res => res.json())

    }
```

####Use the service to get the data
```javascript
    // have a string, do the search
    this._dataService.getSearchResults(q)
      .subscribe(
        // process the results..
        (data) => {
          console.log('search results', data.hits)
          this.items = data.hits
        },
        // handle an error condition...
        (err) => alert(""Error Searching: "" + err),
        // called when completely done processing
        () => { console.log(""All Good With The Data"") }
      );
```
##MORE IONIC2 SAMPLES HERE
- [https://github.com/aaronksaunders/ionic2-firebase-sample](https://github.com/aaronksaunders/ionic2-firebase-sample)
- [https://github.com/aaronksaunders/ionic2-angularfire-sample](https://github.com/aaronksaunders/ionic2-angularfire-sample)
- [https://github.com/aaronksaunders/kinvey-starter-ionic2](https://github.com/aaronksaunders/kinvey-starter-ionic2)
- [https://github.com/aaronksaunders/Ionic2-NutritionSample](https://github.com/aaronksaunders/Ionic2-NutritionSample)
"
dylanleigh/PriceAndNutritionTrackingSystem,Python,"
===================================
Price And Nutrition Tracking System
===================================

Note for Current Users - DB Changes when Upgrading
==================================================

Changes to the database schema have been made recently (2020-04-13)
and when upgrading from older versions you will need to migrate your
database by running './manage.py migrate' - see the ""Schema Changes""
subsection below for more details.

Introduction
============

PANTS is a self-hosted, open-source nutrition tracker and a tool for
nutritional data analysis of ingredients and recipes. It can be run on
your own computer or as a multiuser web service (e.g. for use by a
dietician/trainer/researcher and their clients).

As well as tracking daily calories etc, PANTS is designed to make it
easy to compare and optimize recipes which form a regular part of your
diet; a key feature is the ability for recipes to be components of
other recipes.

For example a dough recipe and a filling recipe can both be components
in a pie recipe; you can clone the pie recipe with alternate fillings
to compare the nutritional values of the alternatives. Any changes to
the dough recipe will be reflected in the data for all of the pies.
These ""meta-recipes"" can also be used to provide an ""average""
breakfast/lunch/snack/etc for meal and diet planning.

PANTS is under active, daily use by the author so updates should be
fairly frequent. On the other hand, the code tends to be quick and
dirty as new things get added because the author wanted to use them
ASAP while cooking his dinner.

It is currently not recommended for non-technical users; basic
familiarity with Django is useful.

.. contents:: Contents:
   :backlinks: none

Use Cases
=========

In particular PANTS is designed for:

- Tracking the calories and other nutrients in your food, especially things cooked frequently.
- Storing a list of recipes, and determining the cost and nutritional values of a recipe. This includes recipes which are used in other recipes (recursively) e.g. a dough recipe and a filling recipe can both be components in a pie recipe.
- Comparing the cost and nutritional values of different ingredients or recipes (e.g. ""What food has the most protein-per-dollar?"", ""Which of these recipes has the least calories but is still high in fibre?"").
- Long term dietary planning - working out which ingredients or recipes you want to include regularly in your diet, based on cost and other factors.

PANTS is *not* ideal for:

- Tracking takeaway/restaraunt meals or prepackaged snack foods (rather than stuff you prepare yourself from basic ingredients)
- Determing the best place to buy a shopping list of items (cost is not designed to be updated regularly or automatically, it is there for long-term planning).
- Comparing the cost of ingredients across different regions.

Overview and Features
=====================

There are 4 basic sections of the system:

Ingredients
   Generic ingredients, like ""Rolled Oats"", ""Green Split Peas"",
   ""Skim Milk"", not any particular brand or store.
   You can compare relative data such as Protein per Joule or Fibre per
   Dollar on the ingredients pages.

Recipes
   A collection of ingredients and/or other recipes, showing the combined
   nutritional value and cost of each serve of the recipe, as well as the relative
   per-calorie and per-dollar values.

Diary
   Record of food intake; compares the total to your target and also
   shows how much each food contributed to your total for the time
   period.

Targets
   Minimum and Maximum nutritional and cost values you are aiming to
   reach each day. As well as daily targets you can also set targets
   for particular meals (e.g. a pre/post workout meal), or special days.

Some example screenshots can be seen at https://github.com/dylanleigh/PriceAndNutritionTrackingSystem/tree/master/screenshots

Other Feature Notes and Tips
----------------------------

Tagging
   Ingredients and recipes can be given multiple tags for easier searching and
   analysis; this makes it much easier to (for example) compare the fibre
   per calorie in different vegetables or the calories per serve of
   different dessert.

   Recipes can also be ""flagged"" to mark them as untested, tested and
   working, requiring further improvement, outdated, etc.

Repurposing Recursive Recipes
   As recipes can include other recipes, this can be used for other
   analysis and planning purposes.

   For example. an ""average breakfast"" meta-recipe which just contains one
   of all the other breakfast recipes; divided by the number of serves
   this provides an average breakfast which can be used for planning.
   This can be combined with other ""typical meal"" meta-recipes to make
   an ""average day"" overview which can be used as a meal plan.

   This can also be used as a sort of ""variables"" in other recipes,
   e.g. if you sometimes use normal flour or gluten free flour, a ""flour""
   recipe can be created which can be used to toggle between them with
   one change which effectively toggles the ingredient in multiple
   recipes at once.

PANTS doesn't make assumptions or guesses
   It is preferable to show no data instead of wrong data. If an ingredient has
   something missing (e.g. no fibre listed, no prices), any
   derived statistics will also be missing (e.g. no fibre-per-kj, or no
   protein-per-$ if there is no price). This also means that recipes
   which use that ingredient will not show a value for the sum of fibre
   in that recipe until all ingredients have that data entered in.

PANTS doesn't assume everyone sleeps at midnight
   Diary shows breakdown of nutrients by both calendar day and 24-hour
   periods, so it can be used by shift workers or those with irregular
   sleep cycles.

Recipes update; Diary doesn't change
   Diary entries are ""crystallized"" (future changes to a recipe do not
   affect past entries). On the other hand, changes to an
   ingredient/recipe immediately show up in any recipes which use them.

Once-off Diary entries
   Diary entries do not have to be linked to a specific
   ingredient/recipe, one off diary entries can be created with manual
   nutritional data e.g. when going out for the night and you can only
   guess how many calories are in dinner.

Per-user and global data
   Ingredients and Recipes added by the admin are visible to all users
   (but not editable by them); Normal users can also enter in their
   own Recipes and Ingredients, which only they have access to
   (sharing may be added in a later version).

Progress/Percentage bars
   Once your default target is set, it will be used to compare against
   ingredients/recipes you view so you can see how much % of your
   daily intake that recipe/ingredient will satisfy. On most pages,
   Green/Yellow/Red bars indicate how much of the daily target's
   minimum/maximum are accounted for; Purple progress bars are used
   to show percentage out of the current total, or amount compared to the
   highest value in a list of recipes/ingredients.

Micronutrients
   All Australian standard nutritional data is stored (e.g. sodium and
   saturated fat) but not everything is shown in all views by default.
   There was support for micronutrients such as individual amino acids
   which was removed as part of a DB schema change but this is planned to
   be readded in a more stable way (see roadmap for details).


Installation
============

It is highly recommended that PANTS is installed in a virtualenv, and
comes with a requirements.txt for pip::

   virtualenv -p python3 pants
   cd pants
   . bin/activate
   git clone https://github.com/dylanleigh/PriceAndNutritionTrackingSystem.git
   cd PriceAndNutritionTrackingSystem
   pip install -r requirements.txt

Requirements
------------

These will be installed automatically via pip:

- Django 2+
- Django-extensions 1.8+
- Django REST Framework
- Django-filter

Setup 1: Secret Key
-------------------

The environment variable ""PANTS_DJANGO_SECRET_KEY"" needs to be set for
PANTS/Django to start.

The exact place to set this will depend on the OS and environment you
are using. For hosted infrastructure such as AWS or Heroku this can be
set in the instance settings; for local installs you can set it as
part of the virtualenv activation script or as a variable on the
account of the user who will be running it::

   echo export PANTS_DJANGO_SECRET_KEY='968af690a7bcca77c9261e395885af77bc661d1c' >> ~/.profile

You can generate an appropriate secret key from the SHA1 of any
randomly chosen phrase or file::

   $ echo blahblahblah | sha1sum
   968af690a7bcca77c9261e395885af77bc661d1c  -
   $ export PANTS_DJANGO_SECRET_KEY='968af690a7bcca77c9261e395885af77bc661d1c'

Warning
   The Django Secret Key is used to generate session tokens and other
   cryptographically important things. Keeping it in an environment
   variable makes it easier to have seperate, secure secrets on different
   installations. If someone knows the secret key it may be possible to
   login as admin users and mess with things, so keep it secret.

Setup 2: Migrations and Admin User
----------------------------------

Finally you will need to run initial migrations and create an admin
user who can log in and create the initial ingredients, recipes etc::

   cd pants
   ./manage.py migrate
   ./manage.py createsuperuser

Starting the Server
-------------------

To run the server locally and access it via a browser::

   ./manage.py runserver

Sample Ingredient Data
----------------------

The author's ingredient data (about 200 ingredients as of 2019) can be
imported from a fixture with this command::

   ./manage.py loaddata fixtures/pants-ingredient-fixture.json

This command should only be run on an empty/new database, to avoid
overwriting any entries you have already created 

Starting data entry
-------------------

You will need to log in as an admin user (at
http://127.0.0.1:8000/adminbackend/ ) to start creating initial
ingredients, and then recipes which use those ingredients (and recipes
which use those recipes...)

The about page will show some basic DB stats, including the count of
ingredients which are missing nutritional data and other potential
issues.

No ingredients/recipes need to be created to start using the diary
(although every entry will have to have all its data added manually if
there are no recipes or ingredients to use).

Adding Non-Super Users
----------------------

TODO this needs to be documented for API consumers.

API
===

This is a work in progress as of 2020-04-13. Documentation will go
here when it's implemented for all major models. It is located at
/api/1/ (i.e. http://127.0.0.1:8000/api/1/ on a local server).

History
=======

PANTS grew out of a spreadsheet I was using in early 2017 to do
nutritional analysis of different foods, looking for the best ratios
of protein and fibre to calories and cost.

I wanted to add recipes which combined different ingredients and this
became so cumbersome I realised it would be easier to do in a DB and
started the project in Django, importing the initial set of
ingredients from the spreadsheet. Soon I also realised since I was
entering in all my recipes here it would also be easier if I used it
as my daily calorie counter and added that as well.

Schema Changes
--------------

For all changes mentioned here, your database must be migrated by
running the following commands::

   git pull
   ./manage.py migrate

No further user input or manual conversion should be required. The
details below are mostly for background.

2020-04-13
   Recipe and Ingredient can now be linked to an ""owner"" (user) - user
   created recipes and ingredients through the API will be owned by
   that user. Only the logged in user can see/edit things they own.

   ""Global"" recipes/ingredients with no owner are visible to everyone,
   and only editable by admin (i.e. no change from previous versions)

2020-04-02
   Each Recipe and Ingredient may now have an ""Introduction"" and
   ""Notes"" - these are freeform text fields that are simply displayed
   at the start/end of the detail page for the recipe or ingredient.

2020-03-20 (v0.93)
   Following on from yesterday's changes, Price has now been fully
   detached from Product. This update also changes Prices to require an
   Ingredient set (during the migration, this was optional to allow
   data to be migrated automatically).

   If there are errors applying this migration it is probably because
   there are Price objects which don't have an Ingredient. The last
   version should have converted all the old ones automatically, and
   converted any new ones created in the admin when they were saved.
   However, if by some chance you have any corrupt prices not linked to
   an ingredient, these will have to be deleted for the migration to
   work.

   The product model still exists, but is now deprecated; it has no
   current purpose except to associate brand names with ingredients.
   If you don't care about that, products can be all safely deleted
   via the admin interface (use the checkbox to ""select all"" and then
   drop-down action box to ""delete selected""). They should not be
   any performance effects from leaving them there, as no calculations
   use products anymore.

2020-03-19 (v0.92)
   Prices are changing from being attached to a Product to directly
   being attached to Ingredient, to simplify both the user interface
   and the code.

   As of this version, Price is attached to both Product and
   Ingredient. Ingredient will be set automatically from the Product.

   Future versions will make Price settable via the Ingredient section
   of the admin interface rather than Product.

2020-03-11
   Recipe Flags added. These differ from Tags in two ways - each
   recipe can have only one flag, but flags are much more visible
   (being shown in lists etc).

   The intended use case is to mark recipes which are OK for general
   use to differentiate them from recipes which aren't working and
   need further changes and testing, or outdated recipes no longer
   recommended. However, they can be used for whatever the admin
   wants.

   Also, tags for Recipe and Ingredient can now have a brief text
   description which is shown in list view when that tag is selected.

2019-09-07 (v0.91)
   Recipe Components now have separate ""servings"" and weight"" to bring
   them in line with the way all other models work (previously,
   ""weight"" was interpreted as number of serves if connected to a
   recipe).

   This fixes various issues, including data entry errors from
   overloading one field to have two meanings and allows a lot of the
   code between ingredient/recipe/diary to be simplified.

   Existing recipes will be converted to this new system by
   recipes/migrations/0018_auto_20190908_0152.py when the migrate
   command is run.

Removed Features
----------------

Products (partially)
   After the nutrient model was merged into Ingredient, Product lost
   it's ability to have separate nutrient data, and it was just a
   redundant way of linking prices to ingredients, which is now done
   directly.

   The product model still exists in the admin, but currently has no
   purpose except to associate brand names with an ingredient.
   It may be used again in the future for storing further data about a
   specific branded product.

Collections
   Never properly implemented; need for this is reduced by heavier
   use of tags, creative use of recursive recipes (e.g. a ""daily meal
   plan"" as a ""recipe""), better frontend comparison tools and CSV
   export to spreadsheet for doing analysis there.

Plots
   Recipes/Ingredients now have a CSV export button, use that to
   create charts externally via a spreadsheet.

Amino Acids
   The original design could handle detailed micronutrient
   stats (including individual amino acids, minerals, EFAs, fibre types)
   but when the nutrients object was merged into ingredient this was
   dropped. It was rarely used, but may be readded when the
   nutrient_data class/cache system is reworked to be less kludgy - see TODOs

Developer Notes
===============

As mentioned earlier the code contains many crufty bits because many
features were added quickly when immediately required.

In particular, sets of ""nutrition data"" are often passed around as a
dict with a few specific sets of keys (specified in settings) and
there is an ongoing project to convert this to a class that manages it
in a sane way, handling all comparisons, additions and per-weight
calculations sensibly. A lot of future work is on hold pending this
tech debt cleanup to be completed.

See the todo list below for more details.

Bits Useful for Other Projects
------------------------------

- Recipe/Ingredient have a very simple but effective CSV export view.
- There are convenient templatetags to do division, combined min/max percentage display and generate a little CSS bar chart (most tabular data uses them, see the screenshots for examples).


Roadmap, Todos and Issues
-------------------------

See https://github.com/dylanleigh/PriceAndNutritionTrackingSystem/blob/master/TODO.rst


Authors
=======

Dylan Leigh 2017-2019


"
google-research-datasets/Nutrition5k,Python,"<div align=""center"">

# Nutrition5k: A Comprehensive Nutrition Dataset

<p align=""center"">
	<img src=""res/example_plate.jpg"" width=""400px"">
	<img src=""res/scan.gif"" width=""400px"">
</p>

<p align=""center"">
	<a href=""https://arxiv.org/pdf/2103.03375.pdf""><b>Paper</b></a> •
	<a href=""#download-data""><b>Download Data</b></a> •
	<a href=""#dataset-contents""><b>Dataset Contents</b></a> •
	<a href=""#license--contact""><b>License & Contact</b></a>
</p>

</div>

<b>Nutrition5k</b> is a dataset of visual and nutritional data for ~5k realistic plates of food captured from Google cafeterias using a custom scanning rig. We are releasing this dataset alongside our recent <a href=""https://arxiv.org/abs/2103.03375"">CVPR 2021 paper</a> to help promote research in visual nutrition understanding. Please see the paper for more details on the dataset and follow-up experiments.

### Key Features
<ul>
	<li>Scans data for 5,006 plates of food, each containing:
		<ul>
			<li>4 rotating side-angle videos</li>
			<li>Overhead RGB-D images <i>(when available)</i></li>
			<li>Fine-grained list of ingredients</li>
			<li>Per-ingredient mass</li>
			<li>Total dish mass and calories</li>
			<li>Fat, protein, and carbohydrate macronutrient masses</li>
		</ul></li>
	<li>Official train/test split</li>
	<li>Nutrition regression eval scripts</li>
</ul>

<i>→ [Also, see our related <a href=""https://tfhub.dev/google/seefood/segmenter/mobile_food_segmenter_V1/1"">Mobile Food Segmentation model on TensorFlow Hub</a>]</i>

### Download Data
All Nutrition5k data can be downloaded directly from our [Google Cloud Storage bucket](https://console.cloud.google.com/storage/browser/nutrition5k_dataset), or from the .tar.gz download link below.
<ul>
	<li><a href=""https://storage.cloud.google.com/nutrition5k_dataset/nutrition5k_dataset.tar.gz"">nutrition5k_dataset.tar.gz</a> (181.4 GB)
</ul>

From the Cloud Storage bucket directory, you can also browse through the dataset folders and download specific files using the `gsutil cp` command:
```
gsutil -m cp -r ""gs://nutrition5k_dataset/nutrition5k_dataset/{FILE_OR_DIR_PATH}"" .
```

See [here](https://cloud.google.com/storage/docs/gsutil) for instructions on installing the `gsutil` tool.

### Examples

<p align=""center"">
	<img src=""res/plate_1.jpg"">
	<img src=""res/plate_2.jpg"">
	<img src=""res/plate_3.jpg"">
	<img src=""res/plate_4.jpg"">
	<i><b>Example side-angle and overhead frames, with nutrition labels.</b></i>
</p>

<!--### Dish Ingredient Label
<img src=""res/ingredients_table.png"" width=""200px"">
<img src=""res/example_plate.jpg"" width=""400px"">
-->

<p align=""center"">
	<img src=""res/incremental.jpg"">
	<i><b>Example of the incremental scanning procedure.</b></i>
</p>



## Dataset contents

#### Side-Angle Videos
Video recordings were captured using 4 separate Raspberry Pi cameras (labeled A-D) at alternating 30 degree and 60 degree viewing angles. The cameras are positioned 90 degrees apart and sweep 90 degrees during video capture so that the dish is captured from all sides.
Video files are found in `imagery/side_angles/` and are organized by dish id. To extract all 2D image frames from a video, use ffmpeg as shown below:
```
ffmpeg -i input.mp4 output_%03d.jpeg
```

The models included in the Nutrition5k paper were trained and evaluated on every fifth frame sampled from each video, and we include two scripts to help with this. `scripts/extract_frames.sh` walks through each dish_id directory, extracts each frame from all four videos, and outputs the frames to a newly created `dish_ID/frames/` directory. `scripts/extract_frames_sampled.sh` accepts a command line argument to extract only every nth frame from each video.

```
cp scripts/extract_frames*.sh imagery/side_angles
cd imagery/side_angles
sh extract_frames.sh
sh extract_frames_sampled.sh 5
```

#### Overhead RGB-D Images
The `imagery/realsense_overhead/` directory contains RGB, raw depth, and colorized depth images organized by dish ID. Raw depth images are encoded as 16-bit integer images with depth units of 10,000 (i.e. 1 meter = 10,000 units). The colorized depth images provide a human-readable visualization of the depth map, with closer objects in blue and further objects in red. All depth values are rounded to a maximum of 0.4m (4,000 depth units), which exceeds the height of our food scanning rig.

#### Ingredient Metadata
The ingredient metadata CSV (`metadata/ingredient_metadata.csv`) contains a list of all ingredients covered in the dataset's dishes, their unique IDs, and per-gram nutritional information sourced from the USDA Food and Nutrient Database. Ingredient IDs take the following form: `ingr_[ingredient number padded to 10 digits]`.

#### Dish Metadata
The dish metadata CSVs (`metadata/dish_metadata_cafe1.csv` and `metadata/dish_metadata_cafe2.csv`) contain all nutrition metadata at the dish-level, as well as per-ingredient mass and macronutrients. For each dish ID `dish_[10 digit timestamp]`, there is a CSV entry containing the following fields: 

<i>dish_id, total_calories, total_mass, total_fat, total_carb, total_protein, num_ingrs, (ingr_1_id, ingr_1_name, ingr_1_grams, ingr_1_calories, ingr_1_fat, ingr_1_carb, ingr_1_protein, ...)</i>

with the last 8 fields are repeated for every ingredient present in the dish.

#### Train/Test Splits
We include dish IDs for the training and testing splits used in our experiments in the `dish_ids/splits/` directory. All incremental scans that compose a unique plate are held within the same split, to avoid overlap between the train and test splits. See Section 3.6 of our paper for more details on incremental scanning.

#### Evaluation Script
To help evaluate nutrition prediction methods, we provide `scripts/compute_eval_statistics.py`. This script can be used to calculate absolute and percentage mean average error from a CSV of per-dish nutrition values. This tool can be used to generate regression results that can be directly compared to those reported in our paper. See the header file for usage instructions.

## Dataset Bias Disclaimer
The dataset does not cover all food cuisines, as it was only collected in a few select cafeterias in California, USA. Nutrition5k does not claim to completely solve the food understanding problem, but rather aims to provide a unique level of detailed annotations and depth data to further advance the space.

## License & Contact
We release all Nutrition5k data under the <a href=""https://creativecommons.org/licenses/by/4.0/"">Creative Commons V4.0</a> license. You are free to share and adapt this data for any purpose, even commercially. If you found this dataset useful, please consider citing our [CVPR 2021 paper](https://arxiv.org/pdf/2103.03375.pdf).
```
@inproceedings{thames2021nutrition5k,
  title={Nutrition5k: Towards Automatic Nutritional Understanding of Generic Food},
  author={Thames, Quin and Karpur, Arjun and Norris, Wade and Xia, Fangting and Panait, Liviu and Weyand, Tobias and Sim, Jack},
  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},
  pages={8903--8911},
  year={2021}
}
```

If you have any questions about the Nutrition5k dataset or paper, please send an email to the authors at <a href=""mailto:nutrition5k@google.com"">nutrition5k@google.com</a>.


Thank you to Ben Goldberger, Caitlin O'Brien, and the Google LAX/PLV Cafeteria teams for their contributions!
"
gihan667/nutrition-app,Dart,"# Flutter Food Store UI

## [Watch it on YouTube](https://youtu.be/eJatCOp4K6w)

In this video we will create two screens for ecommerce app using #flutter. In Home screen there will be items grid and category selector. In Details screen we display selected item details. We using #Hero widget to implement #animation.

#### [Design Credits](https://www.uplabs.com/posts/food-nutrition-app-challenge)

### Preview

![App UI](/preview.png)"
kcal-app/kcal,PHP,"# kcal – the personal food nutrition journal

[![License: MPL 2.0](https://img.shields.io/badge/License-MPL%202.0-brightgreen.svg)](https://opensource.org/licenses/MPL-2.0)
[![CI Status](https://github.com/kcal-app/kcal/actions/workflows/ci.yml/badge.svg)](https://github.com/kcal-app/kcal/actions/workflows/ci.yml)
[![Coverage Status](https://coveralls.io/repos/github/kcal-app/kcal/badge.svg?branch=main)](https://coveralls.io/github/kcal-app/kcal?branch=main)

Track nutritional information about foods and recipes, set goals, and record a food
journal to help along the way. Kcal is a *personal* system that focuses on direct
control of inputs (as opposed to unwieldy user generated datasets) and a minimal,
easy to use recipe presentation for preparing meals.

## Demo

A [demo of kcal](http://demo.kcal.cooking) is available on Heroku. Login credentials are:

- Username: `kcal`
- Password: `kcal`

The demo instance resets every hour, on the hour.

## Screenshots

![kcal mobile screenshot](screenshots/mobile.png)
![kcal desktop screenshot](screenshots/desktop.png)

## Functionality

Kcal's primary functionality includes three main content categories -- journal,
recipes, and foods -- and two per-user configurations -- goals and meals. Users
can customize meals (up to eight per day) for meal planning, set multiple
goals for tracking calories and macros (fat, carbohydrates, protein), enter food
data with calories and macros, create recipes based on foods and other recipes,
and record foods and recipes in a journal tracked against goals.

### Foods

Foods are shared between all users.

Foods are the basis for recipes and calorie and macro calculations throughout the
app. They can be added directly to journal entries and included in recipes that
roll-up nutritional data per serving.

Food servings can be recorded using U.S. measure units (teaspoon, tablespoon, cup)
and use a weight basis of grams. These units and weights are commonly used in the
United States and required by law for most packaged foods. Kcal tries to make data
entry as easy as possible by organization field order and units to match nutritional
label configurations.

Food data does not (currently) make use of any API or service for retrieving
information about food. While this may change in the future, there are a couple
of reason this feature has been left out of kcal:

 - There is a very large volume of data in most food databases such that organizing,
   categorizing, and searching for the right food can be daunting.

 - Food databases that allow and include input from large groups of users can be
   inaccurate and counter-productive for users with calorie and/or macro goals.
   
 - Kcal's self-hostable nature is in part for privacy-conscious users so limiting
   interactions with third-party services is desirable (though adding APIs as an
   optional enhancement is not a major concern here).

Foods are taggable and tags can be used to filter and search for foods quickly.

![kcal foods edit and show screenshot](screenshots/foods.png)

### Recipes

Recipes are shared between all users. They (currently) cannot be shared externally,
but a feature enhancement to support optional, per-recipe public link creation is
planned.

Configurable recipe metadata includes servings, weight, volume, timing, image,
description, ingredients, and steps.

The recipe view is meant to be as uncluttered as possible, to support browser
""reader mode"", and to still provide nutritional metadata at a glance.

Recipes are taggable and tags can be used to filter and search for recipes quickly.

![kcal foods edit and show screenshot](screenshots/recipes.png)

### Journal entries

Journal entries are private. Each user has and can only see their own entries.

Planning and tracking calories and macros is the primary focus of journal entries.
The journal section aggregates this information by day and by meal.

Recipes and foods can be added to journal entries in various quantities and configurations
(depending on the associated serving data). Manual entries can also be used to record
data for foods and recipes *not* in the kcal's database.

Journal entries are not editable. The calorie and macro information for each entry is
recorded with the entry. This allows for recoding and maintaining journal entry
data even as foods and recipes are updated.

![kcal journal entries edit and show screenshot](screenshots/journal-entries.png)

### Goals

Goals are private. Each user can create and see only their own goals.

Goals reflect daily calories and macros and are therefore closely related to journal
entries.

Goals can be configured as ""default"" for specific days of the week but can also
be overridden for individual days in the journal section.

There is no limit to the number of goals a user can create.

![kcal goals edit and show screenshot](screenshots/goals.png)

### Meals

Meals are private. Each user can rename, arrange, and enable or disabled their
own meals.

Meals are used to aggregate data within a day in the journal section and can be
used for both meal planning and goal tracking.

There is a pre-configured maximum of eight meals for each user.

![kcal meals edit and show screenshot](screenshots/meals.png)

## Use cases

Kcal's primary focus is tracking nutrition (recipe management is the most important
secondary focus), so it should be a useful tool for anyone looking to implement a
specific diet. Below are some (very) broad diet types and information about how
kcal can be helpful. Kcal intentionally **does not** provide any specific dieting
guidance or recommend any particular diet or type of diet. Individual users are
expected to research and make their own plans and goals -- kcal is here to help
record and organize the data.

### Hypocaloric diets

Hypocaloric diets use [calorie restriction](https://en.wikipedia.org/wiki/Calorie_restriction)
for weight loss or other dietary management. Kcal users can create low calorie
(relative to personal regular calorie) intake goals and use the detailed nutritional
data of food and recipes and to plan meals and record caloric intake using journal
entries.

### Hypercaloric diets

Hypercaloric diets are used for weight gain and can be especially useful for building
muscle in weight training. Kcal users can create calorie goals that exceed expected
calorie burn on a day-to-day basis. For the weight training example users can create
a goal for training days and separate, lower goal for rest days. The goals can be
automated based on the day of the week and journal entries can be used to ensure
that a proper macro balance is maintained. More meals may also be helpful on a
hypercaloric diet and kcal supports up to eight meals per day.

### Plant based diets (vegetarian, vegan, etc.)

Diets that exclude animal-based products may require special attention to ensure
a proper balance of nutrients (particularly when transitioning). Kcal's goals and
food nutritional data can help to make sure that appropriate fat, carbohydrate,
and protein needs are met.

### Low-X diets

Any diet that focuses on lowering a particular nutrient can be trackable with kcal.
In addition to the macronutrients (fat, carbohydrates, and protein) foods support
cholesterol and sodium data as well. Support for other common nutrients like
saturated fats, trans fats, fiber, sugar, etc. may also be available in future
iterations.

## Deployment

Docker is the recommended deployment method. See [kcal-app/kcal-docker](https://github.com/kcal-app/kcal-docker).

General requirements for any deployment are:

 - PHP 8.x with Composer 2.x and PHP extensions: `bcmath`, `curl`, `gd`, `intl`,
   `mbstring`, `xml`, `zip`.
 - Web server/proxy (Apache, nginx, etc.)
 - Database (MySQL/MariaDB, PostgreSQL, etc.)

Optional but useful additions are:

 - [Search driver](#search-mag) (Algolia, Elasticsearch, and database supported)
 - Redis
 - [Media Storage](#media-storage) (local or AWS S3 supported)

### Docker

There is a [`Dockerfile`](Dockerfile) and automated build process to create builds
at [kcalapp/kcal](https://hub.docker.com/repository/docker/kcalapp/kcal) on Docker Hub.
See the [kcal-app/kcal-docker](https://github.com/kcal-app/kcal-docker) repository
for a Docker Compose based template and instructions.

### Heroku

[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)

The default username and password for a Heroku deployment is `kcal`/`kcal`.

#### Using Heroku CLI

For a manual deploy using Heroku CLI, execute the following after initial deployment:

    heroku run php artisan migrate
    heroku run php artisan user:add
    heroku config:set APP_KEY=$(php artisan --no-ansi key:generate --show)

#### Media storage

Heroku uses an ephemeral disk. In order to maintain recipe and/or user images between
app restarts AWS can be used. See [Media Storage - AWS S3](#aws-s3) for additional
guidance.

#### Search drivers

See the [Search](#search-mag) section for information about supported drivers. Additional
environment variable configuration is necessary when using any search driver other
than the default (""null"").

#### Redis Add-on

The [Heroku Redis](https://elements.heroku.com/addons/heroku-redis) add-on can be
added to the app and will work without any configuration changes. It is left out
of the default build only because it takes a very long time to provision.

### Manual

This deployment process has been tested with an Ubuntu 20.04 LTS instance with
2GB of memory which should be enough to host the app for a few regular users.
The memory is primarily needed for Elasticsearch -- See the [Search](#search-mag) 
section for other options if lower memory support is needed.

1. Add [PHP 8.x repository](https://launchpad.net/~ondrej/+archive/ubuntu/php).

       sudo apt-get install software-properties-common
       sudo add-apt-repository ppa:ondrej/php

1. Add [Elasticsearch 7.x repository](https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html).

       wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
       echo ""deb https://artifacts.elastic.co/packages/7.x/apt stable main"" | sudo tee /etc/apt/sources.list.d/elastic-7.x.list

1. Update available packages.

       sudo apt-get update

1. Install dependencies.

       sudo apt-get install elasticsearch mysql-server-8.0 nginx-full php8.0 php8.0-bcmath php8.0-cli php8.0-curl php8.0-gd php8.0-intl php8.0-mbstring php8.0-mysql php8.0-redis php8.0-xml php8.0-zip redis php8.0-fpm

1. Start Elasticsearch and configure to run at start up.

       sudo systemctl start elasticsearch
       sudo systemctl enable elasticsearch

1. Install Composer.

    :rotating_light: This command runs code from a remote location as root.
    See [Download Composer](https://getcomposer.org/download/) for alternative install options.

       curl -s https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin/ --filename=composer

1. Clone the app repository.

       cd /var/www
       sudo mkdir kcal
       sudo chown $USER:`id -gn $USER` kcal
       cd kcal
       git clone https://github.com/kcal-app/kcal.git .

1. Configure nginx to serve the app public files.

       sudo vim /etc/nginx/conf.d/kcal.conf
       <edit config, see example below>
       sudo service nginx restart

    Example config:

       server {
           listen 80;
           server_name kcal.example.com;
           root /var/www/kcal/public;
           
           add_header X-Frame-Options ""SAMEORIGIN"";
           add_header X-Content-Type-Options ""nosniff"";
           
           index index.php;
           
           charset utf-8;
           
           location / {
              try_files $uri $uri/ /index.php?$query_string;
           }
           
           location = /favicon.ico { access_log off; log_not_found off; }
           location = /robots.txt  { access_log off; log_not_found off; }
           
           error_page 404 /index.php;
           
           location ~ \.php$ {
              fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;
              fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
              include fastcgi_params;
           }
           
           location ~ /\.(?!well-known).* {
              deny all;
           }
       }

1. Create database user.

       sudo mysql -u root
       CREATE DATABASE `kcal`;
       CREATE USER 'kcal'@'localhost' IDENTIFIED BY RANDOM PASSWORD;
       GRANT ALL ON `kcal`.* TO 'kcal'@'localhost';
       FLUSH PRIVILEGES;

    :lock: Save the generated password output by the `CREATE USER` statement.

1. Install dependencies and generate an app key to use in the next step.

       composer install --optimize-autoloader --no-dev
       php artisan --no-ansi key:generate --show

1. Copy environment config file and adjust as desired.

       cp .env.example .env

    At a minimum:
     - Set `APP_KEY` to the value generated in the previous step.
     - Set `APP_URL` to match the host configured in nginx configuration.
     - Set the `DATABASE_` values to the configured credentials.

1. Run initial app installation/bootstrap commands.

       php artisan migrate
       php artisan elastic:migrate
       php artisan config:cache
       php artisan route:cache
       php artisan view:cache
       php artisan user:add --admin

1. Allow web server to access required directories.

       sudo chown -R $USER:www-data {storage,public}
       sudo chmod g+s {storage,public}

1. Visit the `APP_URL` and log in!

## Configuration

### Media Storage

Recipes and users can have associated media (images) that by default are stored
on a local disk under the path `{app}/public/media`. If a local disk solution is
not feasible, an AWS S3 bucket can be used instead.

#### AWS S3

Use the general guidance below to create an AWS S3 bucket and IAM user for media
storage in AWS S3.

1. Create a bucket that allows objects to be configured with public access.

1. Create an IAM user with access to the bucket.

    Use this example policy to grant necessary permissions to a specific bucket:

       {
           ""Version"": ""2012-10-17"",
           ""Statement"": [
              {
                 ""Sid"": ""VisualEditor0"",
                 ""Effect"": ""Allow"",
                 ""Action"": [
                     ""s3:GetBucketPublicAccessBlock"",
                     ""s3:GetBucketPolicyStatus"",
                     ""s3:GetAccountPublicAccessBlock"",
                     ""s3:ListAllMyBuckets"",
                     ""s3:GetBucketAcl"",
                     ""s3:GetBucketLocation""
                 ],
                 ""Resource"": ""*""
              },
              {
                 ""Sid"": ""VisualEditor1"",
                 ""Effect"": ""Allow"",
                 ""Action"": ""s3:ListBucket"",
                 ""Resource"": ""arn:aws:s3:::REPLACE_WITH_S3_BUCKET_NAME""
              },
              {
                 ""Sid"": ""VisualEditor2"",
                 ""Effect"": ""Allow"",
                 ""Action"": [""s3:*Object"", ""s3:*ObjectAcl*""],
                 ""Resource"": ""arn:aws:s3:::REPLACE_WITH_S3_BUCKET_NAME/*""
              }
           ]
       }

1. Set necessary environment variables (via `.env` or some other mechanism).

       MEDIA_DISK=s3-public
       AWS_ACCESS_KEY_ID=REPLACE_WITH_IAM_KEY
       AWS_SECRET_ACCESS_KEY=REPLACE_WITH_IAM_SECRET
       AWS_DEFAULT_REGION=REPLACE_WITH_S3_BUCKET_NAME
       AWS_BUCKET=REPLACE_WITH_S3_BUCKET_REGION

### Search :mag:

The ""ingredient"" (food or recipe) search for journal entries and recipe ingredients
supports three different backends using the `SCOUT_DRIVER` environment variable.
In all cases, always ensure that the `SCOUT_DRIVER` environment variable is only
set once in kcal's `.env` file.

Currently, the food and recipe *list* searches do not take advantage of these
search drivers. Support for those searches will be added if the Laravel JSON:API
adds support for Scout (see: laravel-json-api/laravel#32).

### Algolia (`algolia`)

1. [Create and/or log in](https://www.algolia.com/users/sign_in) to an Algolia account.

1. Create an application for kcal.

1. Navigate to the application's ""API Keys"" section.

1. Using the **Application ID** and **Admin API Key** values, update kcal's `.env` file:

       SCOUT_DRIVER=algolia
       ALGOLIA_APP_ID=<APPLICATION_ID>
       ALGOLIA_SECRET=<ADMIN_API_KEY>

### ElasticSearch (`elastic`)

1. Determine the ElasticSearch service host and port.

1. Update kcal's `.env` file.

       SCOUT_DRIVER=elastic
       ELASTIC_HOST=<HOST:PORT>
       ELASTIC_PORT=<PORT>

   Note: The `ELASTIC_PORT` variable is a convenience option specifically for
   Docker Compose configurations and is not strictly required.
   
1. Run Elastic's migrations.

       php artisan elastic:migrate

### Fallback (`null`)

The fallback driver is a simple `WHERE ... LIKE` clause search on a couple of key
fields. Results will not be ordered by relevance, and some fields will not be
searched (e.g. the tags fields). Using one of the other options is highly recommended.

Set `SCOUT_DRIVER=null` in kcal's `.env` file to use the fallback driver.

## Development

### Laravel Sail

#### Prerequisites

- [Composer](https://getcomposer.org/download/)
- [Docker](https://docs.docker.com/get-docker/)
- [Docker compose](https://docs.docker.com/compose/install/)

#### Steps

1. Clone the repository.

       git clone https://github.com/kcal-app/kcal.git
       cd kcal

1. Install development dependencies.

       composer install

1. Create a local `.env` file.

       cp .env.local.example .env

1. Generate an app key.

       php artisan key:generate

    Verify that the `APP_KEY` variable has been set in `.env`. If has not, run
    `php artisan key:generate --show` and copy the key and append it to the
    `APP_KEY=` line manually.

1. Run it! :sailboat:

       vendor/bin/sail up

1. (On first run) Run migrations.

       vendor/bin/sail artisan migrate
       vendor/bin/sail artisan elastic:migrate

1. (On first run) Seed the database.

       vendor/bin/sail artisan db:seed

    The default username and password is `kcal` / `kcal`.

Navigate to [http://127.0.0.1:8080](http://127.0.0.1:8080) to log in!

Create a `docker-compose.override.yml` file to override any of the default settings
provided for this environment.

### Custom console commands

#### `dev:cache-clear`

Executes the various cache clearing artisan commands:

- `cache:clear`
- `config:clear`
- `route:clear`
- `view:clear`

#### `dev:reset`

Resets and seeds the database by executing the following artisan commands:

- `db:wipe`
- `migrate`
- `db:seed`

### Testing

Ensure that Sail is running (primarily to provide ElasticSearch):

    vendor/bin/sail up -d

Execute tests.

    vendor/bin/sail artisan dev:cache-clear
    vendor/bin/sail artisan test --parallel --recreate-databases
"
leetrout/python-nutritionix,Python,"python-nutritionix
==================

Nutritionix API Python wrapper

![Nutritionix API Credit](https://d3jpl91pxevbkh.cloudfront.net/nutritionix/image/upload/v1363458498/attribution_jqfdgy.png)


Installing
==========

`pip install nutritionix`

Dependencies
------------

Requires [Requests](http://docs.python-requests.org/en/latest/).


Config
======

You'll need an api key and app id which is tied to a developer account at
https://developer.nutritionix.com

You may provide these parameters in your code or with the environment variables
`NIX_APP_ID` &amp; `NIX_API_KEY`


Usage
=====

#### Instantiate ####

First, instantiate the API wrapper object

    from nutritionix import Nutritionix
    nix = Nutritionix(app_id=""123456789"", api_key=""XXXYYYZZZ"")

Or if you have configured the environment variables, simply

    from nutritionix import Nutritionix
    nix = Nutritionix()

#### Define request ####

Defining a request is simply chaining a method to the API wrapper instance

    pizza = nix.search(""pizza"")

That will return a new wrapper object which will perform a search for pizza.

#### Retrieve results ####

We can retrieve the parsed JSON results easily by using the json method

    results = pizza.json()

All of this could also be written more concisely as

    nix.search('pizza').json()

#### Using parameters ####

Of course adding parameters is easy- just pass them as keyword arguments
to the method

    nix.search('pizza', results=""0:1"").json()

#### Using NXQL ####

And making use of NXQL is also straight forward by using a call to search with
no arguments and calling the nxql method with your desired query expressed as
keyword arguments (filters, queries, or query)

    nix.search().nxql(
        filters={
            ""nf_calories"": {
                ""lte"": 500
            }
        },
        fields=[""item_name"", ""item_id"", ""nf_calories""]
    ).json()


Examples
========

### Search ###

    >>> nix.search(""big mac"", results=""0:1"").json()
    {u'hits': [{u'_id': u'513fc9e73fe3ffd40300109f',
                u'_index': u'nixProductionV9',
                u'_score': 1.1813704,
                u'_type': u'item',
                u'fields': {u'brand_name': u""McDonald's"",
                            u'item_id': u'513fc9e73fe3ffd40300109f',
                            u'item_name': u'Big Mac'}}],
     u'max_score': 1.1813704,
     u'total_hits': 1050}

### Items ###

    >>> nix.item(id=""513fc9e73fe3ffd40300109f"").json()
    {u'allergen_contains_eggs': None,
     u'allergen_contains_fish': None,
     u'allergen_contains_gluten': None,
     u'allergen_contains_milk': None,
     u'allergen_contains_peanuts': None,
     u'allergen_contains_shellfish': None,
     u'allergen_contains_soybeans': None,
     u'allergen_contains_tree_nuts': None,
     u'allergen_contains_wheat': None,
     u'brand_id': u'513fbc1283aa2dc80c000053',
     u'brand_name': u""McDonald's"",
     u'item_description': u'7.6 oz (215 g)',
     u'item_id': u'513fc9e73fe3ffd40300109f',
     u'item_name': u'Big Mac',
     u'leg_loc_id': 114,
     u'nf_calcium_dv': 25,
     u'nf_calories': 550,
     u'nf_calories_from_fat': 260,
     u'nf_cholesterol': 75,
     u'nf_dietary_fiber': 3,
     u'nf_ingredient_statement': u'100% Beef Patty...',
     u'nf_iron_dv': 25,
     u'nf_monounsaturated_fat': None,
     u'nf_polyunsaturated_fat': None,
     u'nf_protein': 25,
     u'nf_refuse_pct': None,
     u'nf_saturated_fat': 10,
     u'nf_serving_size_qty': 1,
     u'nf_serving_size_unit': u'Burger',
     u'nf_serving_weight_grams': 215,
     u'nf_servings_per_container': None,
     u'nf_sodium': 970,
     u'nf_sugars': 9,
     u'nf_total_carbohydrate': 46,
     u'nf_total_fat': 29,
     u'nf_trans_fatty_acid': 1,
     u'nf_vitamin_a_dv': 4,
     u'nf_vitamin_c_dv': 2,
     u'nf_water_grams': None,
     u'old_api_id': None,
     u'updated_at': u'2013-06-28T17:53:50.000Z'}

### Brand Search ###

    >>> nix.brand().search(query=""mcdonalds"").json()
    {u'hits': [{u'_id': u'513fbc1283aa2dc80c000053',
     u'_index': u'nixproductionv13',
     u'_score': 7.1310086,
     u'_type': u'brand',
     u'fields': {u'_id': u'513fbc1283aa2dc80c000053',
     u'name': u""McDonald's"",
     u'type': 1,
     u'website': u'http://www.mcdonalds.com'}}],
     u'max_score': 7.1310086,
     u'total': 1}

### Brands ###

    >>> nix.brand(""513fbc1283aa2dc80c000053"").json()
    {u'brand_id': u'513fbc1283aa2dc80c000053',
     u'created_at': u'2011-07-01 08:45:47',
     u'name': u""McDonald's"",
     u'old_api_id': u'0PewL8juRBSozVk',
     u'type': 1,
     u'updated_at': u'2013-06-26T11:36:25.468Z',
     u'website': u'http://www.mcdonalds.com'}


"
carolynvs/nutritionix,C#,"# Nutritionix Client Library for .NET
===========

This is a .NET client for the [Nutritionix](http://www.nutritionix.com/) API. It is also available as a NuGet package.

[Nutritionix NuGet Package](https://nuget.org/packages/Nutritionix)  
[Nutritionix.Sample NuGet Package](https://nuget.org/packages/Nutritionix.Sample)

## Use
```csharp
using Nutritionix;

namespace MyApp
{
    public class FooBar
    {
        private const string myApiId = ""xxx"";
        private const string myApiKey = ""abc123"";

        public NutritionixSearchResult[] Search(string query)
        {
            var nutritionix = new NutritionixClient();
            nutritionix.Initialize(myApiId, myApiKey);

            var request = new NutritionixSearchRequest { Query = query };
            NutritionixSearchResponse response = nutritionix.SearchItems(request);

            return response.Results;
        }

        public NutritionixItem Retrieve(string id)
        {
            var nutritionix = new NutritionixClient();
            nutritionix.Initialize(myApiId, myApiKey);

            return nutritionix.RetrieveItem(id);
        }
    }
}
```
"
joshhedstrom/healthTracker,JavaScript,"# healthTracker

We designed this simple health application to help you track your personal health, fitness, and nutrition goals. Once you've created your account, you can easily log your weight, water consumption, nutrition goals and fitness activities. You're on your way to a healthier you!

## Usage

Create an account, and then login to get started!

### Prerequisites

To run this app on your local machine, make sure you have [MongoDB](https://www.mongodb.com/download-center#community) and [Node.js](https://nodejs.org/en/download/) installed.

### Installing

First, clone this repository to your local machine, and then install the dependencies using:

```
npm install
```

In a separate terminal start Mongo:

```
mongod
```


Then start the server:

```
npm start
```

And go to the [browser](http://localhost:3000) to view the application!


## Built With

* [React](https://reactjs.org/) - Frontend Framework
* [Node.js](https://nodejs.org/en/) - Javascript Runtime Environment
* [Express](https://expressjs.com/) - Web Framework
* [MongoDB](https://www.mongodb.com/) - Database
* [Passport](https://http://www.passportjs.org/) - Authentication
* [bcrypt-nodejs](https://www.npmjs.com/package/bcrypt-nodejs) - Password Hashing
* [Charts.js](https://www.chartjs.org/) - Charts
* [Material-UI](https://http://material-ui.com/) - Styling
* [Heroku](https://http://heroku.com/) - Hosting


## Authors

* **Lucas Jensen** - *Frontend and Design* - [Gitub](https://github.com/lucasjensen56)
* **Josh Hedstrom** - *Frontend and Authentication* - [Gitub](https://github.com/joshhedstrom)
* **Lucas Werner** - *Backend* - [Gitub](https://github.com/lwerner27)
* **Jason Robinson** - *Backend and Authentication* - [Gitub](https://github.com/jasonrobnson)
* **Ben Tommerdahl** - *Routes* - [Gitub](https://github.com/btommer2017)

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details
"
eliashussary/nutrition-facts,JavaScript,"# Nutrition Facts


### About
A NodeJs wrapper of the [USDA Food Composition Database API (NDB API)](https://ndb.nal.usda.gov/ndb/doc/index).


### Install Nutrition Facts
```Javascript
npm install nutrition-facts --save
```

### API Documentation and API Keys
[Please refer to the NDB Documentation website](https://ndb.nal.usda.gov/ndb/doc/index)

### Script Example
See [Demo Script](https://github.com/eliash91/nutrition-facts/blob/master/demo/demo.js)
```Javascript
import NutritionFacts from 'nutrition-facts'
   
const NF = new NutritionFacts(process.env.USDA_NDB_API_KEY);
  
NF.searchFoods({
    q: 'salted butter',
    ds: 'Standard Reference'
}).then(results => {
    
    // Returns search results
    let mySelectedItem = results.list.item[0]
    
    // Items are returned as a FoodItem instance
    // allowing you to call 'getNutrition' directly on the instance.
    mySelectedItem.getNutrition()
        .then(nutritionReport => {
            console.log(nutritionReport)
        }).catch(err => {
            console.log(err)
        })
        
}).catch(err => {
    console.log(err)
})

// Alternatively, if you know the NDBNO off-hand
// you can call 'getNutrition' from the NF instance.

NF.getNutrition('01001','b')
    .then(nutritionReport => {
        console.log(nutritionReport)
    }).catch(err => {
        console.log(err)
    })
```

####License
MIT License
Copyright (c) 2017 Elias Hussary

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
mingtaiha/n.ai,Python,"# Nutritional AI

This is Sakib and Ming's Nutritional AI App that uses Flask/SQLAlchemy. 

Graduate Course Report avaiable for viewing [here](https://goo.gl/K7K3ye).

## Overview

This app incorporates a custom-built machine learning algorithm to suggest what recipes a user should eat. The user may specify the number of suggested recipes, the protein and the specific cuisine. Many scripts (stored in /scripts) were used to scrape food/recipe data from online, clean it in various stages (see /outfiles), and structure it to mold to our database models. Routes were built to expose user services on API endpoints:

* Get suggestions for recipes, based on user history and preferences for foods
* Select a recipe for consumption, which are learned into your preferences
* Get a minimal set of stores to buy the ingredients for a particular recipe from

These services are designed to feed into each other, and are integrated into the Slackbots which communicate with each other to provide a seamless natural language interface for this service flow.

The design of the bots is loosely coupled, so that it is as easy as possible for anyone to add their own bots which do specific tasks and integrate them into the service flow. The goal is for a master bot to enable bot-service discovery for automatic bot-to-bot communication.

## Setup

After going into the directory, these are the steps to get the app up and running locally:

#### Step 1. Create a Virtual Environment and Install Dependencies

Create a new Virtual Environment for the project and source it.  If you don't have Virtual Environment yet, you can find installation [instructions here](https://virtualenv.readthedocs.org/en/latest/).

```
$ virtualenv venv
$ source venv/bin/activate
```

Next we need to install the project dependencies, which are listed in `pip.req`. If you have issues, try install MySQL python dev libs.

```
(venv) $ pip install -r pip.req
```

#### Step 2. Set up the Database

Enter the MySQL shell and create a flask app user and database running locally. If you don't have MySQL yet, you can find installation [instructions here](http://dev.mysql.com/doc/refman/5.7/en/installing.html).

```
mysql> create database nai;
mysql> create user 'nai'@'localhost' identified by 'nai';
mysql> grant all privileges on nai.* to 'nai'@'localhost';
```

Now apply the models defined in the flask app as such:

```
(venv) $ ./migrate.py db init
(venv) $ ./migrate.py db migrate
(venv) $ ./migrate.py db upgrade
```

For most table changes, edit nai/models.py, and run the above migrate and upgrade commands again.

If you happen to change a foreign key, or delete the migrations folder, run the above init, migrate and upgrade commands again.

#### Step 3. Run the Server

Now we're ready to start our server which is as simple as:

```
(venv) $ ./run.py
```

Optional: If we want to expose this to a public facing URL, we can use [ngrok](https://ngrok.com/):

```
(venv) $ ./ngrok http 5000
```

## Credit

Built by Sakib Jalal & Ming Tai Ha at Rutgers University, kept under the MIT License.

ALL STORES SELL ITEMS IN 100g PACKAGES, NO EXCEPTIONS
"
muriloalvesdev/nutrition,Java,"# nutrition

Este é um repositório criado com a intencão de auxiliar o pessoal inscrito em meu canal no Youtube.
"
vangelov/calories-in,TypeScript,"<p align=""center"">
   <a href=""https://calories-in.com"" target=""_blank"">
    <img src=""devices-preview.png"" alt=""Devices preview"" />
  </a>
</p>
<h1 align=""center"">Calories-In</h1>

<div align=""center"">

  <h3>A web-based meal plan editor for people who prepare all of their food.</h3>
  
<br />

Live version: https://calories-in.com

Demo video: https://tella.video/calories-in-4onp

</div>

## Background

The idea was born out of my experience of trying to find a better alternative to Google Sheets for calculating the macros of my meal plans. I wanted to be able to do this on desktop as it's more convenient but nothing really felt fast and simple enough.

A huge inspiration for me has been [excalidraw.com](http://excalidraw.com).

## Notable libraries

- [Chakra UI](https://chakra-ui.com/)
- [React Beautiful Dnd](https://github.com/atlassian/react-beautiful-dnd)
- [React-pdf](https://react-pdf.org/)
- [Comlink-loader](https://github.com/GoogleChromeLabs/comlink-loader)
- [React window](https://github.com/bvaughn/react-window)
- [Fuse.js](https://fusejs.io/)
- [Framer Motion](https://www.framer.com/motion/)
- [Feather icons](https://feathericons.com/)

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

### `yarn build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.
"
Viber/apiai-nutrition-sample,JavaScript,"# Developing a Viber chatbot with DialogFlow (API.AI) and Node.js

In this example we are building a simple Viber chatbot using [DialogFlow](https://dialogflow.com/) and Node.js. The final chatbot will generate nutrition responses for users based on the inputs they provide. The bot uses the data.gov [nutrition facts API](https://ndb.nal.usda.gov/ndb/) as its source.

## Setup instructions

### Prerequisites
 1. [DialogFlow account](https://dialogflow.com)
 2. [Viber bot account](https://developers.viber.com)
 3. [Data.gov API key](https://api.data.gov/signup/)

See the developer guide at [developers.viber.com](https://developers.viber.com/docs/general/get-started/#get-started-with-bots/) for more details.

# Deploy to:
[![Deploy to Heroku](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)

### Steps
 1. Create a new agent in [DialogFlow](https://dialogflow.com/).
 1. Click on the project gear icon (![gear icon](img/API_AI_Project_Gear.png)) to see the project settings. 
 1. Select ""Export and Import"". 
 
	![](img/API_AI_Import.png)
	
 1. Select **""Restore from zip""**. Follow the directions to restore.
 1. Select the `ViberSampleAgent.zip` file in this repository.
 1. [Optional] Set your [Data.gov API key](https://api.data.gov/signup/) in the environment variable:
	 1. Copy the sample environment variable `cp .env.sample .env`. 
	 1. Edit `.env` with your Data.gov API key.
 1. Deploy this app to your preferred hosting environment.
 1. Set the **""Fulfillment""** webhook URL to the deployment url. For instance on Heroku it will look like this `https://[App Name].herokuapp.com/hook`.
 1. Enable Viber in the DialogFlow **""Integrations""** panel.
 1. For both `meal.info` and  `nutrition.info` **intents** check both ""Use webhook"" and ""Use webhook for slot-filling"" in the ""Fulfillment"" section, and save the intent. 

	![](img/API_AI_Webhook.png)

## References and how to report bugs
If you find any issues with this sample, please open a bug [here](../../issues/new) on GitHub.

## Terms
Your use of this sample is subject to, and by using or downloading the sample files you agree to comply with, the [Viber API Terms of Service](https://developers.viber.com/docs/general/api-terms-of-service/).
"
sugarlabs/nutrition,Python,"What is this?
=============
A series of four nutrition games: *Name That Food*; *How Many Calories?*; *How Much to Eat?*; and *Is This a Balanced Meal?*

How to use?
===========

Nutrition is not part of the Sugar desktop, but can be added.  Please refer to;

* [How to Get Sugar on sugarlabs.org](https://sugarlabs.org/),
* [How to use Sugar](https://help.sugarlabs.org/),
* [How to use Nutrition](https://help.sugarlabs.org/nutrition.html)

How to upgrade?
===============

On Sugar desktop systems;
* use [My Settings](https://help.sugarlabs.org/my_settings.html), [Software Update](https://help.sugarlabs.org/my_settings.html#software-update), or;
* use Browse to open [activities.sugarlabs.org](https://activities.sugarlabs.org/), search for `Nutrition`, then download.
"
LuckybugQ/iNutrition,Python,"<p align=""center"">
    <img src=""img/qrcode.jpg"" width=""200px"">
</p>

<p align=""center""><span style=""font-size:50px"">iNutrition - 基于大数据挖掘的饮食推荐小程序</span>
</p>

- 基于 `Machine Learning` 的一款饮食推荐 `Mini Program`
- 如果觉得不错 给个 `Star` 支持一下 🤓

## 视频演示
- [Bilibili](https://www.bilibili.com/video/av83549884)
## 功能介绍
- 身体记录：记录身体数据，作为饮食推荐的依据，并给出健康评分。支持智能设备云同步
- 创建菜谱：自主搭配食材建立菜谱，动态对菜谱评分。使得用户在烹饪时拥有更大的自由度
- 食谱评分：过大数据挖掘和人工智能算法为个人饮食评分，数据库采用中国健康与营养调查横跨30年近2000万条数据。算法核心采用LightGBM，通过机器学习挖掘个人身体数据与饮食记录之间的关系。
- 食谱推荐：基于协同过滤推荐算法，综合地域、个人偏好、健康评分为个人推荐饮食。产品核心功能聚焦食谱评分与推荐，同时拥有丰富的用户交互体验。
- 饮食记录：一键添加菜谱到日记本，为每日食谱打卡。记录每一天的膳食，并根据膳食记录为用户评分。同时，用户的饮食数据也作为模型更新优化的依据。
- 线上商城：提供营养餐厅/轻食外卖/菜市场等接口，让用户节约用餐时间。线上健康商城售卖饮食健康相关的商品。小程序主要盈利点。
## 算法模型
![](./img/model.jpg)
## 声明
- 该项目为中国研究生智慧城市技术与创意设计大赛全国总决赛参赛作品。
- 本人负责前端开发、服务器开发、服务器部署和演示视频创作工作。 
- 该项目已于微信正式上线，但目前后端服务器处于关闭状态。"
MakuZo/nutrigo,Python,"<h1 align=""center"">nutrigo</h1>
<p align=""center"">Calculate nutrition for your favourite recipe!</p>
<p align=""center"">
  <img alt=""Coveralls github branch"" src=""https://img.shields.io/coveralls/github/MakuZo/nutrigo/1.0.0-dev"">
<img alt=""Travis (.com)"" src=""https://img.shields.io/travis/com/MakuZo/nutrigo/1.0.0-dev.svg"">
</p>
<p align=""center"">Try live <a href=""https://nutrigo.makuzo.usermd.net"">here</a></p>
<p align=""center"">
<img align=""center"" width=""70%"" height=""70%"" src=""https://i.imgur.com/7zhqcxq.jpg""></img>
</p>

## Overview

Nutrigo uses basic parsing techniques and USDA's Food Database to calculate nutrition for recipes.
Nevertheless it provides good results for well-structured and uncomplicated recipes (ingredient list).

## Installing

nutrigo requires [Python](https://www.python.org/) 3.6+ to run.

Install the dependencies using [Pipenv](https://github.com/pypa/pipenv), download corpora and run the server.

```sh
$ pipenv install --dev
$ python3 -m textblob.download_corpora
$ python3 manage.py runserver
```

## Usage

Open your web browser, type ```localhost:8000``` and enter recipe url.

## Running with Docker Compose

```sh
$ docker-compose build nutrigo
$ docker-compose up nutrigo
```

## Supported websites
--Note that parsing third-party websites is only possible by using API Endpoint /api/calculate-from-url

So far the only supported websites are:
Yummly.com, KwestiaSmaku.com

Adding support for a recipe website is very simple. See recipe.py for examples.

## Running the tests

```sh
$ pytest
```

## Contribution

Feel free to contribute to the project by creating pull requests!

## Built With

* [Django](https://www.djangoproject.com/) - Python Web framework
* [Django REST framework](https://www.django-rest-framework.org/) - Django REST framework

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details
"
yihanwu/Nutrient_Calculator,R,"# Nutrient Calculator

Purpose of app: calculate nutrition data for food and recipes, and visualizing % daily nutrient values.
Data Source: Canadian Nutrient File 2015 (as [R package](https://github.com/yihanwu/CAnutrients))

Nutrition calculators are frequently used to estimate nutritional content of food and recipes. 
Online free nutrition calculators based on Canadian nutrient data are rare beyond [Dietitians of Canada](https://www.eatracker.ca/recipe_analyzer.aspx),
 a basic nutrient calculator reporting values only. The alternatives for calculating nutrition are 
pricy proprietary nutrient calculator software and food analysis labs.

Nutrient Calculator is built as a shiny dashboard where users can easily search and add multiple ingredients from the CNF database, 
calculate overall nutrient data such as calories and sodium, and see nutrient amounts as percentage recommended daily values. 
Total calorie count, nutrients amounts which surpass 100% and 50% daily value are highlighted in valueboxes at the top. 
Macronutrients, minerals and vitamins are visualized on separated bar graphs. 

[Shinyapps](https://yihanw.shinyapps.io/Recipe_Nutrition/)

[RCloud Instance](https://rstudio.cloud/project/256494)

[Github Repository](https://github.com/yihanwu/Nutrient_Calculator)

## Search for a variety of ingredients and foods, see in-depth nutrient data. 

![Search and select ingredients](https://github.com/yihanwu/Nutrient_Calculator/blob/master/shiny-gif1.gif)

## Add and remove ingredients to calculate overall nutrition values.

![Add and remove an ingredient](https://github.com/yihanwu/Nutrient_Calculator/blob/master/shiny-gif3.gif)

## Use serving amounts in recipe 

![Change serving amount](https://github.com/yihanwu/Nutrient_Calculator/blob/master/shiny-gif2.gif)
"
openpantry/open_pantry,Elixir,"[![Build Status](https://travis-ci.org/openpantry/open_pantry.svg?branch=master)](https://travis-ci.org/openpantry/open_pantry)
# OpenPantry
## A management system for pantry programs to help people eat healthy meals with dignity

  * NOTES:
    * We are moving towards a SaaS like model, with one subdomain per facility, and facilities are managed by super-admins or by facility specific admins
    * Masbia has several locations, but we're trying to validate the scope and use-case for other organizations, please get in touch if you work with one 
    * Users are created/managed per facility on a user_selections page, and globally in a /manage/users page.
    * Food recipients are managed as users and can be logged in via magic login-links to be clicked on or emailed to them
    * We've been using ZenHub chrome extension for project management but this has caused some confusion, so we may move away from it...
    * Some mockups and UX flow for where we're trying to head are posted [here](https://invis.io/QPBK7WPB3).  
    * We initially attempted to make this multi lingual from the start but have largely deferred this work until things are more stable.
      * We have partial translations started for 9 languages
      * We have thousands of foods from USDA nutritional database ready for dynamic translation
      * We are using POEditor.com for static site translation, contribute to translations here: https://poeditor.com/join/project/wBfgEEUCht
      * We probably need to move to a database driven translation system for foods, given the quantity we are trying to manage, but we still need translation help.
      * Our curent best source for food images, facts and translations may be https://us.openfoodfacts.org/ but we started with USDA database and much work is needed to leverage/combine and rework the data model to pull photos and translations from openfoodfacts

  * Getting started with development:
    * Mac homebrew:
      * ensure homebrew is installed (instructions at https://brew.sh/ or paste `/usr/bin/ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""` into terminal)
      * brew bundle
        * This will install elixir, erlang, yarn, and download Postgres.app which has postgis preinstalled
        * It will cd into assets directory and install npm packages via yarn
        * You can use another postgres, but you may have to manually install postgis
      * run from open_pantry dir `mix do deps.get, ecto.create, ecto.migrate, run priv/repo/seeds.exs`
      * Start Phoenix endpoint with `mix phx.server`, or `iex -S mix phx.server` (this gives a server and REPL/console in one window)
    * Docker/docker-compose (fake, factory generated data but no dependencies)
      * Install docker (on most systems this also installs docker-compose)
      * Clone the OpenPantry repo and cd into directory
      * Run `docker-compose run setup`
      * Run `docker-compose up web`
    * Local/native development on Mac/Linux manually, without automation from `brew bundle` via Brewfile above (detailed instructions only for Mac at present, similar for linux)
      * Install Postgres (Mac)
          * Download and install the Postgresapp.com from [their site](https://postgresapp.com/documentation/install.html)
              * Execute the following command in Terminal to configure your $PATH, and then close & reopen the window:
              `sudo mkdir -p /etc/paths.d &&
                echo /Applications/Postgres.app/Contents/Versions/latest/bin | sudo tee /etc/paths.d/postgresapp`
          * Alternatively install Postgres with Homebrew
              * Execute (`brew install postgres`) in Terminal
      * if using Postgres.app you must initialize a data directory after installing, and follow instructions for adding CLI tools to your Terminal path...  `which psql` but succeed when done
        * (instructions defaulting to Mac below... for simplicity, linux users extrapolate, Windows, I have no idea, PR's with instructions for either/both welcome)
      * Install Elixir/Erlang (`brew install elixir`)
      * Install NPM and yarn (`brew install node && npm install -g yarn`)
      * Clone this repository locally, `git clone git@github.com:openpantry/open_pantry.git`
      * cd into the directory `cd open_pantry`
      * Download database from s3 via `wget https://s3.amazonaws.com/open-pantry-dev/openpantry_dev.dump`
        * Note we had problems with this dump being improperly generated recently.  I beleive the problem is fixed, but if you downloaded previously or have problems please contact someone for support, it's probably not your fault!
        * Dumps and restores are based on the method described here: https://devcenter.heroku.com/articles/heroku-postgres-import-export
      * Install Elixir package dependencies with `mix deps.get`
      * Create the database in Postgres with `mix ecto.create`, assuming default password etc in config works.
      * Migrate the database to add migrations since dump was created, via `mix ecto.migrate`
      * Import the dump to the database via `pg_restore --verbose --clean --no-acl --no-owner -h localhost -U postgres -d open_pantry_dev openpantry.dump`
      * Install Node.js dependencies with `yarn install`
      * Start Phoenix endpoint with `mix phx.server`, or `iex -S mix phx.server` (this gives a server and REPL/console in one window)
    * ALTERNATIVELY (and with much less detail), if you DON'T WANT TO USE the dump file referenced above/want to generate a dump from scratch, the above dump was generated with a complete USDA food/nutrient database approximately as below, along with non-dump steps above:
      * Create and migrate your database with `mix ecto.create && mix ecto.migrate`
      * Git clone https://github.com/openpantry/nutes locally and run make, modifying if necessary to point at your Postgres DB and the directory path to your local copy in imports.sql (requires golang to build data_cleanup tool)
      * Add seed data with `mix run priv/repo/seeds.exs` but modify to leave out foods/stocks as these are fakes generated by factories, you have real food from USDA

Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.

## Learn more

  * Masbia Pantry: http://www.masbia.org/pantry
  * Volunteer to help develop this app, or other work with Masbia: http://www.masbia.org/volunteer_signup
"
czarandy/usda,Python,"The USDA has a database of nutritional information for many foods available at:

  http://www.ars.usda.gov/Services/docs.htm?docid=8964

By default it's contained in flat files. This project includes scripts to generate appropriate schema and import them into a SQLite database. I've also hand generated a subset of the nutrients that includes commonly-familiar nutrients vs. the very extensive list provided by the USDA.

You will need to first download the files and unzip them into the data directory, e.g. for release SR24

  cd data
  wget http://www.ars.usda.gov/SP2UserFiles/Place/12354500/Data/SR24/dnload/sr24.zip
  unzip sr24.zip

Then just run create_db.sh with the name of the file you want to make:

  ./create_db.sh usda.sql3

For convenience I've included the data files for SR24 in the data directory. I've also included the resulting db for convenience if you just want to use it directly. On my system it takes about 10 seconds to populate the db.

I've included two simple python scripts that let you search for food items and print out nutritional facts in json.
"
schollz/extract_recipe,Python,"The internet is full of recipes. A recipe is really only the *directions* and the *ingredients*, but for any given recipe website you always get a lot more information thatn you want (comments, links, advertisements). For instance the page for [Alton Brown's waffle](http://www.foodnetwork.com/recipes/alton-brown/basic-waffle-recipe.html) recipe looks like this:

![Website example](https://rpiai.files.wordpress.com/2015/02/webcontentgrabber-01.png)

How can you just pull out the directions and ingredients, in a tag-independent way that can be used across any website?

# Recipe extractor

## How it works

First it grabs the Markdown-formatted text of the html page using [html2text](https://github.com/aaronsw/html2text).  It evalutes the number of 'cooking' related words in each line and pulls out the peak.

![Website example](https://i.imgur.com/enu0SNA.jpg?1)

It does the same for extracting the ingredient list. Then it scans the directions and the ingredient list to determine what the *actual* baking time would be and gives that estimate. Finally, it parses the measurements and foods in the ingredient list and cross-references the USDA SR27 food databse to get accurate estimations of the nutrition content.

# To Do

- ~~Extract recipes.~~
- ~~Extract ingredients.~~
- ~~Cross references ingredients and measurements to USDA database.~~
- ~~Make AJAX interface.~~
- ~~Better identifying common foods in USDA database~~
- ~~Simpler conversion between food dimensions/weights~~
- ~~Add in pricing~~ 
- Save data as JSON
- Clean up code by splitting into files
- Better error handling
- Add nice CSS into web interface.
- Add in photos of foods

## Installation

### Requirements

```
sudo apt-get install python-nltk
sudo pip install pint
```

Then goto python console
```python
>>> import nltk
>>> nltk.download('brown')
>>> nltk.download('maxent_treebank_pos_tagger')
>>> nltk.download('wordnet')
```

Clone the [SR27 database downloader](https://github.com/tscholl2/fudgen) and run the makefile to generate the database. Copy the database into the same folder. Then go into the database and make sqlite3 fts4 virtual table

```sql
drop table data;
drop table nutrition_date;
drop table nutrition_def;

create virtual table data using fts4(ndb_no,shrt_desc,long_desc,com_desc);
insert into data(ndb_no,shrt_desc,long_desc,com_desc) select ndb_no,shrt_desc,long_desc,com_desc from food_des;

create virtual table nutrition_data using fts4(ndb_no,nutr_no,nutr_val);
insert into nutrition_data(ndb_no,nutr_no,nutr_val) select ndb_no,nutr_no,nutr_val from nut_data;

create virtual table nutrition_def using fts4(nutr_no,units,tagname);
insert into nutrition_def(nutr_no,units,tagname) select nutr_no,units,tagname from nutr_def;
```




## Example Output

Visit the current incantation at http://ips.colab.duke.edu:8081/extractor.html and run which shows the extraction of the following recipe: [http://www.foodnetwork.com/recipes/alton-brown/baked-macaroni-and-cheese-recipe.html](http://www.foodnetwork.com/recipes/alton-brown/baked-macaroni-and-cheese-recipe.html).


--------------------

# Ingredients

  * 1/2 pound elbow macaroni
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/20099.jpg' width=50>2 1/8 cup elbow shaped Macaroni, dry, enriched (226.8 grams) - $3.76

  * 3 tablespoons butter
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/01001.jpg' width=50>3.0 tbsp Butter, salted (42.6 grams) - $1.08

  * 3 tablespoons flour
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/20581.jpg' width=50>1/8 cup Wheat flour, white, all-purpose, enriched, unbleached (23.4 grams) - $0.12

  * 1 tablespoon powdered mustard
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/02046.jpg' width=50>3 1/8 tsp or 1 packet Mustard, prepared, yellow (15.6 grams) - $0.41

  * 3 cups milk
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/01077.jpg' width=50>3/4 quart Milk, whole, 3.25% milkfat, with added vitamin D (732.0 grams) - $0.58

  * 1/2 cup yellow onion, finely diced
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/11282.jpg' width=50>1.0 cup, sliced Onions, raw (118.3 grams) - $3.93

  * 1 bay leaf
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/02004.png' width=50>1.0 tsp, crumbled Spices, bay leaf (0.6 grams) - $0.09

  * 1/2 teaspoon paprika
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/02028.jpg' width=50>1/3 tsp Spices, paprika (1.1 grams) - $0.07

  * 1 large egg
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/01123.jpg' width=50>1.0 small Egg, whole, raw, fresh (38.0 grams) - $0.19

  * 12 ounces sharp cheddar, shredded
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/01270.jpg' width=50>12 1/8 slice 1 oz. slice CHEESE,CHEDDAR,SHARP,SLICED (340.2 grams) - $10.3

  * 1 teaspoon kosher salt
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/02047.jpg' width=50>1.0 tsp Salt, table (6.0 grams) - $0.19

  * Fresh black pepper
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/02030.jpg' width=50>1.0 dash Spices, pepper, black (0.1 grams) - $0.0

  * Topping:
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/21226.png' width=50>1.0 serving 5 servings per 22.85 oz package PIZZA,MEAT & VEG TOPPING,REG CRUST,FRZ,CKD (129.0 grams) - $0.0

  * 3 tablespoons butter
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/01001.jpg' width=50>3.0 tbsp Butter, salted (42.6 grams) - $1.08

  * 1 cup panko bread crumbs
 - <img src='http://ips.colab.duke.edu/extract_recipe/get_google_images/images/18069.jpg' width=50>5 1/4 cup, crumbs Bread, white, commercially prepared (includes soft bread crumbs) (236.6 grams) - $2.83


# Directions
In a large pot of boiling, salted water cook the pasta to al dente.
While the pasta is cooking, in a separate pot, melt the butter. Whisk in the flour and mustard and keep it moving for about five minutes. Make sure it's free of lumps. Stir in the milk, onion, bay leaf, and paprika. Simmer for ten minutes and remove the bay leaf.
Temper in the egg. Stir in 3/4 of the cheese. Season with salt and pepper. Fold the macaroni into the mix and pour into a 2-quart casserole dish. Top with remaining cheese.
Melt the butter in a saute pan and toss the bread crumbs to coat. Top the macaroni with the bread crumbs. Bake for 30 minutes. Remove from oven and rest for five minutes before serving.
Remember to save leftovers for fried Macaroni and Cheese.
Recipe courtesy Alton Brown

+1 minute for tossing.
# Calculated time: 51 minute
# Calculated cost: $24.64


# Serving size is about 13.0


# Nutrition data (ALL)


## Main

 - Energy: 8542.51051625 Calories
 - Water: 539.29 grams
 - Carbohydrate, by difference: 441.39 grams
 - Total lipid (fat): 257.0 grams
 - Ash: 134.75 grams
 - Protein: 122.14 grams
 - Fiber, total dietary: 103.0 grams
 - Sugars, total: 35.41 grams


## Sugars

 - Starch: 120.02 grams
 - Fructose: 12.32 grams
 - Glucose (dextrose): 9.88 grams
 - Lactose: 5.23 grams
 - Maltose: 4.5 grams
 - Sucrose: 2.51 grams
 - Galactose: 0.56 grams


## Other



## Metals

 - Sodium, Na: 43.145 grams
 - Potassium, K: 5.503 grams
 - Calcium, Ca: 2.876 grams
 - Phosphorus, P: 2.088 grams
 - Magnesium, Mg: 0.704 grams
 - Iron, Fe: 0.09089 grams
 - Manganese, Mn: 0.025675 grams
 - Zinc, Zn: 0.02027 grams
 - Copper, Cu: 0.003438 grams
 - Selenium, Se: 0.0002409 grams
 - Fluoride, F: 0.0001124 grams


## Vitamins

 - Vitamin A, IU: 63133.0 IU
 - Vitamin D: 294.0 grams
 - Choline, total: 0.5077 grams
 - Betaine: 0.2873 grams
 - Vitamin C, total ascorbic acid: 0.0585 grams
 - Vitamin E (alpha-tocopherol): 0.03875 grams
 - Niacin: 0.034416 grams
 - Carotene, beta: 0.027021 grams
 - Lutein + zeaxanthin: 0.020214 grams
 - Tocopherol, gamma: 0.01494 grams
 - Pantothenic acid: 0.00863 grams
 - Cryptoxanthin, beta: 0.006247 grams
 - Tocotrienol, alpha: 0.00524 grams
 - Vitamin B-6: 0.005071 grams
 - Vitamin A, RAE: 0.004706 grams
 - Riboflavin: 0.004426 grams
 - Thiamin: 0.003218 grams
 - Retinol: 0.001861 grams
 - Lycopene: 0.001835 grams
 - Folate, DFE: 0.001267 grams
 - Folate, total: 0.000922 grams
 - Carotene, alpha: 0.000608 grams
 - Tocopherol, beta: 0.00056 grams
 - Folic acid: 0.000493 grams
 - Folate, food: 0.000429 grams
 - Tocopherol, delta: 0.00039 grams
 - Vitamin K (phylloquinone): 0.0002716 grams
 - Tocotrienol, gamma: 0.0001 grams
 - Tocotrienol, beta: 1e-05 grams
 - Menaquinone-4: 9.6e-06 grams
 - Vitamin D3 (cholecalciferol): 7.3e-06 grams
 - Vitamin D (D2 + D3): 7.3e-06 grams
 - Vitamin B-12: 3.18e-06 grams
 - Dihydrophylloquinone: 1e-07 grams


## Amino acids

 - Glutamic acid: 21.142 grams
 - Proline: 10.524 grams
 - Aspartic acid: 9.503 grams
 - Leucine: 7.934 grams
 - Valine: 5.319 grams
 - Lysine: 5.11 grams
 - Serine: 5.024 grams
 - Phenylalanine: 4.614 grams
 - Arginine: 4.501 grams
 - Isoleucine: 4.189 grams
 - Alanine: 3.949 grams
 - Tyrosine: 3.623 grams
 - Threonine: 3.522 grams
 - Glycine: 3.3 grams
 - Histidine: 2.23 grams
 - Methionine: 1.796 grams
 - Cystine: 1.369 grams
 - Tryptophan: 1.015 grams


## Steroids

 - Cholesterol: 0.927 grams
 - Phytosterols: 0.282 grams
 - Beta-sitosterol: 0.008 grams


## Fatty Acids

 - Fatty acids, total saturated: 139.376 grams
 - Fatty acids, total monounsaturated: 67.956 grams
 - 18:1 undifferentiated: 62.581 grams
 - 16:0: 62.062 grams
 - 18:1 c: 47.753 grams
 - 18:0: 27.299 grams
 - Fatty acids, total polyunsaturated: 26.627 grams
 - 18:2 undifferentiated: 22.581 grams
 - 14:0: 19.176 grams
 - Fatty acids, total trans: 7.809 grams
 - 4:0: 7.403 grams
 - 12:0: 7.045 grams
 - 18:2 n-6 c,c: 6.996 grams
 - Fatty acids, total trans-monoenoic: 6.962 grams
 - 18:1 t: 6.855 grams
 - 10:0: 6.164 grams
 - 6:0: 4.703 grams
 - 18:3 undifferentiated: 3.34 grams
 - 16:1 undifferentiated: 3.2 grams
 - 8:0: 2.989 grams
 - 16:1 c: 2.534 grams
 - 18:3 n-3 c,c,c (ALA): 1.951 grams
 - 17:0: 1.343 grams
 - 22:1 undifferentiated: 1.059 grams
 - 22:1 c: 1.057 grams
 - Fatty acids, total trans-polyenoic: 0.847 grams
 - 18:2 CLAs: 0.721 grams
 - 20:1: 0.666 grams
 - 18:2 i: 0.592 grams
 - 20:0: 0.403 grams
 - 15:0: 0.335 grams
 - 14:1: 0.328 grams
 - 20:4 undifferentiated: 0.269 grams
 - 18:2 t not further defined: 0.252 grams
 - 20:3 undifferentiated: 0.23 grams
 - 16:1 t: 0.107 grams
 - 22:0: 0.089 grams
 - 17:1: 0.073 grams
 - 22:6 n-3 (DHA): 0.059 grams
 - 20:3 n-6: 0.058 grams
 - 24:1 c: 0.051 grams
 - 18:4: 0.038 grams
 - 20:2 n-6 c,c: 0.037 grams
 - 22:4: 0.026 grams
 - 22:5 n-3 (DPA): 0.024 grams
 - 24:0: 0.022 grams
 - 20:3 n-3: 0.021 grams
 - 18:3 n-6 c,c,c: 0.013 grams
 - 20:5 n-3 (EPA): 0.011 grams
 - 18:3i: 0.003 grams
"
andrewRosenblum/AJRNutritionController,Objective-C,"AJRNutritionController
======================

Created By Andrew Rosenblum, 2013

Twitter: [@AJRosenblum](https://twitter.com/AJRosenblum)

If you end up using this code in an app, please let me know.  I'd love to see how it's being used :)

About
------------------------

An Objective-C class to present an animated view with nutritional information. The view mimics the nutrition label seen on commercial goods.

This code is iOS 5 & 6 compatible, storybaord and ARC Compatible.

![My image](http://s3.amazonaws.com/cocoacontrols_production/ios_screens/1625/full.png?1360446212)


Using AJRNutritionController
------------------
To use `AJRNutritionController` first copy the following files into your project:
- `AJRNutritionViewController.h`
- `AJRNutritionViewController.m`
- `AJRNutritionViewController.xib`
- `AJRNutritionLabelCalculation.h`
- `AJRNutritionLabelCalculation.m`
- `AJRNutritionLabelView.h`
- `AJRNutritionLabelView.m`
- `AJRBackgroundDimmer.h`
- `AJRBackgroundDimmer.m`
- `CloseButton.png`
- `CloseButton@2x.png`

In addition, make sure your project includes the `QuartzCore` framework.

Then in the appropiate method, add the following to initalize the view:

    AJRNutritionViewController *controller = [[AJRNutritionViewController alloc] init];

Set the nutrition values as follows:

    controller.servingSize = @""12 fl oz. (1 Can)"";
    controller.calories = 130;
    controller.fat = 5.5;
    controller.carbs = 35;
    controller.sugar = 12;
    controller.protein = 3.0;
    
Finally present the view:

    [controller presentInParentViewController:self];

Check out the included demo for an example


License
--------------
This code is published under BSD Simplified:


Copyright (c) 2013, Andrew Rosenblum
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"
syntagmatic/Nutrition-Intake,JavaScript,"Nutrition Intake
Copyright 2011 Kai Chang, Mary Becica, Vaibhav Bhawsar 

All files, except those from the USDA Nutrition Database, are released under GNU General Public License V3.0
"
danielnaab/django-usda-nutrition,Python,"# django-usda-nutrition

This is a Django application which includes models corresponding to the USDA
Nutrition Database, as well as import scripts to pull the current version of
the dataset (SR28) into the Django-managed database.

NOTE: [django-usda](https://github.com/notanumber/django-usda) also exists,
but imports an older (SR22) dataset.

## Dependencies

This packaged has only been tested with Python 3.5+ and Django 1.9+, but should
work with other versions. Feel free to submit pull requests for compatibility.

## Install

Install from `pip`:

    pip install django-usda-nutrition

## Usage

Add `usda_nutrition` to your `INSTALLED_APPS` and then:

    ./manage.py import_usda

## Notes

- The USDA database includes comprehensive information on how all nutritional
data is calculated and references to the corresponding source datasets. Because
that data is out of scope to use-cases that simply want to include the raw
nutritional content in an application, those tables are not imported with this
package. Nonetheless, the source CSV files, stubbed out models, and references
to them in the import management command and checked in. The corresponding code
is commented out and could be a starting point to anyone wanted to use that
data in a Django app.

- A single bad datapoint from `FOOTNOTE.txt` was manually removed.
"
Ahmux/Nutrition_Point,Java,"# Nutrition Point Application
###### Android App to manage your Diet Plans,calculate calories and Healthy recipes 


![51370](https://user-images.githubusercontent.com/8544010/45599716-c39dfa00-b9f0-11e8-8e77-f7306ecbd3ff.png)Android Studio IDE

Nutrition point app source code is built in Android Studio IDE.

##


##### Splash Screen
Show a splash screen to user when user start your Android App.

##

![api-image 1](https://user-images.githubusercontent.com/8544010/45600389-4e382680-b9fc-11e8-9b4d-11f7aa67a80b.png)API

API’s is used for fetching data from backend server. we used it to calculate calories for all food types and fetch hundreds of food recipes compatible with all Diet types and health cases.

##

##### Navigation Drawer Menu
In Navigation Drawer menu the user will see many options to get most out of the App and moving between activities and Fragments.

##

![push-notification-558791](https://user-images.githubusercontent.com/8544010/45599983-ae779a00-b9f5-11e8-91a3-4fb9d44b4967.png)Advance Push Notification

Nutrition Point App can send notifications for different Reminders. It calculates the amount of water your Body needs and the periods between notifications. also the times of your diet meals during the day. 

##

![snackbar-toast-confirmation-exit](https://user-images.githubusercontent.com/8544010/45599999-fa2a4380-b9f5-11e8-84e5-aa96ed7c3701.png)Exit Confirmation Toast

When user try to exit the App, the confirmation  toast will be displayed on screen asking user to click once again back button to exit.

##

##### Scroll View

Nutrition Point content Vertically Scrolling. make the content vertically scrollable.


##

#### Arabic Language Support
Nutrition Point supports to help Arabic users

##

##### ScreenShots

![screenshot1](https://user-images.githubusercontent.com/8544010/45600398-74f65d00-b9fc-11e8-9ee6-c8374463714e.png)![screenshot2](https://user-images.githubusercontent.com/8544010/45600400-7b84d480-b9fc-11e8-8965-effccb1a7694.png)![screenshot3](https://user-images.githubusercontent.com/8544010/45600401-7e7fc500-b9fc-11e8-80cb-fb337d4c3bcd.png)![screenshot4](https://user-images.githubusercontent.com/8544010/45600403-80e21f00-b9fc-11e8-8b49-df85f874e726.png)
![screenshot6](https://user-images.githubusercontent.com/8544010/45600510-1b8f2d80-b9fe-11e8-96bb-23f8708d6ef9.png)![screenshot5](https://user-images.githubusercontent.com/8544010/45600405-8b041d80-b9fc-11e8-9dfe-c483e46e0924.png)






"
nutritionfactsorg/daily-dozen-android,Java,"Daily Dozen Android App
========================

<p align=""center""><img src=""http://nutritionfactsorg.s3.amazonaws.com/wp-content/uploads/2016/03/21232747/github.jpg"" style=""width: 600px""></p>

About
-----------

In the years of research required to create the more than a thousand evidence-based videos on [NutritionFacts.org][nutritionfacts.org], Michael Greger, MD, FACLM, has arrived at a list of what he considers the most important foods to include in a healthy daily diet. Yes, greens are good for you, but how much should we try to eat each day?

Dr. Greger’s Daily Dozen details the healthiest foods and how many servings of each we should try to check off every day. He explains his rationale in his book [How Not to Die][book]. All his proceeds from his books, DVDs, and speaking engagements is all donated to charity.


Daily Dozen on Google Play
------------------

<a href=""https://play.google.com/store/apps/details?id=org.nutritionfacts.dailydozen"" alt=""Get it on Google Play"" target=""_blank""><img src=""https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png"" height=""80""></a>

Daily Dozen on [F-Droid](https://f-droid.org/)
------------------

<a href=""https://f-droid.org/packages/org.nutritionfacts.dailydozen/"" alt=""Get it on F-Droid"" target=""_blank""><img src=""https://f-droid.org/badge/get-it-on.png"" height=""80""></a>

Contribute
------------

We would love for you to contribute to our source code and to help make the Daily Dozen for Android even better!

Check out our [Contribution Guidelines][contribute] for details on how to get started and our suggested best practices.

Donate
------

To help support [NutritionFacts.org][nutritionfacts.org], click [here][donate]

License
-------

The Daily Dozen Android App is licensed under the GPLv3

Contributors
------------

* [John Slavick][slavick] (Maintainer)
* [Christi Richards][christirichards]
* [Armfoot][Armfoot]
* [Lauren Hacker][laurenhacker]
* [MovGP0][MovGP0]
* [alibitek][alibitek]
* [angelagvarela][angelagvarela]
* [caugner][caugner]
* [jordansieve][jordansieve]
* [josephkelemen97][josephkelemen97]
* [lucab85][lucab85]
* [marc-medley][marc-medley]
* [myang310][myang310]
* [notmypassword][notmypassword]
* [qyearsley][qyearsley]
* [tabasco-flame][tabasco-flame]

[nutritionfacts.org]: http://nutritionfacts.org ""NutritionFacts.org - The Latest in Nutrition Research""
[contribute]: https://github.com/nutritionfactsorg/daily-dozen-android/blob/master/CONTRIBUTING.md ""Contribute to the Daily Dozen Android App""
[donate]: https://nutritionfacts.org/donate ""Donate to NutritionFacts.org""
[book]: http://nutritionfacts.org/book ""How Not to Die""
[slavick]: http://github.com/slavick ""John Slavick on GitHub""
[christirichards]: http://github.com/christirichards ""Christi Richards on GitHub""
[laurenhacker]: http://github.com/lahacker ""Lauren Hacker on GitHub""
[Armfoot]: https://github.com/Armfoot ""Armfoot on GitHub""
[MovGP0]: https://github.com/MovGP0 ""MovGP0 on GitHub""
[notmypassword]: https://github.com/notmypassword ""notmypassword on GitHub""
[alibitek]: https://github.com/alibitek ""alibitek on GitHub""
[caugner]: https://github.com/caugner ""caugner on GitHub""
[myang310]: https://github.com/myang310 ""myang310 on GitHub""
[lucab85]: https://github.com/lucab85 ""lucab85 on GitHub""
[qyearsley]: https://github.com/qyearsley ""qyearsley on GitHub""
[jordansieve]: https://github.com/jordansieve ""jordansieve on GitHub""
[angelagvarela]: https://github.com/angelagvarela ""angelagvarela on GitHub""
[josephkelemen97]: https://github.com/josephkelemen97 ""josephkelemen97 on GitHub""
[marc-medley]: https://github.com/marc-medley ""marc-medley on GitHub""
[tabasco-flame]: https://github.com/tabasco-flame ""tabasco-flame on GitHub"""
dmsl/foodscanner,C,"# FoodScanner

A free and open Food Analyzer (nutrition facts, allergens and chemicals)

## Preface 
Food Scanner is a first-of-a-kind food analyzer offering valuable 
information such as nutrition facts, allergens and 
chemicals, about foods  using ordinary smartphones.
	 
URL: http://foodscanner.cs.ucy.ac.cy
Contact: foodscanner@cs.ucy.ac.cy

It is recommended to watch the video tutorials of the FoodScanner system on http://foodscanner.cs.ucy.ac.cy/, before proceeding with these instructions.

We hope that you find our FoodScanner useful for your research and innovation activities.  We would like to have your feedback, comments and remarks and of course any experiences and test results from your own experimental setups. Currently, we can offer only limited support and assistance on the code, due to lack of resources, but we will try to get back to you as soon as possible. Questions and feedback may be sent to foodscanner@cs.ucy.ac.cy

Enjoy FoodScanner!

The FoodScanner Team 
	 
Copyright (c) 2016, Data Management Systems Lab (DMSL), Department of Computer Science
University of Cyprus.

All rights reserved.

## MIT Open Source Licence

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the “Software”), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:
	 
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
	 
THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
	
## Components 

Short description of the contents included in this release.

### Android
Current Leader: Dimosthenis Stefanidis. 
Try: https://play.google.com/store/apps/details?id=com.ds.FoodScanner

Project Leader: Demetris Zeinalipour



"
openfoodfacts/smooth-app,Dart,"<img height='175' src=""https://static.openfoodfacts.org/images/svg/openfoodfacts-logo-en.svg"" align=""left"" hspace=""1"" vspace=""1"">

# Open Food Facts - Codename: ""Smooth App""
[![SmoothApp Post-Submit Tests](https://github.com/openfoodfacts/smooth-app/actions/workflows/postsubmit.yml/badge.svg)](https://github.com/openfoodfacts/smooth-app/actions/workflows/postsubmit.yml)

A new Flutter application by Open Food Facts. You can install it on [Android](https://play.google.com/store/apps/details?id=org.openfoodfacts.app) or [iPhone/iPad](https://apps.apple.com/us/app/smooth-app/id1526747703). Note that a internal development build ([Android](https://play.google.com/apps/internaltest/4700279390303733107) or [iPhone/iPad](https://testflight.apple.com/join/dIhF6Gi4) )if you'd like to use the results of your PRs quicker.

Smoothie. We pioneered the collaborative scanning app in 2012. With this experimental app, we’re reinventing it from the ground up, and this time, it’s personal.

## You get: 
- a scan that truly matches who you are (Green: the product matches your criteria, Red: there is a problem, Gray: Help us answer you by photographing the products)
- a product page that's knowledgeable, building on the vast amount of food facts we collect collaboratively, and other sources of knowledge, to help you make better food decisions
## You can: 
- scan and compare in 15 seconds the 3 brands of tomato sauces left on the shelf, on your terms.
- get a tailored comparison of any food category
- set your preferences without ruining your privacy

## Criteria you can pick: 
- Environment: Eco-Score
- Health: Additives & Ultra processed foods, Salt, Allergens, Nutri-Score

## Presentation

This new mobile application aims to showcase Open Food Facts's power to a broad range of users through a smooth user experience and sleek user interface.

<img height='175' src=""https://fr.blog.openfoodfacts.org/images/smoothie2.jpg"" align=""left"" hspace=""1"" vspace=""1"">

Smooth-app is developed in parallel to the [openfoodfacts-dart](https://github.com/openfoodfacts/openfoodfacts-dart) plugin, which provides a high level interface with the Open Food Facts API.
Every new interaction with the API should be implemented in the plugin in order to provide these new features to other developers.

## Contributing - What can I work on ?

Are you a developer? A graphic designer? Full of innovative ideas to help users improve their mode of consumption? Then join us!
We are always looking for new contributors, if you're willing to help please let us know, we'll be pleased to introduce you to the project.

- On GitHub, [you can start here to get some inspiration](https://github.com/openfoodfacts/smooth-app/issues/525) 
- You can join the Open Food Facts's Slack here : [Get an invite](https://slack.openfoodfacts.org) - [Open our Slack](https://openfoodfacts.slack.com).

## Wiki & Doc 
- [Project Smoothie - Open Food Facts wiki](https://wiki.openfoodfacts.org/Project_Smoothie)
- [Documentation (from code), on GitHub Pages](https://openfoodfacts.github.io/smooth-app/)
- [Smoothie GitHub wiki](https://github.com/openfoodfacts/smooth-app/wiki)

## V1 Roadmap
- [ ] Revamped and knowledgeable product page (Jasmeet)
- [ ] Minimal editing/addition value proposition, including by deep linking to the classic Android/iOS apps. (up for grabs)
- [ ] [Automation of marketing texts](https://github.com/openfoodfacts/fastlane-descriptions-smoothie) (mostly done)

## V2 - Later Roadmap
### Screenshot automation (High priority)
- [ ] [Add multilingual screenshot generation using Fastlane (Scan screen, settings screen, personalized ranking screen, home screen)](https://github.com/openfoodfacts/smooth-app/issues/217)

### Navigation
- [ ] [Fix navigation for the iOS build (iOS does not have a back button, and gestures are not intuitive for most people)](https://github.com/openfoodfacts/smooth-app/issues/17)

### Debt removal
- [ ] [Remove the hack on the category explorer](https://github.com/openfoodfacts/smooth-app/issues/19)

### Personalized results
- [ ] [Allow to filter results by country and by store](https://github.com/openfoodfacts/smooth-app/issues/99)

### Gamification
- [ ] User management + Small point system for contributions

### Product page

### Scanning
- [ ] [Allow the user to find alternatives products on a scan even if (s)he has scanned only 1 product](https://github.com/openfoodfacts/smooth-app/issues/23)
- [ ] [Add offline scanning to ensure results in all conditions](https://github.com/openfoodfacts/smooth-app/issues/18)

## Building

In order to build the application, make sure you are in the packages/smooth_app directory and run these commands :
 - flutter pub get
 - flutter run
 
### Android & iOS
- Nothing to report

### Dev Mode
- How to activate it: We now have a secret in-app dev mode which allows you to debug things faster, or access not-ready-for-primetime features. You can access it by: going to the Food preferences screen, Your Profile, User Management, Forgotten Password and then tapping ten times on the ""Change password"" button of the Reset Password screen (without typing any email). 
- Feel free to file an issue if you'd like new switches in this dev mode. 
- You can also add new flags for your features.
  - example: https://github.com/openfoodfacts/smooth-app/pull/834

## Internationalization

- Translations of the interface are managed using the new [Flutter internationalization](https://github.com/openfoodfacts/openfoodfacts-hungergames/blob/master/src/i18n/common.json) introduced in Flutter 1.22.
- New strings need to be added to lib/l10n/app_en.arb and the [corresponding translations can be added through CrowdIn](https://translate.openfoodfacts.org/translate/openfoodfacts/1322). Do not edit the other app_*.arb files as they will be overwritten by CrowdIn.

![Crowdin Action](https://github.com/openfoodfacts/smooth-app/workflows/Crowdin%20Action/badge.svg)

## Thank you
Smooth_app is made possible thanks to a grant by the Mozilla Foundation, after pitching them the idea at FOSDEM. a HUGE thank you :-) 
"
MLH/clarifai-food-nutrition-demo,JavaScript,"# Clarifai Nutritional Breakdown Demo

Learn how to use Clarifai’s food model and the Wolfram Alpha API to recognize
what you’re eating & get a nutritional breakdown. Follow our [Clarifai tutorial here](https://stories.mlh.io/watch-what-you-eat-with-clarifai-71185734bc61).

![](/docs/demo.gif)

## Setup

1. Go to the [Clarifai](http://clarifai.com) website and create a new app. Make
   sure you Default Model to Food.
2. Visit the [Wolfram Alpha Developer Portal](https://developer.wolframalpha.com/portal/signup.html)
   and create a new AppID.
3. Fill in your Clarifai API Key and Wolfram Alpha AppID in `predict.js`.
4. Open `index.html` in your favorite web browser.

## License

```
Copyright 2018 Major League Hacking, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the ""Software""), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```

"
npradaschnor/Pima-Indians-Diabetes-Dataset,Jupyter Notebook,"# Pima Indians Diabetes Database
## Predicting the onset of diabetes

I've explored, analysed the Pima Indians Diabetes Dataset, and applied Machine Learning Techniques. I've analysed and discussed the results using the knowledge acquired as a experienced Registered Dietitian.

The Pima Indian Diabetes Dataset, originally from the National Institute of Diabetes and Digestive and Kidney Diseases, contains information of 768 women from a population near Phoenix, Arizona, USA. The outcome tested was Diabetes, 258 tested positive and 500 tested negative. Therefore, there is one target (dependent) variable and the 8 attributes (TYNECKI, 2018): pregnancies, OGTT(Oral Glucose Tolerance Test), blood pressure, skin thickness, insulin, BMI(Body Mass Index), age, pedigree diabetes function.
The Pima population has been under study by the National Institute of Diabetes and Digestive and Kidney Diseases at intervals of 2 years since 1965. As epidemiological evidence indicates that T2DM results from interaction of genetic and environmental factors, the Pima Indians Diabetes Dataset includes information about attributes that could and should be related to the onset of diabetes and its future complications.

:pushpin: Python v 3.7

:pushpin: Libraries used:
* pandas
* numpy
* seaborn
* matplotlib.pyplot
* sklearn
* statsmodels

:pushpin: [Jupyter notebook](https://jupyter.org/) was used. :bell: In case of any problem to visualise the project, please check [here](shorturl.at/hHLT4)
"
georgetown-analytics/Nutrition,Jupyter Notebook,"# InstaMarketing
Cohort 15 Capstone Project for the Certificate of Data Science at Georgetown University School of Continuing Studies.

Our team utilized a dataset from a large online grocery delivery service consisting of information on customer order history to predict when a customer, or user as it is defined in our data, will be likely to order again. With this information in hand the business will in turn be able to focus a calculated amount of their advertising budget on users they suspect will be likely to have larger gaps between their orders placed.

The dataset obtained contains a relational set of five csv files each with varying amount of information on a user’s orders completed over time. In total, more than 200,000 users with over 3 million orders completed are represented in the data.



the number of days since prior order for each user fell into the below distribution which became our target groups:

-A group of orders occurring within 0-7 days

-A group of orders occurring between 8-29 days

-A group of orders occurring beyond 30+ days
"
BetterMe2/BetterMe-v1,JavaScript,"# BetterMe-v1
a nutrition application
"
deviantech/food_info,Ruby,"# FoodInfo

FoodInfo is a ruby gem that retrieves food nutrition information from various online data sources.



## Installation

FoodInfo is available as a gem, so installation is as simple as:

    gem install food_info



## Supported Data Sources

There's currently only one adapter implemented, which pulls data from [FatSecret's REST API](http://platform.fatsecret.com/api/Default.aspx?screen=rapih).  The code's modular and adding additional data sources should be fairly straightforward, but since DailyBurn discontinued their API access I don't know of any other solid sources (if you do, though, please let me know and/or add an adapter!).



## Usage

### Housekeeping

To use the FatSecret API (currently your only option), you'll first need to [sign up for a free developer account](http://platform.fatsecret.com/api/Default.aspx?screen=r) and retrieve the ""REST API Consumer Key"" and ""REST API Consumer Secret"" from your ""My Account"" tab.

Once that's done, the first step is to tell FoodInfo which adapter you want to use and what authorization to send.

    FoodInfo.establish_connection(:fat_secret, :key => 'YOUR-KEY', :secret => 'YOUR-KEY')


### Caching

To cache results, FoodInfo supports passing in an instance of a memcache-API-compatible (i.e. responds to <code>get</code> and <code>set</code>) caching object.  I recommend using the [Dalli gem](https://github.com/mperham/dalli).

    require 'dalli'
    client = Dalli::Client.new('localhost:11211')
    FoodInfo.establish_connection(:fat_secret, :key => 'YOUR-KEY', :secret => 'YOUR-KEY', :cache => client)

With that in place repeated <code>search</code> or <code>details</code> requests will pull from the cache, and not the API endpoint.

### Searching

Now we can search for foods.

    cheese = FoodInfo.search('cheese')
    cheese.total_results    # => 2469
    cheese.per_page         # => 20
    cheese.page             # => 1
    cheese.results          # => ... big array ...
    cheese.results.first    # => 
    # {
    #     ""description"" => ""Per 100g - Calories: 403kcal | Fat: 33.14g | Carbs: 1.28g | Protein: 24.90g"",
    #              ""id"" => ""33689"",
    #            ""kind"" => ""Generic"",
    #            ""name"" => ""Cheddar Cheese"",
    #             ""url"" => ""http://www.fatsecret.com/calories-nutrition/usda/cheddar-cheese""
    # }

(As an aside, I get that pretty, nicely-lined-up console formatting from the remarkably awesome [AwesomePrint Gem](https://github.com/michaeldv/awesome_print)).

#### Pagination

Search supports pagination via the <tt>page</tt> and <tt>per_page</tt> (max 50) parameters:

    FoodInfo.search('cheese', :page => 2, :per_page => 50)

#### Access to search results

You can access the results of the search explicitly:

    FoodInfo.search('cheese').results # => ... lots of results ...

But the SearchResults class includes Enumerable, so you can also just call enumerable methods on it directly:

    FoodInfo.search('cheese').map(&:name) # => array of names of matching foods
    

### Nutritional Details

Once you have a specific food item in mind from the search results, you can retrieve a whole lot of additional information.

    cheddar = FoodInfo.search('cheese').first
    info = FoodInfo.details( cheddar.id ) # => ... a whole lotta data ...

General metadata about the cheese includes id, name, kind, and url, which are identical to what you'd get from the <tt>search</tt> method.  It also has one or more servings, however, and this is where we finally get our nutrition info.

    serving = info.servings.first # =>
    # {
    #                     ""calcium"" => 95,
    #                    ""calories"" => 532.0,
    #                ""carbohydrate"" => 1.69,
    #                 ""cholesterol"" => 139.0,
    #                         ""fat"" => 43.74,
    #                       ""fiber"" => 0.0,
    #                          ""id"" => ""29131"",
    #                        ""iron"" => 5,
    #     ""measurement_description"" => ""cup, diced"",
    #       ""metric_serving_amount"" => 132.0,
    #         ""metric_serving_unit"" => ""g"",
    #         ""monounsaturated_fat"" => 12.396,
    #             ""number_of_units"" => 1.0,
    #         ""polyunsaturated_fat"" => 1.243,
    #                   ""potassium"" => 129.0,
    #                     ""protein"" => 32.87,
    #               ""saturated_fat"" => 27.841,
    #         ""serving_description"" => ""1 cup diced"",
    #                      ""sodium"" => 820.0,
    #                       ""sugar"" => 0.69,
    #                   ""trans_fat"" => 0.0,
    #                         ""url"" => ""http://www.fatsecret.com/calories-nutrition/usda/cheddar-cheese?portionid=29131&portionamount=1.000"",
    #                   ""vitamin_a"" => 26,
    #                   ""vitamin_c"" => 0
    # }
    
For full details on what each of those fields contains, check [the FatSecret documentation](http://platform.fatsecret.com/api/Default.aspx?screen=rapiref&method=food.get#methodResponse).


## Legal Note

The FatSecret TOS requires you not to store, well, [pretty much anything](http://platform.fatsecret.com/api/Default.aspx?screen=rapisd) aside from food or serving IDs for more than 24 hours.  This is annoying, but I figured I'd give you a heads up.


## Note on Patches/Pull Requests

Contributions are welcome, particularly adding adapters for additional data sources.

As always, the process is to fork this project on Github, make your changes (preferably in a topic branch, and without changing the gem version), send a pull request, and then receive much appreciation!

## License

Copyright &copy; 2011 [Deviantech, Inc.](http://www.deviantech.com) and released under the MIT license.

"
viniciusmeneses/food-search,JavaScript,"# food-search

> Discover the nutritional information of 700,000+ foods!

**food-search** is a *open-source* project which uses [Edaman API](https://developer.edamam.com/) to browse and retrieve the nutritional information and brand of any food or meal searched. The API contains a [Food Database](https://developer.edamam.com/food-database-api) with over 700,000 foods, restaurant items, fast foods and package foods.

[**Demo available here!**](http://food-search.surge.sh)

<p align=""center"">
  <img src=""preview.jpg"">
</p>

## Using

First of all, you need to clone or download this repository.

```
git clone https://github.com/viniciusmeneses/food-search
```

Go to the **food-search** folder and install the dependencies

```
npm install
```

Run one of the following commands to start use **food-search**:

```
// Build and starts front-end and back-end servers
npm run dev

// Builds the application only
npm run build
```

<p align=""center"">
  <a href=""https://developer.edamam.com/""><img src=""https://imgur.com/xUqNOOo.png""></a>
</p>
"
nathanleiby/growthchart,JavaScript,"growthchart
===========

A visual tool used by doctors to monitor a child's nutrition and health.

Demo:

[Demo](http://nathanleiby.github.com/growthchart/)

Screenshot:

![Example](https://raw.githubusercontent.com/gpratt5/growthchart/master/screenshot/hcfab.png)

Ideas:

- Work for weight vs age, height vs age, height vs weight, etc etc
- Work against various standards (CDC, WHO, national goverments)

Todos:

- Clarify which chart is which. (and if dataset is for boys and/or girls)
- Smoothly change between charts ([How to dynamically add data to a chart](http://jsfiddle.net/mbeasley183/DbXhL/))
- Default is to select the last datum; highlight it and show tooltip
- Improved tickmarks
- Labels on the lines, or a legend (%tile, malnourished/severely/normal); color for different lines
- Improve tooltip style... [1](http://rveciana.github.com/geoexamples/d3js/d3js_electoral_map/tooltipCode.html#), [2](http://rveciana.github.com/geoexamples/?page=d3js/d3js_electoral_map/simpleTooltipCode.html), [3](http://bl.ocks.org/biovisualize/2973775)

Additions:

- Added metas and values for Head Circumference vs Age 0-5yrs for girls/boys based on WHO standards.
- Added metas and values for Length vs Age 0-5yrs for girls/boys based on WHO Standards.
- Added checks to change Y axis label based on new chart types
- Added checks to change tooltip text based on new chart types

Other Growth charts:

- [OpenMRS Growth Chart module](https://wiki.openmrs.org/display/docs/Growth+Chart+Module)
- [CDC](http://www.cdc.gov/growthcharts/), [CDC Pdf](http://www.cdc.gov/growthcharts/2000growthchart-us.pdf)
    - page 138, table 9 (weight vs age, birth to 36 months)
    - page 143, table 14 (weight vs age, 2 to 20 years)
- [Online MedCalc](http://www.medcalc.com/growth/)
- [UK Growth Charts](http://www.rcpch.ac.uk/child-health/research-projects/uk-who-growth-charts/uk-who-growth-charts)

Thank you:

- to @ewheeler and the [PyGrowup](https://github.com/ewheeler/pygrowup) project for sharing the method to pre-process the WHO/CDC measurement data into json format.
"
romkey/wp-nutrition-label,PHP,"=== Plugin Name ===
Contributors: romkey
Tags: food, nutrition, nutrition label
<<<<<<< HEAD
Tested up to: 3.5.2
Requires at least: 3.0
Stable tag: 0.3.1
=======
Tested up to: 3.1.1
Requires at least: 3.0
Stable tag: 0.3
>>>>>>> e2a8ad62d0a8e377511069be9aec51a2c7e480f0

== Description ==

This plugin provides a Wordpress shortcode which generate an FDA-style nutrition label.

See http://en.wikipedia.org/wiki/Nutrition_facts_label for more information on nutrition labels.

Reference daily intake values come from http://en.wikipedia.org/wiki/Reference_Daily_Intake

You can visit the official page for wp-nutrition-label at http://romkey.com/code/wp-nutrition-label

== Installation ==

1. Upload /wp-nutrition-label to the /wp-content/plugins directory

2. Activate the plugin through the Plugins menu in WordPress

3. In any posts or pages where you wish to insert a nutrition label, use the shortcode [nutr-label]. The shortcode accepts the following attributes:
   servingsize, servings, calories, totalfat, satfat, transfat, cholesterol, sodium, carbohydrates, fiber, sugars, protein, id, class, width

== Frequently Asked Questions ==

= What units do the attributes use? =

* Grams: totalfat, satfat, transfat, carbohydrates, fiber, sugars, protein
* Milligrams (mg): cholesterol and sodium
* Unitless: servings and calories (units are implicit for calories)
* You should include the unit in the serving size attribute (ie: ""4 oz"")

= What about **Calories from Fat**? =

The **Calories from Fat** number is computed from the totalfat attribute.

= What about vitamins? =

Working on it.

= How do I style the nutrition label? =

You can control the width with the ""width"" attribute. The width attribute uses **ems** as its unit. It is styled to scale but it's likely that the ""Nutrition Label"" text won't scale well as the default font is Helvetica, which isn't fixed-width.

You can specify the DOM ID of the enclosing **div** by setting the **id** attribute in the shortcode. You can also specify a CSS class by setting the **class** attribute. Then you can provide your own styling to change the label as you see fit.

= How about calculating the nutrition values based on a recipe? =

This is **really** hard to do. To do it at all reliably requires human intervention to match ingredients names against their entries in a nutrition database. That's a level of difficulty I don't wan to try to tackle with this plugin. You may find the USDA's free online nutrition database useful for looking up nutrition information:

http://www.nal.usda.gov/fnic/foodcomp/search/

= How do I contribute translations to other languages? =

You're welcome to email the .po and .mo files to me at wordpress [at] romkey [dot] com

= Where can I find the development version of the plugin? =

Development work on this plugin is hosted on github at https://github.com/romkey/wp-nutrition-label

== Screenshots ==

1. Example using the shortcode

2. Example output

== Upgrade Notice ==

= 0.3 =
* Calculate calories from protein, carbohydrates and fat if no calories specified.

= 0.2 =
* Upgrade only needed to get info into plugin directory pages.

== Changelog ==

= 0.3 =
* Added code to help support internationalization, improved comments, calculate default total calories if not specified.

= 0.2 =
* Changed filename from README to readme.txt

= 0.1 =
* Initial release
"
m5n/nutriana,Perl,"### Database Systems Supported
* MySQL
* Oracle

### Nutrient Databases Included
* Health Canada, 2015. Canadian Nutrient File
  www.healthcanada.gc.ca/cnf
* US Department of Agriculture, Agricultural Research Service, Nutrient Data Laboratory.
  USDA National Nutrient Database for Standard Reference, Release 28. Version Current:
  September 2015. Internet: https://www.ars.usda.gov/Services/docs.htm?docid=8964
  (Full and Abbreviated versions.)

### Where Are the SQL Files?
The SQL files are located in the ""dist"" directory of each nutrient database,
e.g. ""usda_nndsr/dist"".

### Project Description
Nutriana takes the food composition data released by various official sources
in the world and converts it into formats specific to the database systems
mentioned above. (A good list of nutrient databases in the world is available here:
http://www.langual.org/langual_linkcategory.asp?CategoryID=4&Category=Food+Composition)

### How it Works
A human being is needed to extract the description and constraints of a given
nutrient database into a file that can be programmatically processed.  The JSON
format was chosen for readability and portability reasons.
Nutriana prefers not to modify the nutrient database's official data files, but
to ensure successful database creation and data import, some changes may be
necessary.
All modifications are fully disclosed in the */MODIFICATIONS files, and
typically involve correcting field size or key constraint definition, using date
format instead of string, removing trailing whitespace and/or replacing ""no value""
indicators with ""null"".

### If Your Preferred Database is Not Supported
It should be easy to add support for other databases by copying one of the Perl
module files (*.pm) and editing it as needed to output the format for your
database system.  (If you find it's not, let me know by creating an issue.)
Run the build.sh file to (re)generate the database vendor files.  The script
will automatically detect the new .pm file and attempt to output SQL for it.
To alter the database name or user credentials, edit the ""generate_sql.pl"" file.

### Author
* Maarten van Egmond

Special thanks to these users for contributing:
* [alastair-duncan](https://github.com/alastair-duncan)

### License
* Nutriana is released under the MIT license; see the LICENSE file.
* Full licensing and usage information for the incuded nutrient databases is
  available in the */LICENSE files.
"
openfoodfacts/openfoodfacts-androidapp,Kotlin,"<img height='175' src=""https://static.openfoodfacts.org/images/svg/openfoodfacts-logo-en.svg"" align=""left"" hspace=""1"" vspace=""1"">

# Open Food Facts - Android app
(Note: this codebase also benefits Open Beauty Facts, Open Pet Food Facts and Open Products Facts)
Open Food Facts is collaborative food products database made by everyone, for everyone. Open Food Facts contributors gathers information and data on food products from around the world, using mobile apps.

[![Project Status](https://opensource.box.com/badges/active.svg)](https://opensource.box.com/badges)
[![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=openfoodfacts_openfoodfacts-androidapp&metric=alert_status)](https://sonarcloud.io/dashboard/index/openfoodfacts_openfoodfacts-androidapp)
[![Crowdin](https://d322cqt584bo4o.cloudfront.net/openfoodfacts/localized.svg)](https://crowdin.com/project/openfoodfacts)
![Android Master & PR](https://github.com/openfoodfacts/openfoodfacts-androidapp/workflows/Android%20Master%20&%20PR/badge.svg)
![Build](https://github.com/openfoodfacts/openfoodfacts-androidapp/workflows/Android%20Integration/badge.svg)
[![Open Source Helpers](https://www.codetriage.com/openfoodfacts/openfoodfacts-androidapp/badges/users.svg)](https://www.codetriage.com/openfoodfacts/openfoodfacts-androidapp)
<br>

[Join the Play Store Beta](https://play.google.com/store/apps/details?id=org.openfoodfacts.scanner) (rather stable) - [Join the Play Store internal build](https://play.google.com/apps/internaltest/4699092342921529278) (bleeding edge). You might need communicating your email for whitelisting to teolemon on slack (or pierre at openfoodfacts org)

[Open Beauty Facts](https://play.google.com/store/apps/details?id=org.openbeautyfacts.scanner), [Open Pet Food Facts](https://play.google.com/store/apps/details?id=org.openpetfoodfacts.scanner) and [Open Products Facts](https://play.google.com/store/apps/details?id=org.openproductsfacts.scanner) are also built from this codebase

## What is Open Food Facts?

### A food products database

Open Food Facts is a database of food products with ingredients, allergens, nutrition facts… which allow us to compute scores like Nutri-Score, NOVA groups and Eco-Score.

### Made by everyone

Open Food Facts is a non-profit association of volunteers.
25000+ contributors like you have added 1,7M+ products from 150 countries using our Android or iPhone apps to scan barcodes and upload pictures of products and their labels.

### For everyone

Data about food is of public interest and has to be open. The complete database is published as open data and can be reused by anyone.

## User flows
[Visual documentation of the App on Figma](https://www.figma.com/file/BQ7CSyFvl7D9ljcXT0ay0u/Navigation-within-the-app)

## Documentation of the source code
The documentation is generated automatically from the source code and your improvements to code documentation are published automatically.
[Code documentation on GitHub pages](https://openfoodfacts.github.io/openfoodfacts-androidapp/)

## Helping with our next release
Here are issues and feature requests you can work on:
- [ ] [3.6.6 milestone](https://github.com/openfoodfacts/openfoodfacts-androidapp/milestone/36)

### What can I work on ?

Open Food Facts on Android has 0,5M users and 1,6M products. *Each contribution you make will have a large impact on food transparency worldwide.* Finding the right issue or feature will help you have even more more impact. Feel free to ask for feedback on the #android channel before you start work, and to document what you intend to code.

- [Here are issues and feature requests you can work on](https://github.com/openfoodfacts/openfoodfacts-androidapp/issues/4169)
- [P1 issues](https://github.com/openfoodfacts/openfoodfacts-androidapp/labels/p1)
- [Small issues (Hacktoberfest)](https://github.com/openfoodfacts/openfoodfacts-androidapp/labels/hacktoberfest)


If you don't have time to contribute code, you're very welcome to
* Scan new products
* [**Make a donation** to help pay for the hosting and general costs](https://donate.openfoodfacts.org) 

## Help translate Open Food Facts in your language

You can help translate Open Food Facts and the app at (no technical knowledge required, takes a minute to signup): <br>
https://translate.openfoodfacts.org

## Installation

| Choose the right flavor | Install steps|
| ------------- | ------------- |
|<img src=""https://user-images.githubusercontent.com/1689815/39445509-8064b2f8-4cbb-11e8-908d-86bcd61cb4f5.png"" height=""300""> | * Download the latest [Android Studio](https://developer.android.com/studio) stable build. <br>* If you are running the app for the first time, Android Studio will ask you to install the Gradle dependencies. <br>* If you are a new contributor to open-source, we recommend you read our [Setup Guidelines](https://github.com/openfoodfacts/openfoodfacts-androidapp/blob/master/SETUP_GUIDELINES.md) <br>* In Android Studio, make sure to select `OFF` as the default flavor for Open Food Facts (`OBF` is Open Beauty Facts, `OPF` - Open Products Facts, `OPFF` - Open Pet Food Facts) <br>* You should be able to install Open Food Facts on your phone using an USB cable, or run it in an emulator. <br>* The package name on the Play Store is org.openfoodfacts.scanner. For historic reasons, it's openfoodfacts.github.scrachx.openfood in the code and on F-Droid.|

## Running a Fastlane lane
The project uses Fastlane to automate release and screenshots generation.
* First time you checkout, run `bundle install` at the root of the project
* Then launch lanes using `bundle exec fastlane release` (for example the release lane)
* We're moving Fastlane related things to https://github.com/openfoodfacts/fastlane-descriptions

### Who do I talk to?

* Any member of the Android team or contact@openfoodfacts.org
* Join our #android and #android-alerts discussion room on Slack (Get an invite: <https://slack.openfoodfacts.org/>)

### Will you join us ?

If you're new to open-source, we recommend to checkout our [Contributing Guidelines](https://github.com/openfoodfacts/openfoodfacts-androidapp/blob/master/CONTRIBUTING.md). Feel free to fork the project and send a pull request.

## Libraries we use
We use the following libraries, and we're not closed to changes where relevant :-)
If you spot any libraries we added or we don't use anymore, feel free to update this list using a Pull Request.

- [Dagger 2](https://github.com/google/dagger) - A fast dependency injector for Android and Java
- [Retrofit](https://square.github.io/retrofit/) - Retrofit turns your REST API into a Java interface
- [OkHttp](https://github.com/square/okhttp) - An HTTP+SPDY client for Android and Java applications
- [Mockito](https://github.com/mockito/mockito) - Most popular Mocking framework for unit tests written in Java
- [Apache](https://github.com/apache/commons-io) - The Apache Commons IO library contains utility classes, stream implementations, file filters, file comparators, endian transformation classes, and much more.
- [Kotlin Coroutines](https://developer.android.com/kotlin/coroutines) - A coroutine is a concurrency design pattern that you can use on Android to simplify code that executes asynchronously.  
- [Hilt](https://developer.android.com/training/dependency-injection/hilt-android) - Hilt is a dependency injection library for Android that reduces the boilerplate of doing manual dependency injection in your project. 
- [Dagger](https://developer.android.com/training/dependency-injection/dagger-android) - Manual dependency injection or service locators in an Android app can be problematic depending on the size of your project. You can limit your project's complexity as it scales up by using Dagger to manage dependencies. Dagger automatically generates code that mimics the code you would otherwise have hand-written.
- [Jackson](https://github.com/FasterXML/jackson) - Core part of Jackson that defines Streaming API as well as basic shared abstractions
- [journeyapps/zxing-android-embedded](https://github.com/journeyapps/zxing-android-embedded) - Barcode scanner library for Android, based on the ZXing decoder
- GreenDao
- [mikepenz/MaterialDrawer](https://github.com/mikepenz/MaterialDrawer) - The flexible, easy to use, all in one drawer library for your Android project.

Big thanks to their contributors!

## Contributors

The project was initially started by [Scot Scriven](https://github.com/itchix), other contributors include:
- [Aurélien Leboulanger](https://github.com/herau)
- [Pierre Slamich](https://github.com/teolemon)
- [Friedger Müffke](https://github.com/friedger)
- [Qian Jin](https://github.com/jinqian)
- [Fred Deniger](https://github.com/deniger)
- [VaiTon](https://github.com/VaiTon)
- [Full list of the Open Food Facts Android developers](https://github.com/openfoodfacts/openfoodfacts-androidapp/graphs/contributors)

## Copyright and License

    Copyright 2016-2022 Open Food Facts

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and 
    limitations under the License.
"
hertzg/metekcity,TypeScript,"[![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fhertzg%2Fetekcity%2Fbadge%3Fref%3Dmaster&style=flat)](https://actions-badge.atrox.dev/hertzg/etekcity/goto?ref=master)
[![codecov](https://codecov.io/gh/hertzg/node-net-keepalive/branch/master/graph/badge.svg)](https://codecov.io/gh/hertzg/node-net-keepalive)

# ETEKCITY Smart Nutrition Scale

:warning: Very much work in progress :warning:

This is a potential project that tries to reverse engineer the BLE protocol that
ETEKCITY Smart Nutrition Scale (ESN00) uses.

[ETEKCITY Smart Nutrition Scale (ESN00)](https://www.etekcity.com/product/100334) ([DE](https://www.amazon.de/gp/product/B07RJV9QPF) | [US](https://www.amazon.com/Etekcity-ESN00-Nutrition-Counting-Bluetooth/dp/B07FCZSC41))

![](https://image.etekcity.com/thumb/201810/28/7f248c75a139b66b9d0e6b081c25a0a1.jpg)

## BLE Protocol

This section describes the protocol (what was researched so far)

### Finding device

Device address is random so the way to find it is based on the advertisement name (tested) or manufacturer data (not tested)
Device reports weight and status on service `1801` and characteristic `2c12`.

## Protocol

All packets have this structure

![](https://kroki.io/packetdiag/svg/eNorSEzOTi1JyUxMV6jmUlAw0DW2UvBITUxJLbJWQAL6-grO-XnFJYl5JVYKBhVpqalpyQaJRkAdJlYKIZUFqQrRRfkliSWptkbmBrHWEB0BYLPB0kCFplYKPql56SUZaEqBCl0SSxKBkkA5oDotCDc6JzXP1jTWGtkJIAmwCmcPbwwLIY7MSE3OLi7N5arlAgALMjve)

### Data Packets

Data packet depends on the packet type values:

| Name    | Value | Length  | When                                  | What                                                                                                                                                                                                          |
| ------- | :---: | :-----: | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Error   | `E0`  | 1 byte  | Error mode is triggered or reset      | `0x00` (error reset) / `0x01` (error triggered)                                                                                                                                                               |
| Tare    | `D3`  | 1 byte  | Tare is updated (set) or reset        | `0x00` (no tare) / `0x01` (tare mode)                                                                                                                                                                         |
| Item    | `E4`  | 1 byte  | Item is put or removed from the scale | `0x00` (has item) / `0x01` (no item)                                                                                                                                                                          |
| Weight  | `D0`  | 5 bytes | Weight is measuring or stabilized     | ![](https://kroki.io/packetdiag/svg/eNorSEzOTi1JyUxMV6jmUlDIy09Jjc9IzUzPKFGwVTAzsOYCCmopBGem5ylAQHROap6toY5CUX5JYkmqrZG5Qaw1SFxfH6wKrDwcYgBcuRFECTIAKoeoAmsIzcssKSZoPkgVxDkliUk5qQSdk1pSkpOawlXLxcUFAOOQPE8=) |
| Unknown | `D2`  | 1 byte  | Characteristic listening started      | Unknown (maybe nutrition value states)                                                                                                                                                                        |

#### Data Packet: Weight Measurement (0xE0)

Device will be constantly spamming packet with this data

![](https://kroki.io/packetdiag/svg/eNorSEzOTi1JyUxMV6jmUlDIy09Jjc9IzUzPKFGwVTAzsOYCCmopBGem5ylAQHROap6toY5CUX5JYkmqrZG5Qaw1SFxfH6wKrDwcYgBcuRFECTIAKoeoAmsIzcssKSZoPkgVxDkliUk5qQSdk1pSkpOawlXLxcUFAOOQPE8=)

| Field  | Description                                                                                 | Note                                                            |
| ------ | ------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |
| Sign   | `0x00` (positive) / `0x01` (negative)                                                       |                                                                 |
| Weight | 16 bit int (big-endian)                                                                     | In grams value is multiplied by 10 (not sure about other units) |
| Unit   | `0x00`(g),`0x02`(ml),`0x04`(ml milk),`0x03`(floz),`0x05`(floz milk),`0x06`(oz),`0x01`(lboz) | Does not seem like bitmask just enum                            |
| Stable | `0x00` (measuring) / `0x01` (settled)                                                       | `0x00` means weight is not yet settled                          |

## Hardware

Nothing too interesting...

![](https://github.com/hertzg/etekcity/raw/master/research/hardware/esn00/photo_2020-09-04_01-17-35.jpg)

![](https://github.com/hertzg/etekcity/raw/master/research/hardware/esn00/photo_2020-09-04_01-17-34.jpg)
"
noahtren/noms,Python,"# Nutrient Object Management System (noms)

Note: I'm not able to maintain this package right now, so there is a chance that the current API integration is broken/will break given the new FoodData Central API from the USDA.

noms is a fun and simple Python package that allows you to obtain and work with highly detailed nutrition data for nearly 8,000 entries from the USDA Standard Reference Food Composition Database. No mainstream nutrition tracker apps reflect the level of detail that the USDA has compiled. With noms you can track:
1. Proximates including macronutrients (protein, carbs, and fat), calories, fiber and water content
2. 11 minerals
3. 13 vitamins
4. Specific lipids including EPA and DHA (the most important omega-3s found in fish oil)

This amounts to 41 nutrients being tracked, but many more are available from the database such as amino acids and other lipids. These can be viewed in all_nutrient_ids.txt, and support for other nutrients will be added in the future as requested. You can add support for these yourself by editing noms/objects/nutrient_ids.json accordingly with entries from all_nutrient_ids.txt.

Note: The Standard Reference Database is used explicitly without the addition of the USDA's Branded Foods database, as only the former allows for highly detailed reports which track 168 different nutrients -- much more information than you would find on an item's nutrition facts! This is especially valuable for nutritionists or people interested in their own health to explore the nutritional content of whole foods. 

## Installation
The noms package is listed on PyPI and can be installed with pip. Simply do:
```
pip install noms
```
If you already have it installed and want to upgrade to the most recent version, do:
```
pip install noms --upgrade
```

## Getting Started
1. Get a data.gov API key for free from here: https://api.data.gov/signup/
2. Initialize a client object with the key you received.
```python
import noms
client = noms.Client(""api key"")
```
## Searching the Database
```python
search_results = client.search_query(""Raw Broccoli"")
print(search_results)
```
```
================================================================================================================
Search results for 'Raw Broccoli' on USDA Standard Reference Database
================================================================================================================
Name                                                                                 Group                    ID
Broccoli, raw                                                            Vegetables and Vegetable Pro..    11090
Broccoli raab, raw                                                       Vegetables and Vegetable Pro..    11096
Broccoli, leaves, raw                                                    Vegetables and Vegetable Pro..    11739
Broccoli, stalks, raw                                                    Vegetables and Vegetable Pro..    11741
Broccoli, chinese, raw                                                   Vegetables and Vegetable Pro..    11994
Broccoli, flower clusters, raw                                           Vegetables and Vegetable Pro..    11740
================================================================================================================
```
## Requesting Food Data From the Database
In this example, the ids correlate with Raw Broccoli (11090) and a Cola Beverage (14400). The numbers afterwards represent the mass of that food, in grams. More mass for a given food equals a greater amount of each nutrient in equal proportion (twice the broccoli has twice the vitamins).
```python
food_list = client.get_foods({'11090':100, '14400':100})
```
## Initializing a Meal With a List of Foods
The foods() method returned a list of two Food objects when given the arguments above, but if you would like to generate a report, analyze or sort a group of foods, they should be merged into a Meal object. This is done by simply constructing a Meal instance with a list of Food objects.
```python
m = noms.Meal(food_list)
```

## Generating and Displaying a Report 
The report is a dictionary which shows if RDAs (or Adequate Intakes) are being met or exceeded. These values are assigned by default in noms.objects.nutrient_dict, but support will be added to modify these settings in the future.
```python
r = noms.report(m)
for i in r:
    print(i)
```
```
{'name': 'Protein', 'rda': 125.0, 'limit': None, 'value': 2.89, 'state': 'deficient', 'unit': 'g'}
{'name': 'Fat', 'rda': 55.56, 'limit': None, 'value': 0.39, 'state': 'deficient', 'unit': 'g'}
{'name': 'Carbs', 'rda': 250.0, 'limit': None, 'value': 16.2, 'state': 'deficient', 'unit': 'g'}
{'name': 'Calories', 'rda': 2000, 'limit': None, 'value': 71.0, 'state': 'deficient', 'unit': 'kcal'}
{'name': 'Water', 'rda': 2000, 'limit': None, 'value': 179.61, 'state': 'deficient', 'unit': 'g'}
{'name': 'Caffeine', 'rda': 0, 'limit': 400, 'value': 8.0, 'state': 'satisfactory', 'unit': 'mg'}
{'name': 'Theobromine', 'rda': 0, 'limit': 300, 'value': 0.0, 'state': 'satisfactory', 'unit': 'mg'}
{'name': 'Sugar', 'rda': 0, 'limit': 50.0, 'value': 10.67, 'state': 'satisfactory', 'unit': 'g'}
{'name': 'Fiber', 'rda': 28.0, 'limit': None, 'value': 2.6, 'state': 'deficient', 'unit': 'g'}
{'name': 'Calcium', 'rda': 1000, 'limit': 2500, 'value': 49.0, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Iron', 'rda': 8, 'limit': 45, 'value': 0.84, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Magnesium', 'rda': 300, 'limit': 700, 'value': 21.0, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Phosphorus', 'rda': 700, 'limit': 4000, 'value': 76.0, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Potassium', 'rda': 1400, 'limit': 6000, 'value': 318.0, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Sodium', 'rda': 1000, 'limit': 2300, 'value': 37.0, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Zinc', 'rda': 12, 'limit': 100, 'value': 0.43, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Copper', 'rda': 0.9, 'limit': 10, 'value': 0.05, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Fluoride', 'rda': 400, 'limit': 10000, 'value': 57.0, 'state': 'deficient', 'unit': 'µg'}
{'name': 'Manganese', 'rda': 1.8, 'limit': None, 'value': 0.21, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Selenium', 'rda': 70, 'limit': 400, 'value': 2.6, 'state': 'deficient', 'unit': 'µg'}
{'name': 'Vitamin A', 'rda': 900, 'limit': 20000, 'value': 623.0, 'state': 'deficient', 'unit': 'IU'}
{'name': 'Vitamin E', 'rda': 15, 'limit': 1000, 'value': 0.78, 'state': 'deficient', 'unit': 'mg'}
{'name': 'Vitamin D', 'rda': 1000, 'limit': 8000, 'value': 0.0, 'state': 'deficient', 'unit': 'IU'}
... continued
```
## Sorting Foods in a Meal By a Specific Nutrient
Sometimes it is helpful to see which foods contain the most of a given nutrient in a meal. For example, you may want to see which foods contributed the most sugar for a given day. This can be achieved through the following code:
```python
# index_from_name returns the index that nutrient information exists in an array of nutrients
m.sort_by_top(""Sugar"")
ni = noms.index_from_name(""Sugar"")
for food in m.foods:
    print(food.nutrients[ni])
```
```
{'nutrient_id': 269, 'name': 'Sugar', 'group': 'Proximates', 'unit': 'g', 'value': 8.97}
{'nutrient_id': 269, 'name': 'Sugar', 'group': 'Proximates', 'unit': 'g', 'value': 1.7}
```
Note that this sorts the foods in the Meal object from greatest to least in terms of how much sugar each food has.

## Generate Food Recommendations in Context of a Meal and Pantry
Because it would be computationally expensive to generate a food recommendation in the context of every food in the database, and it may be unrealistic to recommend any food from the database as it may be hard to access, you must define a list of foods that will serve as a pantry object. Here is an example pantry object containing many common whole foods.

```python
    pantry = {
    # DAIRY AND EGG
    ""01001"":100, # butter, salted
    ""01145"":100, # butter, without salt
    ""01079"":100, # 2% milk
    ""01077"":100, # milk, whole
    ""01086"":100, # skim milk
    ""01132"":100, # scrambled eggs
    ""01129"":100, # hard boiled eggs
    ""01128"":100, # fried egg
    # MEAT
    ""15076"":100, # atlantic salmon
    ""07935"":100, # chicken breast oven-roasted
    ""13647"":100, # steak
    ""05192"":100, # turkey
    # FRUIT
    ""09037"":100, # avocado
    ""09316"":100, # strawberries
    ""09050"":100, # blueberry
    ""09302"":100, # raspberry
    ""09500"":100, # red delicious apple
    ""09040"":100, # banana
    ""09150"":100, # lemon
    ""09201"":100, # oranges
    ""09132"":100, # grapes
    # PROCESSED
    ""21250"":100, # hamburger
    ""21272"":100, # pizza
    ""19088"":100, # ice cream
    ""18249"":100, # donut
    # DRINK
    ""14400"":100, # coke
    ""14429"":100, # tap water
    ""14433"":100, # bottled water
    ""09206"":100, # orange juice
    ""14278"":100, # brewed green tea
    ""14209"":100, # coffee brewed with tap water
    # (milk is included in dairy group)
    # GRAIN
    ""12006"":100, # chia
    ""12220"":100, # flaxseed
    ""20137"":100, # quinoa, cooked
    ""20006"":100, # pearled barley
    ""20051"":100, # white rice enriched cooked
    ""20041"":100, # brown rice cooked
    ""12151"":100, # pistachio
    ""19047"":100, # pretzel
    ""12061"":100, # almond
    # LEGUME
    ""16057"":100, # chickpeas
    ""16015"":100, # black beans
    ""16043"":100, # pinto beans
    ""16072"":100, # lima beans
    ""16167"":100, # peanut butter smooth
    # VEGETABLE
    ""11124"":100, # raw carrots
    ""11090"":100, # broccoli
    ""11457"":100, # spinach, raw
    ""11357"":100, # baked potato
    ""11508"":100, # baked sweet potato
    ""11530"":100, # tomato, red, cooked
    ""11253"":100, # lettuce
    ""11233"":100, # kale
    ""11313"":100, # peas
    ""11215"":100, # garlic
    # OTHER
    ""04053"":100, # olive oil
    ""19904"":100, # dark chocolate
    ""11238"":100, # shiitake mushrooms
    ""19165"":100, # cocoa powder
    }
    pantry_food = client.get_foods(pantry)
```
Now, with a list of possible foods to recommend, you can call noms.generate_recommendations with the meal we set up earlier, which consists of just broccoli and brown rice.
```python
recommendations = noms.generate_recommendations(m, pantry_food, noms.nutrient_dict, 3)
for rec in recommendations:
    # a recommendation is a list containing the calculated loss after the recommendation
    # is applied, the index of the pantry for the recommendation, and the amount of that
    # food / 100g
    print(str(round(rec[2] * 100, 2)) + ""g"", ""of"", pantry_food[rec[1]].desc[""name""])
```
```
50.36g of Seeds, chia seeds, dried
53.3g of Nuts, almonds
56.76g of Peanut Butter, smooth (Includes foods for USDA's Food Distribution Program)
```
It is reasonable that the function returned these foods from the pantry as the current daily nutrition is low in protein and Omega-3s, which chia seeds satisfy the most.
"
snipsco/snips-action-nutrition,TypeScript,"# snips-action-nutrition

Snips action code for the Nutrition app

## Setup

```sh
# Install the dependencies, builds the action and creates the config.ini file.
sh setup.sh
```

Don't forget to edit the `config.ini` file.

To be able to make calls to the API, you must have a [FatSecret Platform REST API key](https://platform.fatsecret.com/api/Default.aspx?screen=rapih).

An assistant containing the intents listed below must be installed on your system. Deploy it following [these instructions](https://docs.snips.ai/articles/console/actions/deploy-your-assistant).

## Run

- Dev mode:

```sh
# Dev mode watches for file changes and restarts the action.
npm run dev
```

- Prod mode:

```sh
# 1) Lint, transpile and test.
npm start
# 2) Run the action.
npm run launch
```

## Test & Demo cases

This app only supports english 🇬🇧. French 🇫🇷 will probably be supported in the future.

### `GetNutritionalInfo`

#### Get nutritional info for a given food

Get nutritional information for the given food
> *Hey Snips, how many calories are in a serving of spaghetti?*

> *Hey Snips, how much vitamin A is in a carrot?*

### `CompareNutritionalInfo`

#### Compare the nutritional info between two given foods

Compare the nutritional info between the two given foods
> *Hey Snips, how much vitamin C in an orange compared to a lemon?*

## Debug

In the `src/index.ts` file:

```js
// Uncomment this line to print everything
// debug.enable(name + ':*')
```

## Test

*Requires [mosquitto](https://mosquitto.org/download/) to be installed.*

```sh
npm run test
```

**In test mode, i18n output and http calls are mocked.**

- **http**: are written in `tests/httpMocks/index.ts`
- **i18n**: mocked by `snips-toolkit`, see the [documentation](https://github.com/snipsco/snips-javascript-toolkit#i18n).
"
build-ux/nutrition-ui,CSS,"# Nutirition UI

A [video series project](https://www.youtube.com/watch?v=Z8LFbc3zFTE&list=PLKFUh46KjXESnnC7TZwd_qc-GwdPRiOnl) by [Build UX](https://youtube.com/buildux) to craft a nutrition website design with expert HTML and CSS.

## Attributions

### Design

The design used for this project is [Nutrition UI by Giga Tamarashvili on Dribbble](https://dribbble.com/shots/4896266-Nutrition-UI).

[View and inspect the recreated design in Figma](https://www.figma.com/file/PJ1eDnAob5PCQxxBnOBIuacM/Nutrition-UI-by-Giga-Tamarashvili?node-id=0%3A1).

### Fonts

This project uses two open-source fonts from [Google fonts](https://fonts.google.com/):

- [Muli](https://fonts.google.com/specimen/Muli)
- [Yeseva One](https://fonts.google.com/specimen/Yeseva+One)

### Images

This project uses two free high-resolution photos from [Unsplash](https://unsplash.com/):

- [A berry full glass](https://unsplash.com/photos/0uns8eQn_g8) by [Jess Watters](https://unsplash.com/@designedbyjess) on Unsplash
- [Chia pudding](https://unsplash.com/photos/sBDJADrnsbY) by [Alex Loup](https://unsplash.com/@alexloup) on Unsplash

### Icons

This project uses two free SVG icons from [FontAwesome](https://fontawesome.com/).
"
openfoodfacts/openfoodfacts-laravel,PHP,"# Laravel Open Food Facts API

[![Latest Version on Packagist](https://img.shields.io/packagist/v/openfoodfacts/openfoodfacts-laravel.svg?style=flat-square)](https://packagist.org/packages/openfoodfacts/openfoodfacts-laravel)
[![Code Coverage](https://scrutinizer-ci.com/g/openfoodfacts/openfoodfacts-laravel/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/openfoodfacts/openfoodfacts-laravel/?branch=master)
[![Quality Score](https://img.shields.io/scrutinizer/g/openfoodfacts/openfoodfacts-laravel.svg?style=flat-square)](https://scrutinizer-ci.com/g/openfoodfacts/openfoodfacts-laravel)

This package provides a convenient wrapper to the [Open Food Facts API](https://en.wiki.openfoodfacts.org/API) for Laravel applications.

## Requirements

- PHP 8.0+
- Laravel 9.x

*Legacy support (PHP 7.2+ and Laravel 5.7-8.x) at [v0.2.x](https://github.com/openfoodfacts/openfoodfacts-laravel/tree/v0.2.2).*

## Installation

You can install the package via composer:

```bash
composer require openfoodfacts/openfoodfacts-laravel
```

## Usage

#### Find product details by barcode
``` php
OpenFoodFacts::barcode('20203467');
```
it returns an array with product details:
```
Array
(
    [product_name] => Cantuccini with hazelnuts
    [image_url] => https://static.openfoodfacts.org/images/products/20203467/front_fr.4.400.jpg
    ...    
)    
```

#### Find products that match a search term:
``` php
$collection = OpenFoodFacts::find('Coca Cola Zero');

// returns a Illuminate\Support\Collection of arrays with details of each product found
```


## Contributing
You're very welcome to contribute. We coordinate on the Open Food Facts slack, on the #PHP channel : https://slack.openfoodfacts.org
Please see [CONTRIBUTING](CONTRIBUTING.md) for details.

## License

The MIT License (MIT). Please see [License File](LICENSE.md) for more information.
"
globalfoodbook/nutrition-facts-label,JavaScript,"# Nutrition Facts Label

Tags: food, nutrition, nutrition facts, nutrition label, food-cook, recipe plugin, shortcode, global food book

Requires at least: 3.0.1

Tested up to: 4.4

Stable tag: 1

License: GPLv2 or later

License URI: http://www.gnu.org/licenses/gpl-2.0.html

This plugin provides food bloggers with the ability to add nutrition facts label to their recipe post(s).

## Description

Our motivation for releasing this plugin is based on a forum discussion on the food-cook theme support site.

We felt that we already had some code that could serve as a basis for producing this plugin, other food bloggers could benefit and possibly improve on.

This plugin will work best on blogs that use [food-cook](http://themeforest.net/item/food-cook-multipurpose-food-recipe-wp-theme/4915630) theme.

For food blogs that are not based on the food-cook theme, It is possible to create a [custom post type](https://wordpress.org/plugins/custom-post-type-ui/) called ""recipe"" and an ingredients post_meta entry with key ""RECIPE_META_ingredients"".

We strongly recommended taking this route or using this plugin under the guidance of a Wordpress developer.

From a more technical side, In order to generate a nutrition facts label, you can either generate an image or generate a post_meta key (gfb_recipe_meta_nutrition_facts) that holds JSON data (for each recipe) which is used to generate a nutrition label.

This plugin also includes a meta box within the recipe post edit page in the admin area, which automatically reads the post_meta entry with key ""RECIPE_META_ingredients"" which mainly contains your ingredients list and uses that to generate the nutrition label.

In order to automatically display a nutrition label on the every recipe, your Wordpress developer should add this line of code to the best possible place.

```
  <?php echo do_shortcode( '[embed_nutrition_label]' ) ?>
```
It is also possible to embed this as a short-code from the text editor.

But based on the food-cook recipe page layout your options may appear limited, hence why it is best that a Wordpress developer helps out here.

```
  [embed_nutrition_label]
```
### How to Video
[![Nutrition Facts Label Wordpress Plugin Video](http://img.youtube.com/vi/oM1LoVSacss/0.jpg)](https://www.youtube.com/watch?v=oM1LoVSacss)

This plugin provides food bloggers with the ability to add a nutrition facts label to their recipe post(s).

This plugin provides image download option or short-codes as possible ways of sharing nutritive insights. It also provides an update facility that adds a nutrition facts label to already existing recipe posts.

Big thanks to the guys at nutritionix for sharing their [javascript nutrition label](https://github.com/nutritionix/nutrition-label) which we have tweaked and used here.  

We at [www.globalfoodbook.com](http://www.globalfoodbook.com) are open source and agile proponents. We have open sourced this plugin on [github](https://github.com/globalfoodbook/nutrition-facts-label) and will continue to improve this.

We appreciate the help we have received from using other plugins and would like to contribute back to this awesome Wordpress community at every chance possible.

At the moment we are working on improving our algorithms on the backend and would like it if you could join us.

We would love to hear from you on ways this can be improved, give us a shout via the our website or via email (we [at] globalfoodbook.com).

Thanks and Keep pushing

### How to Use this Nutrition Label?
Login into your Wordpress account.
Scroll down to the ""Ingredients Section"" and list the Ingredients.
Press ""Generate Label"" on the Nutrition Facts Label Generator.
The nutrition facts are automatically generated for you.
N:B List the ingredients individually including the quantities.

### How to Include Nutrition Label on Existing Recipes?
To include nutrition label on existing food recipes, simply press the ""Go"" button for automatic generation of the nutrition label.
For any unsuccessful updates, make sure that the ingredients are placed line by line and in each line they are without commas or fullstops.
Then press the ""Go"" button to generate label.


## Installation

1. Upload /nutrition-facts-label to the /wp-content/plugins directory
2. Activate the plugin through the Plugins menu in WordPress

## Frequently Asked Questions

### How do I use this Nutrition Label ?
Login into your Wordpress account.
Scroll down to the ""Ingredients Section"" and list the Ingredients.
Press ""Generate Label"" on the Nutrition Facts Label Generator.
The nutrition facts are automatically generated for you.
N:B List the ingredients individually including the quantities.

### How to Include Nutrition Label on Existing Recipes
To include nutrition label on existing food recipes, simply press the ""Go"" button for automatic generation of the nutrition label.
For the unsuccessful updates, make sure that the ingredients are placed line by line and in each line they are without commas or fullstops.
Then press the ""Go"" button.

## Screenshots

1. Generate Nutrition Facts Label
2. Update existing recipes.
3. Sample on the recipe page.

## Changelog

### 1.0
* Initial Release

### 1.1
* Fixes and Modifications
* Documentation

### 1.2
* Bump wordpress compatibile versions

### 1.5
* Add configrable NUT_API environment variable

## Upgrade Notice

### 1
* Initial Release

### 1.1
* Fixes and Modifications
* Documentation

### 1.2
* Bump wordpress compatibile versions

### 1.5
* Add configrable NUT_API environment variable

## Notes to developers

#### Contributing

If you would like to contribute to our suite of plugins, head on over to [Global Food Book Labs](https://github.com/globalfoodbook). Feel free to fork and contribute back.

1. Fork it (https://github.com/globalfoodbook/nutrition-facts-label)
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create a new Pull Request

#### Adding Screenshots to the Wordpress repo

1. Rename each screenshot for each step like this. For step 1 the screenshot is screenshot-1.png.
2. The banner image is named as banner-772x250.png.
3. Use an SVN client like smart svn or rapid svn etc to upload these images to the /assets folder.
4. After this, commit and all will be picked up.

#### Pushing plugin to Wordpress svn repo

1. Clone this repo

          `git clone git@github.com:globalfoodbook/nutrition-facts-label.git`

2. cd path/to/nutrition-facts-label
3. vim .git/config
4. Add the code below:

          [svn-remote ""svn""]
                  url = http://plugins.svn.wordpress.org/[plugin_name]/trunk
                  fetch = :refs/remotes/git-svn

5. Then merge the master into the new branch:

          `git svn fetch svn`
          `git checkout -b svn git-svn`
          `git merge master`
          `git svn dcommit --username [Wordpress.org username]`

6. Then rebase that branch to the master, and you can dcommit from the master to svn

          `git checkout master`
          `git rebase svn`
          `git branch -d svn`
          `git svn dcommit --username [Wordpress.org username]`


# Contributors

* [Ikenna N. Okpala](http://ikennaokpala.com)
"
AlexChesser/nutrition,Java,"Nutrition Tracker Initial Loadout.

- Uses the USDA - SR25 nutritional database. 
- Uses FMDB for direct connection to SQLITE
- Searchable Nutrition database
- Calculable nutrition amounts

TODO:
- macro ratio calculation
- timers, reminders for feed window.
- recommendation model 
- daily values tracking 
"
Flourishlove/Recipe-Recommendation,Python,"# Recipe-Recommendation

## Introduction
People always face same problem in their daily life: What to eat and how to eat healthily. What’s more, people who love cooking usually don’t know how to start when facing too many ingredient pairings. Our Recipe Recommendation System gives users nutritious recipe choices which also satisfy their personal taste. Our target users are busy students and professionals who want to eat healthy. Our goal is to help people with their meal decision and bring up their health consciousness.

## Data
[Yummly’s API](https://developer.yummly.com/) <br />
[Open Food Facts Dataset](https://www.kaggle.com/openfoodfacts/world-food-facts) <br />
[Ingredient and Compound matching](https://www.nature.com/articles/srep00196) <br />
Estimated Energy Requirements Diagram

## Project Architecture
![alt tag](https://raw.githubusercontent.com/Flourishlove/Recipe-Recommendation/master/Architecture.png) <br />
1. Combine two original dataset into one big recipe-compound matrix. 
2. With recipe-compound data on hand, we use two machine learning algorithms, hierarchical clustering and DBSCAN, to cluster flavor of recipes based on their compound. In final implementation, we use DBSCAN because it discard those isolated recipes and make recipe distribution better.
3. Use information of user’s body condition to further filter out the recipes to recommend.


## Installation
### 1. Running locally
In command prompt, enter code folder and install all necessary python libraries:
```
$ cd code
$ sudo pip install -r requirements.txt
$ python application.py
```
Then you will see something like
```
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger pin code: 103-344-409
```
Which means you run our demo successfully. Go to you browse and enter [localhost:5000](http://127.0.0.1:5000/), you will see our webapplication.

If you don’t want to install all the libraries and packages in your system, you can use virtualenv to setup virtual environment:
```
$ sudo pip install virtualenv
$ cd code
$ virtualenv venv
$ . venv/bin/activate  (For Windows user: $ venv\Scripts\activate)
$ pip install -r requirements.txt
$ python application.py
```
This option provides you with a virtual environment in folder venv. Whenever you want to run the demo, you can just use command $ . venv/bin/activate. After testing demo, use
```
$ deactivate
```
to exist virtual environment.

## Interface 
There are two pages of our webapp. <br />
Choose flavor and enter body condition in the first page.
![alt tag](https://raw.githubusercontent.com/Flourishlove/Recipe-Recommendation/master/page1.png) <br />

Display recommendation on the second page.
![alt tag](https://raw.githubusercontent.com/Flourishlove/Recipe-Recommendation/master/page2.png) <br />

## Dependencies
Flask <br />
scikit-learn <br />

## Solutions to some problems
[Create and Connect to a MySQL Database with Amazon RDS](https://aws.amazon.com/getting-started/tutorials/create-mysql-db/) <br />
[Deploy a flask application on AWS](https://medium.com/@rodkey/deploying-a-flask-application-on-aws-a72daba6bb80) <br />
[Import CSV file into MySQL](https://dev.mysql.com/doc/workbench/en/wb-admin-export-import-table.html) <br />


### SQL to load CSV data in workbench for escapsing comma:
```
USE recipe;
LOAD DATA LOCAL INFILE '/Users/meteor/Gatech/Recipe-Recommendation/cleaned_data/recipe_final.csv' INTO TABLE recipe_info FIELDS TERMINATED BY ',' ENCLOSED BY '""' LINES TERMINATED BY '\n';
```
"
CatalystCode/NutritionDoctor,JavaScript,"# Ping An Nutrition Doctor - Mobile Client

During the Microsoft One Week Hackathon, we [Microsoft] collaborated with Ping An to build Nutrition Doctor. Nutrition Doctor is an application that allows users to take a photo of a food item whereupon the app will identify the food item and present the user with nutritional information such as calories, fat, etc. 

## Architecture

![architecture](https://raw.githubusercontent.com/CatalystCode/NutritionDoctorApi/master/docs/architecture.png)

----

![call graph](https://raw.githubusercontent.com/CatalystCode/NutritionDoctorApi/master/docs/call_graph.png)

Each component is separated into its own Git repository:

* [Mobile Client](https://github.com/CatalystCode/NutritionDoctor)
* [Web Api](https://github.com/CatalystCode/NutritionDoctorApi) 
* [Functions](https://github.com/CatalystCode/NutritionDoctorFunctions)
* [Image Classifier](https://github.com/CatalystCode/NutritionDoctorImageClassifier)

## Getting Started

The Mobile Client is a react-native application that communicates with a REST API to persist and read user information.

1. [Install Yarn](https://yarnpkg.com/en/docs/install)
2. `npm install -g react-native-cli`
3. `git clone git@github.com:CatalystCode/NutritionDoctor.git`
4. `cd NutritionDoctor`
5. `yarn install`
6. `react-native run-ios`
"
mftaher/nutritionix-api-ruby-library,Ruby,"# Nutritionix

TODO: Write a gem description

## Installation

Add this line to your application's Gemfile:

    gem 'nutritionix'

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install nutritionix

## Usage

* For NXQL Supported search:

        app_id = '<YOUR_APP_ID>'
        app_key = '<YOUR_APP_KEY>'
        provider = Nutritionix::Api_1_1.new(app_id, app_key)
        search_params = {
          offset: 0,
          limit: 50,
          fields: ['brand_id', 'brand_name', 'item_id', 'item_name', 'nf_calories'],
          query: 'potato'
        }
        results_json = provider.nxql_search(search_params)
        puts ""Results: #{results_json}""

* Note:
  * There is a standalone test script **/script/test_api_1_1.rb** available
    which can be readily used for testing.You only need to replace &lt;YOUR_APP_ID&gt;
    and &lt;YOUR_APP_KEY&gt; with your nutritionix app credentials.

  * Logs generated can be found at default location &lt;HOME_DIRECTORY&gt;/nutritionix_api_logs.txt

## Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request
"
AmbitGroupvienna/usda-fns-ingest,Python,"# usda-fns-ingestor

An experiment in ingesting data for the USDA's Food and Nutrition Service
using [ReVAL](https://github.com/18F/ReVAL).

Use [the webform](https://usda-fns-ingestor.app.cloud.gov/data_ingest/api/validate/) 
to interactively upload files and see
validation results, or the [API](api.md) to simply see the validation results.

## Development

To start development, clone this repository:

	git clone https://github.com/18F/usda-fns-ingest.git

You will need to install [Python 3.6](http://www.python.org/)

Install development dependencies using [Pipenv](http://docs.python-guide.org/en/latest/dev/virtualenvs/):

	pipenv install --dev

This tool makes use of the [ReVAL](https://github.com/18F/ReVAL) tool, if you also are developing that tool at the same time, you will need to have a local copy of it.  You can then install and point to the local copy so the changes you make there will reflect on this tool immediately.

	pipenv install -d -e <path to ReVAL>

Copy `.env_sample` to `.env` and update the variables according to cloud.gov `env`.

You can then activate the Python virtual environment:

	pipenv shell

## Deploying locally 

You'll need to install [PostgreSQL](https://www.postgresql.org/), then

    createdb usda_fns_ingestor
    cd usda_fns_ingestor
    python manage.py runserver
    
You can use other PostgreSQL configurations (database name, user, 
require a password, etc); just `export DATABASE_URL=<database url>`.
See [dj-database-url](https://github.com/kennethreitz/dj-database-url)

Then you can access the system at 
[http://localhost:8000/data_ingest/](http://localhost:8000/data_ingest/)

## Deploying to cloud.gov 

Once [logged into a cloud.gov workspace](https://cloud.gov/docs/apps/deployment/),
you can 

    cd usda_fns_ingestor
    cf create-service aws-rds shared-psql usda-fns-ingestor-db
    cf push

Other CloudFoundry platforms and Heroku should work similarly,
though different plans may be available (see `cf marketplace`)

## Contributing

See [CONTRIBUTING](CONTRIBUTING.md) for additional information.

## Public domain

This project is in the worldwide [public domain](LICENSE.md). As stated in [CONTRIBUTING](CONTRIBUTING.md):

> This project is in the public domain within the United States, and copyright and related rights in the work worldwide are waived through the [CC0 1.0 Universal public domain dedication](https://creativecommons.org/publicdomain/zero/1.0/).
>
> All contributions to this project will be released under the CC0 dedication. By submitting a pull request, you are agreeing to comply with this waiver of copyright interest.
"
jnpaulson/nutrition_indicators,R,"# Exposing Hidden Hunger, 2015 HelpMeViz Vizathon

Datasets made available to participants of the [2015 Vizathon](http://helpmeviz.com/2015/05/07/vizathon-with-bread-for-the-world-institute/) through IFPRI/HarvestChoice:

1. **HarvestChoice ""CELL5M"" Indicators**  
   Spatial datasets for sub-Saharan Africa at 10km resolution available for download using [MAPPR](http://apps.harvestchoice.org/mappr) or [TABLR](http://apps.harvestchoice.org/tablr) tools.

2. **Malawi, USAID/Africa RISING Baseline Survey, 2014**  
   Variables constructed from the 2014 ARBES. See [readme](./Malawi/) for a list of variables included in the CSV file provided.

3. **Ethiopia, Household Consumption and Expenditure Survey, 2010/2011**  
   Variables constructed from the 2011 HCES. See [readme](./Ethiopia/) for a list of variables included in the CSV file provided.
"
tanishqa-lalwani/Personal-Nutritionist,JavaScript,"# Personal Nutritionist
**Website Link** - https://personal-nutritionist-ch06rhgys-tanishqa-lalwani.vercel.app
</br> **Youtube Demo Link** - https://youtu.be/Sb0eRm3Y6LY


# Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Tech Stack](#tech-stack)
  - [Front End](#front-end)
  - [Back End](#back-end)
- [Prerequisites](#prerequisites)
- [Contributors](#contributors)


## Overview 
The project aims at being a tool which monitors your nutrient intake, requirements and diet plan. Personal Nutritionist as the name, the system can act as your personal nutritionist while this system can be used also by nutritionists gaining a lot of information and help in many ways. APIs help the system to get the information in many ways. The user can get details about a number of nutrients, vitamins etc of a fruit or vegetable. The user can add his recipes or get recipes using the API. The System basically helps the user in what to eat and which is good, what will help him and etc, the system will help him filter things easily. The System also allows the user to make a diet plan and remind him of his food timings.

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=""https://github.com/tanishqa-lalwani/Personal-Nutritionist/blob/main/Readme_images/Home.PNG"" width=""700"" height=""400"">


## Features 

**1. Sign Up** - The user (client or nutritionist) logs into the system when it creates a new account or logging with existing account using his email id and password

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=""https://github.com/tanishqa-lalwani/Personal-Nutritionist/blob/main/Readme_images/SignUp.PNG"" width=""350"" height=""200"">

**2. Search recipes/blogs** - Clients can search recipes of their choice or Client can search for blogs posted by nutritionists on various food items or diet plans. Clients also can filter recipes on various parameters like most popular, time to cook, cuisine etc. Blogs can be filtered by topic or nutritionists

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=""https://github.com/tanishqa-lalwani/Personal-Nutritionist/blob/main/Readme_images/Recipes.PNG"" width=""350"" height=""200""> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=""https://github.com/tanishqa-lalwani/Personal-Nutritionist/blob/main/Readme_images/blogs.PNG"" width=""350"" height=""200"">

**3. Dashboard** - After the user logs into the system, s/he can go the dashboard to maintain their food log of the day. Clients can add their day to day food logs in each meal of the day, for eg.,breakfast, lunch ,dinner, etc. and maintain their calorie intake. They will also be able to view their intake of calories, proteins, fats and carbs in a day. Clients can also see his/her statistics of calorie intake, weight graph and more in the progress section.

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=""https://github.com/tanishqa-lalwani/Personal-Nutritionist/blob/main/Readme_images/Dashboard.PNG"" width=""350"" height=""200""> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=""https://github.com/tanishqa-lalwani/Personal-Nutritionist/blob/main/Readme_images/Progress.PNG"" width=""350"" height=""200"">

**4. Edit Profile** - Clients can edit their username, email, password, weight, height etc in the view profile section. Clients can also set his/her goals according to his/her requirements

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=""https://github.com/tanishqa-lalwani/Personal-Nutritionist/blob/main/Readme_images/Profile.PNG"" width=""350"" height=""200""> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=""https://github.com/tanishqa-lalwani/Personal-Nutritionist/blob/main/Readme_images/Profile_2.PNG"" width=""350"" height=""200"">

## Tech Stack

### Front End 
- [HTML](https://html.com/) A markup language which does the basic stucturing of the website.
- [CSS](https://www.w3schools.com/css/) a style sheet language used for defining the appearance of the website.
- [React](https://github.com/facebook/react) The front end framework of the website is based on this.

### Back End 
- [NodeJS](https://github.com/nodejs) Backend of the website is scaled using NodeJS
- [Firebase](https://firebase.google.com/) It is used for serverless architecture - CDN Hosting, Realtime Database, Authentication and Storage.

## Prerequisites
- [Firebase](https://firebase.google.com/) account in order to set up the serverless BaaS for the project.
- [Node.js](https://nodejs.org/) (React frontend) 
- [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) and [Babel JavaScript ](https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel) plug-ins.

## Conclusion 

Our website offers credible information to help you make healthful eating choices. We are developing a goto website for people who are obsessing over fitness and count their calories and hesitate over mouth watering treats. Our aim is to make sure people know what they eat and how much they need for their day. This is a healthy place for people as they are surrounded by world class nutritionists giving them opinions and prescribing diet plans to work with their routine all packaged in one deal.

We aim to help users to find perfect recipes for themselves. Users can set goals and follow the best diet plans for overall health benefits. We use the best food databases across the internet to provide details about the number of nutrients, vitamins etc. of the food items.


## Contributors

Following are the contributors for this project - 

<ul>
  <li><a href=""https://github.com/MetalllD"">Mital Kamani</a> - Team Lead</li>
  <li><a href=""https://github.com/defalt18"">Kushagra Pathak</a></li>
    <li><a href=""https://github.com/tanishqa-lalwani"">Tanishqa Lalwani</a></li>
    <li><a href=""https://github.com/Rushi11111"">Rushi Rajpara</a></li>
    <li><a href=""https://github.com/JigarMarvaniya"">Jigar Marvaniya</a></li>
      <li><a href=""https://github.com/anany01325"">Anany Kashyap</a></li>
    <li><a href=""https://github.com/aakashdabhi23"">Aakash Dabhi</a></li>
    <li><a href=""https://github.com/marmikprajapati"">Marmik Prajapati</a></li>
      <li><a href=""https://github.com/aksharrrrr"">Akshar Rughani</a></li>
      <li><a href=""https://github.com/rushil-09"">Rushil Bangia</a></li>
    
    
</ul>
"
nutritionfactsorg/daily-dozen-ios,Swift,"# Daily Dozen iOS App

<p align=""center""><img src=""README_files/github-dailydozen.jpg"" style=""width: 480px""></p>

## About

In the years of research required to create the more than a thousand evidence-based videos on [NutritionFacts.org][nutritionfacts.org], Michael Greger, MD, FACLM, has arrived at a list of what he considers the most important foods to include in a healthy daily diet. Yes, greens are good for you, but how much should we try to eat each day?

Dr. Greger’s Daily Dozen details the healthiest foods and how many servings of each we should try to check off every day. He explains his rationale in his book [How Not to Die][book]. All his proceeds from his books, DVDs, and speaking engagements is all donated to charity.

## Daily Dozen on the App Store

<a href=""https://apps.apple.com/us/app/dr-gregers-daily-dozen/id1060700802"" alt=""Download from the App Store"" target=""%5fblank""><img src=""README_files/app-store.png"" width=""200""></a>

## Contribute

We would love for you to contribute to our source code and to help make the Daily Dozen for Android even better!

Check out our [Contribution Guidelines][contribute] for details on how to get started and our suggested best practices.

## Donate

To help support [NutritionFacts.org][nutritionfacts.org], click [here][donate]

## License

The Daily Dozen iOS App is licensed under the GPLv3

## Contributors

* [Konstantin Khokhlov][justaninja]
* [Will Webb][innerfish]
* [Christi Richards][christirichards]
* [Lauren Hacker][laurenhacker]

**Special thanks to the volunteer efforts of the original creators of the app:**

* **Application Development:** Chan Kruse
* **Application Design:** Allan Portera
* **Photography:** Sangeeta Kumar

## Updates

**3.2.3 (App Store: August 15, 2020)**

* Improved Spanish translation

**3.2.1 (App Store: July 7, 2020)**

* Restructured to support international localization in general
    * Instances of static English `String` replaced with localizable `NSLocalizedString`
    * Modified Storyboard UI layouts to adapt to string length variance of different languages. 
* Adds Spanish
* Improved data synchronization with HealthKit
* Fixed update between Weight checkbox and Weight entry to match on the display
* Fixed weight chart x-axis scaling

**3.1.0 (App Store: December 17, 2019)**

* Adds 21 Tweaks
* Adds Weight Tracking with Health Kit Integration
* Add Application Tab Controller bar

Improvements:

* Adds settings control to choice between using ""Daily Dozen only"" or ""Daily Dozen + 21 Tweaks"".

* Adds settings control to select whether to use Imperial or Metric type units throughout the app.

**2.0.0 (App Store: March 9, 2018)**

* Brand new design
* Daily Dozen tracking now persists over multiple days
* Visualize your progress over time with our new Charts integration
* Enable a daily reminder with a custom time setting in the Daily Reminder Settings
* Backup your data to your files
* Added additional links in the main menu including The Daily Dozen Cookbook
* Updated About information in the main menu

**1.0.2 (App Store: November 13, 2017)**

* Misspelling fix

**1.0.0 (App Store: December 21, 2015)**

* Initial Release

[nutritionfacts.org]: http://nutritionfacts.org ""NutritionFacts.org - The Latest in Nutrition Research""
[contribute]: https://github.com/nutritionfactsorg/daily-dozen-ios/blob/master/CONTRIBUTING.md ""Contribute to the Daily Dozen Android App""
[donate]: https://nutritionfacts.org/donate ""Donate to NutritionFacts.org""
[book]: http://nutritionfacts.org/book ""How Not to Die""
[christirichards]: http://github.com/christirichards ""Christi Richards on GitHub""
[innerfish]: https://github.com/innerfish ""Will Webb on Github""
[justaninja]: https://github.com/justaninja ""Konstantin Khokhlov on Github""
[laurenhacker]: http://github.com/lahacker ""Lauren Hacker on Github""
"
openfoodfacts/openfoodfacts-server,Perl,"<img height='175' src=""https://static.openfoodfacts.org/images/svg/openfoodfacts-logo-en.svg"" align=""left"" hspace=""1"" vspace=""1"">

# Open Food Facts - Product Opener (Web Server)

[![Project Status](http://opensource.box.com/badges/active.svg)](http://opensource.box.com/badges)
[![Crowdin](https://d322cqt584bo4o.cloudfront.net/openfoodfacts/localized.svg)](https://translate.openfoodfacts.org/)
[![Open Source Helpers](https://www.codetriage.com/openfoodfacts/openfoodfacts-server/badges/users.svg)](https://www.codetriage.com/openfoodfacts/openfoodfacts-server)
[![Backers on Open Collective](https://opencollective.com/openfoodfacts-server/backers/badge.svg)](#backers)
[![Sponsors on Open Collective](https://opencollective.com/openfoodfacts-server/sponsors/badge.svg)](#sponsors)

## Tests
[![Perl::Critic](https://github.com/openfoodfacts/openfoodfacts-server/actions/workflows/perlcritic.yml/badge.svg)](https://github.com/openfoodfacts/openfoodfacts-server/actions/workflows/perlcritic.yml)
[![Pull Requests](https://github.com/openfoodfacts/openfoodfacts-server/actions/workflows/pull_request.yml/badge.svg)](https://github.com/openfoodfacts/openfoodfacts-server/actions/workflows/pull_request.yml)

## What is Product Opener?

**Product Opener** is the server software for **Open Food Facts** and **Open Beauty Facts**. It is released under the AGPL license and is being developed in Perl, HTML and JavaScript as [Free and Open-Source Software](https://en.wikipedia.org/wiki/Free_and_open-source_software).

## What is Open Food Facts?

### A food products database

Open Food Facts is a database of food products with ingredients, allergens, nutrition facts and all the tidbits of information we can find on product labels.

### Made by everyone

Open Food Facts is a non-profit association of volunteers.
25.000+ contributors like you have added 1.7 million + products from 150 countries using our Android, iPhone or Windows Phone app or their camera to scan barcodes and upload pictures of products and their labels.

### For everyone

Data about food is of public interest and has to be open. The complete database is published as open data and can be reused by anyone and for any use. Check-out the cool reuses or make your own!

* <https://world.openfoodfacts.org>

## Priorities
* Please list priority issues here 
* Please add roadmaps here
* [P1 problems](https://github.com/openfoodfacts/openfoodfacts-server/labels/P1)
* [P1 candidates](https://github.com/openfoodfacts/openfoodfacts-server/labels/P1%20candidate)

<!-- ## Libraries used -->

## How do I get started?

* Join us on Slack at <https://openfoodfacts.slack.com/> in the channels: `#api`, `#productopener`, `#dev`.
* Developer documentation:
   * [Quick start guide (Docker)](./docs/introduction/dev-environment-quick-start-guide.md)
   * [Developer guide (Docker)](./docs/how-to-guides/docker-developer-guide.md)
   * [Manual installation](https://wiki.openfoodfacts.org/Product_Opener/Installation)
   * Configuration [TBA]
   * Dependencies [TBA]
   * Database configuration [TBA]
   * How to run tests [TBA]
 * [API Documentation](https://openfoodfacts.github.io/api-documentation/)

Note: documentation follows the [Diátaxis Framework](https://diataxis.fr/)

## Contribution guidelines

If you're new to Open-Source, we recommend you to Checkout our [_Contributing Guidelines_](https://github.com/openfoodfacts/openfoodfacts-server/blob/master/CONTRIBUTING.md). Feel free to fork the project and send us a pull request.

* Writing tests
* Code review
* Other guidelines
* Please add new features to the CHANGELOG.md file before or after merge to make testing easier

## Reporting problems or asking for a feature

Have a bug or a feature request? Please search for existing and closed issues. If your problem or idea is not addressed yet, please [open a new issue](https://github.com/openfoodfacts/openfoodfacts-server/issues). You can ask directly in the discussion room if you're not sure

## Translate Open Food Facts in your language

You can help translate the Open Food Facts web version and the app at :
<https://translate.openfoodfacts.org/> (no technical knowledge required, takes a minute to signup)

## Helping with HTML and CSS

We have [[templatized](https://github.com/openfoodfacts/openfoodfacts-server/tree/master/templates)] Product Opener, we use Gulp and NPM, but you'll need to run the Product Opener docker to be able to see the result (see the How do I get set up? section).

### Who do I talk to?

* Join our discussion room at <https://slack.openfoodfacts.org/> Make sure to join the #productopener and #productopener-alerts channels. Stéphane, Pierre, Charles or Hangy will be around to help you get started.

## Contributors

This project exists thanks to all the people who contribute.
<a href=""https://github.com/openfoodfacts/openfoodfacts-server/graphs/contributors""><img src=""https://opencollective.com/openfoodfacts-server/contributors.svg?width=890&button=false"" /></a>


## Backers

Thank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/openfoodfacts-server#backer)]

<a href=""https://opencollective.com/openfoodfacts-server#backers"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/backers.svg?width=890""></a>


## Sponsors

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/openfoodfacts-server#sponsor)]

<a href=""https://opencollective.com/openfoodfacts-server/sponsor/0/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/0/avatar.svg""></a>
<a href=""https://opencollective.com/openfoodfacts-server/sponsor/1/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/1/avatar.svg""></a>
<a href=""https://opencollective.com/openfoodfacts-server/sponsor/2/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/2/avatar.svg""></a>
<a href=""https://opencollective.com/openfoodfacts-server/sponsor/3/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/3/avatar.svg""></a>
<a href=""https://opencollective.com/openfoodfacts-server/sponsor/4/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/4/avatar.svg""></a>
<a href=""https://opencollective.com/openfoodfacts-server/sponsor/5/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/5/avatar.svg""></a>
<a href=""https://opencollective.com/openfoodfacts-server/sponsor/6/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/6/avatar.svg""></a>
<a href=""https://opencollective.com/openfoodfacts-server/sponsor/7/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/7/avatar.svg""></a>
<a href=""https://opencollective.com/openfoodfacts-server/sponsor/8/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/8/avatar.svg""></a>
<a href=""https://opencollective.com/openfoodfacts-server/sponsor/9/website"" target=""_blank""><img src=""https://opencollective.com/openfoodfacts-server/sponsor/9/avatar.svg""></a>

<a href=""https://nlnet.nl/""><img style=""height:100px"" src=""https://static.openfoodfacts.org/images/misc/nlnet_logo.svg"" alt=""Logo NLnet: abstract logo of four people seen from above Logo NGI Zero: letterlogo shaped like a tag""></a>

Open Food Facts Personal Search project was funded through the <a href=""https://nlnet.nl/discovery/"">NGI0 Discovery</a> Fund,
a fund established by NLnet with financial support from the European Commission's <a href=""https://ngi.eu"">Next Generation Internet</a> programme.
"
DeividZavala/DE-React-IronNutrition,JavaScript,"![Ironhack logo](https://i.imgur.com/1QgrNNw.png)

# React | IronNutrition

## Introduction

At this point in the course, some of us may be reminiscing about times before the course, when we used to work out and we were fit and in shape.  Surprising as it may be, spending many hours each day sitting in front of the computer is not an effective way to attain, and maintain, a rock-hard physique.  

Our solution: A nutrition app. 

And it's your job to build it. 

![](https://s3-eu-west-1.amazonaws.com/ih-materials/uploads/upload_0e106e84e22155f1d2775e37cd4aa865.gif)

## Requirements

- [Fork this repo](https://github.com/DeividZavala/PP-React-IronNutrition)
- Clone this repo into your `~/code/labs`

In the starter code, we've provided a list of foods in the form of an array of objects.

## Submission

Upon completion, run the following commands
```
$ git add .
$ git commit -m ""done""
$ git push origin master
```
Navigate to your repo and create a pull request from your master branch to the original repository master branch.

In the pull request name, add your name and last names separated by a dash ""-""

## Instructions

### Iteration 1 | Display Foods

Display a list of the foods. This should include the food's image, its name, and its calorie count. the array of foods is already in the state

**Make sure the image's src property is properly bound** the change is reflected in the DOM.  

### Iteration 2 | Search Foods

Create an input box to search through the foods by name.

You're going to need to generate a custom *filter method* to do this.

Consider using the method `filter` of javascript

### Iteration 3 | Add New Foods

Create a button to add new foods.

When a user clicks the button, a form will appear with fields for a name, number of calories, and an image.

When the user clicks submit, the food will be added to the list.

The form should disappear when the user clicks the submit button.  

### Iteration 4 | Today's Foods List

Create a button next to each item. When a user clicks the button, the corresponding food should be added to a special list of foods which are ""today's foods"".

Somewhere on the page, display a list of today's foods, with a total calorie count.

### Bonus | Quantities

In addition to the ""Add to today's list"" button, create an input for quantity. Whenever a user enters a number into the input, you should add that many of the item to their list.

The default quanitity should be 1.

**Super Bonus**

If the user has added more than one item of the same type to their list, don't display it twice. Instead, display the item's name, and the number of times it has been added.

For instance:

- `Banana x2`
- `Salmon x5`
- `Cake`"
BloomTech-Labs/nutrition-tracker-be,JavaScript,"🚫 Note: All lines that start with 🚫 are instructions and should be deleted before this is posted to your portfolio. This is intended to be a guideline. Feel free to add your own flare to it.

🚫 The numbers 1️⃣ through 3️⃣ next to each item represent the week that part of the docs needs to be comepleted by.  Make sure to delete the numbers by the end of Labs.

🚫 Each student has a required minimum number of meaningful PRs each week per the rubric.  Contributing to docs does NOT count as a PR to meet your weekly requirements.

# API Documentation

#### 1️⃣ Backend delpoyed at [🚫name service here](🚫add URL here) <br>

## 1️⃣ Getting started

To get the server running locally:

🚫 adjust these scripts to match your project

- Clone this repo
- **yarn install** to install all required dependencies
- **yarn server** to start the local server
- **yarn test** to start server using testing environment

### Backend framework goes here

🚫 Why did you choose this framework?

-    Point One
-    Point Two
-    Point Three
-    Point Four

## Production Dependencies

- [cors](https://www.npmjs.com/package/cors)
- [dotenv](https://www.npmjs.com/package/dotenv)
- [express](https://expressjs.com/)
- [helmet](https://helmetjs.github.io/)
- [knex](http://knexjs.org/)
- [knex-cleaner](https://www.npmjs.com/package/knex-cleaner)
- [mixpanel](https://docs.google.com/document/d/1YabpIkgGi6J4AJ-mhcspcWf-z0NP56gIY344lf20E5o/edit)
- [moment](https://momentjs.com/)
- [morgan](https://github.com/expressjs/morgan)
- [pg](https://node-postgres.com/)
- [uuid](https://www.npmjs.com/package/uuid)
- [sentry](https://blog.sentry.io/2018/03/06/the-sentry-workflow)
- [axios](https://github.com/axios/axios)
- [heroku](https://devcenter.heroku.com/articles/getting-started-with-nodejs)
- [validator](https://www.npmjs.com/package/validator)



## Development Dependencies

- [cross-env](https://www.npmjs.com/package/cross-env)
- [jest](https://jestjs.io/)
- [nodemon](https://nodemon.io/)
- [supertest](https://github.com/visionmedia/supertest)


## 2️⃣ Endpoints

🚫This is a placeholder, replace the endpoints, access controll, and descriptioin to match your project

#### Organization Routes

| Method | Endpoint                | Access Control | Description                                  |
| ------ | ----------------------- | -------------- | -------------------------------------------- |
| GET    | `/organizations/:orgId` | all users      | Returns the information for an organization. |
| PUT    | `/organizatoins/:orgId` | owners         | Modify an existing organization.             |
| DELETE | `/organizations/:orgId` | owners         | Delete an organization.                      |

#### User Routes

| Method | Endpoint                | Access Control      | Description                                        |
| ------ | ----------------------- | ------------------- | -------------------------------------------------- |
| GET    | `/users/current`        | all users           | Returns info for the logged in user.               |
| GET    | `/users/org/:userId`    | owners, supervisors | Returns all users for an organization.             |
| GET    | `/users/:userId`        | owners, supervisors | Returns info for a single user.                    |
| POST   | `/users/register/owner` | none                | Creates a new user as owner of a new organization. |
| PUT    | `/users/:userId`        | owners, supervisors |                                                    |
| DELETE | `/users/:userId`        | owners, supervisors |                                                    |

# Data Model

🚫This is just an example. Replace this with your data model

#### 2️⃣ ORGANIZATIONS

---

```
{
  id: UUID
  name: STRING
  industry: STRING
  paid: BOOLEAN
  customer_id: STRING
  subscription_id: STRING
}
```

#### USERS

---

```
{
  id: UUID
  organization_id: UUID foreign key in ORGANIZATIONS table
  first_name: STRING
  last_name: STRING
  role: STRING [ 'owner', 'supervisor', 'employee' ]
  email: STRING
  phone: STRING
  cal_visit: BOOLEAN
  emp_visit: BOOLEAN
  emailpref: BOOLEAN
  phonepref: BOOLEAN
}
```

## 2️⃣ Actions

🚫 This is an example, replace this with the actions that pertain to your backend

`getOrgs()` -> Returns all organizations

`getOrg(orgId)` -> Returns a single organization by ID

`addOrg(org)` -> Returns the created org

`updateOrg(orgId)` -> Update an organization by ID

`deleteOrg(orgId)` -> Delete an organization by ID
<br>
<br>
<br>
`getUsers(orgId)` -> if no param all users

`getUser(userId)` -> Returns a single user by user ID

`addUser(user object)` --> Creates a new user and returns that user. Also creates 7 availabilities defaulted to hours of operation for their organization.

`updateUser(userId, changes object)` -> Updates a single user by ID.

`deleteUser(userId)` -> deletes everything dependent on the user

## 3️⃣ Environment Variables

In order for the app to function correctly, the user must set up their own environment variables.

create a .env file that includes the following:

🚫 These are just examples, replace them with the specifics for your app
    
    *  SENTRY_DSN - Optional secret key for https://sentry.io error logging
    * PORT - dynamic port variable resolution when testing locally
    * DATABASE_URL - Postgres database url
    
## Contributing

When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change.

Please note we have a [code of conduct](./code_of_conduct.md). Please follow it in all your interactions with the project.

### Issue/Bug Request

 **If you are having an issue with the existing project code, please submit a bug report under the following guidelines:**
 - Check first to see if your issue has already been reported.
 - Check to see if the issue has recently been fixed by attempting to reproduce the issue using the latest master branch in the repository.
 - Create a live example of the problem.
 - Submit a detailed bug report including your environment & browser, steps to reproduce the issue, actual and expected outcomes,  where you believe the issue is originating from, and any potential solutions you have considered.

### Feature Requests

We would love to hear from you about new features which would improve this app and further the aims of our project. Please provide as much detail and information as possible to show us why you think your new feature should be implemented.

### Pull Requests

If you have developed a patch, bug fix, or new feature that would improve this app, please submit a pull request. It is best to communicate your ideas with the developers first before investing a great deal of time into a pull request to ensure that it will mesh smoothly with the project.

Remember that this project is licensed under the MIT license, and by submitting a pull request, you agree that your work will be, too.

#### Pull Request Guidelines

- Ensure any install or build dependencies are removed before the end of the layer when doing a build.
- Update the README.md with details of changes to the interface, including new plist variables, exposed ports, useful file locations and container parameters.
- Ensure that your code conforms to our existing code conventions and test coverage.
- Include the relevant issue number, if applicable.
- You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you.

### Attribution

These contribution guidelines have been adapted from [this good-Contributing.md-template](https://gist.github.com/PurpleBooth/b24679402957c63ec426).

## Documentation

See [Frontend Documentation](🚫link to your frontend readme here) for details on the fronend of our project.
🚫 Add DS iOS and/or Andriod links here if applicable.
"
BloomTech-Labs/nutrition-tracker-fe,JavaScript,"# NutriJournal

You can find the deployed project at [getnutrijournal.com](http://www.getnutrijournal.com).

# Contributors

|                                         [Chaz Rowe](https://github.com/chazr88)                                          |                                        [Joseph Luna](https://joseph-luna-portfolio.netlify.com)                                         |                                                                                          [Jimmy McBride](https://jimmymcbride.me)                                                                                           |                                      [Alejandro Mejia](https://compassionate-joliot-2c1114.netlify.com/)                                       |                                        [Will Ediger](https://github.com/willediger)                                         |                                        [Dave Vazquez](https://github.com/dave-vazquez)                                        |                                                                                                                                                        [Izzy Gonzalez-Brooks](https://github.com/israelgonzalezb)                                                                                                                                                         |                                        [Alyssa Saez](https://github.com/AlyssaSaez)                                        |
| :----------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------: |
| [<img src=""https://ca.slack-edge.com/T4JUEB3ME-UG81USDEZ-032c4f65390f-512"" width = ""200"" />](https://github.com/chazr88) | [<img src=""https://ca.slack-edge.com/T4JUEB3ME-UFPQNAWGM-f9eca12accb9-512"" width = ""200"" />](https://joseph-luna-portfolio.netlify.com) |                                                    [<img src=""https://ca.slack-edge.com/T4JUEB3ME-UFTKAJ542-10bd26e82a74-512"" width = ""200"" />](https://jimmymcbride.me)                                                    | [<img src=""https://ca.slack-edge.com/T4JUEB3ME-UHP1KM82J-c62ca48d2cc2-512"" width = ""200"" />](https://compassionate-joliot-2c1114.netlify.com/) | [<img src=""https://ca.slack-edge.com/T4JUEB3ME-UD8J8BS1G-d88134753726-512"" width = ""200"" />](https://github.com/willediger) | [<img src=""https://ca.slack-edge.com/T4JUEB3ME-UG7GF20RH-3a4e10af9adb-512"" width = ""200"" />](https://github.com/dave-vazquez) |                                                                                                                     [<img src=""https://ca.slack-edge.com/T4JUEB3ME-UFKPLSBA4-dbe33590e896-512"" width = ""200"" />](https://github.com/israelgonzalezb)                                                                                                                      |  [<img src=""https://avatars0.githubusercontent.com/u/47366310?s=400&v=4"" width = ""200"" />](https://github.com/AlyssaSaez)  |
|               [<img src=""https://github.com/favicon.ico"" width=""15""> chazr88](https://github.com/chazr88)                |                     [<img src=""https://github.com/favicon.ico"" width=""15""> joeluna17](https://github.com/joeluna17)                     |                                                            [<img src=""https://github.com/favicon.ico"" width=""15""> JimmyMcBride](https://github.com/JimmyMcBride)                                                            |                     [<img src=""https://github.com/favicon.ico"" width=""15""> aalejandromr](https://github.com/aalejandromr)                      |              [<img src=""https://github.com/favicon.ico"" width=""15""> willediger](https://github.com/willediger)              |             [<img src=""https://github.com/favicon.ico"" width=""15""> dave-vazquez](https://github.com/dave-vazquez)             |                                                                                                                                [<img src=""https://github.com/favicon.ico"" width=""15""> israelgonzalezb](https://github.com/israelgonzalezb)                                                                                                                                |             [<img src=""https://github.com/favicon.ico"" width=""15""> AlyssaSaez](https://github.com/AlyssaSaez)              |
|       [ <img src=""https://image.flaticon.com/icons/svg/2039/2039083.svg"" width=""15""> ](https://github.com/chazr88)       |     [ <img src=""https://static.licdn.com/sc/h/al2o9zrvru7aqj8e1x2rzsrca"" width=""15""> ](https://www.linkedin.com/in/joseph-luna-dev)     | [ <img src=""https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg"" width=""15""> ](https://dev.to/jimmymcbride) [ <img src=""https://image.flaticon.com/icons/svg/733/733579.svg"" width=""15""> ](https://twitter.com/McBride1105) |               [ <img src=""https://image.flaticon.com/icons/svg/2039/2039083.svg"" width=""15""> ](https://github.com/aalejandromr)                |       [ <img src=""https://image.flaticon.com/icons/svg/733/733579.svg"" width=""15""> ](https://twitter.com/willediger)        |       [ <img src=""https://image.flaticon.com/icons/svg/2039/2039083.svg"" width=""15""> ](https://github.com/dave-vazquez)       | [ <img src=""https://static.licdn.com/sc/h/al2o9zrvru7aqj8e1x2rzsrca"" width=""15""> ](https://www.linkedin.com/in/israel-gonzalez-brooks-15173a101/)[ <img src=""https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg"" width=""15""> ](https://dev.to/israelgonzalezb) [ <img src=""https://image.flaticon.com/icons/svg/733/733579.svg"" width=""15""> ](https://twitter.com/izzyz) | [ <img src=""https://static.licdn.com/sc/h/al2o9zrvru7aqj8e1x2rzsrca"" width=""15""> ](https://www.linkedin.com/in/AlyssaSaez) |

<br>
<br>

![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)
![GitHub package.json dependency version (prod)](https://img.shields.io/github/package-json/dependency-version/Lambda-School-Labs/nutrition-tracker-fe/firebase)
![GitHub package.json dependency version (prod)](https://img.shields.io/github/package-json/dependency-version/Lambda-School-Labs/nutrition-tracker-fe/react)
![GitHub package.json dependency version (prod)](https://img.shields.io/github/package-json/dependency-version/Lambda-School-Labs/nutrition-tracker-fe/redux)
![GitHub package.json dependency version (prod)](https://img.shields.io/github/package-json/dependency-version/Lambda-School-Labs/nutrition-tracker-fe/styled-components)
![GitHub package.json dependency version (prod)](https://img.shields.io/github/package-json/dependency-version/Lambda-School-Labs/nutrition-tracker-fe/reactstrap)
[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)

## Project Overview

A web application that allows users to track the food that they consume and which provides a visualization of eating patterns and nutritional data.

### Key Features

- Ability to sign up with email address or Google account
- Input info for Body Mass Index (BMI) calculation then determine their daily target caloric intake though activity level
- A way to update user info weekly to calculate progress on user set weight goals

## Tech Stack

### Front end built using:

#### React

- Makes writing components easy
- Ease of component reuse
- Mature dependency, informational and community ecosystem

#### Styling

##### bootstrap

- Allowed quick prototyping
- Various pre-built components
- Mature ecosystem

##### reactstrap

- Controllable pre-built react components

##### normalize.css

- Normalize browser styles
- Increased style consistency across different browsers

##### styled-components

- Allowed us to create components with applied styles and reuse them throughout the app
- Allowed us to create extensible higher-order components to apply styling

#### State management and Routing

##### redux

- Allowed us to manage complexity of state by keeping data in a single store as data changed throughout the app
- Mature ecosystem, high adoption rate among react community

##### redux-thunk

- Allows us to write action creators that dispatch asynchronously or conditionally

##### redux-logger

- Makes redux actions traceable and improves debuggability

##### react-router 

- Allowed us to conditionally render componets based on the URL the user is visiting
- Improved UX as it allows the app to behave in the way most websites behave and the way most users expect, i.e. as if there was a folder structure to the application

### Front end deployed to Firebase

- `firebase-tools` used to set up Firebase hosting and auth

#### [Back end](https://github.com/Lambda-School-Labs/nutrition-tracker-be) built using:

##### Express

- point one
- point two
- point three

##### PostgreSQL

- point one
- point two
- point three

# APIs

## Authentication

We used Firebase Authentication for user authentication and account creation. We used the Email/Password capability and the Google Account login method as well.

Details on how Firebase Authentication works can be found [here](https://firebase.google.com/docs/auth/web/start).

## API Documentation

Our app's API's are documented in Postman collections [here](https://nutrijournal.postman.co/workspaces/3f11e883-1e39-496e-ac06-063bb81be931/collections).

# Environment Variables

In order for the app to function correctly, the user must set up their own environment variables. There should be a .env file containing the following:

    *  REACT_APP_FIREBASE_KEY - this is your Google Firebase key, which can be generated in the [Google Firebase Console](https://console.firebase.google.com)
    *  REACT_APP_FIREBASE_DOMAIN - when you set up your Firebase project, this information will be in the dashboard
    *  REACT_APP_FIREBASE_DATABASE - in the Firebase dashboard
    *  REACT_APP_FIREBASE_PROJECT_ID - in the Firebase dashboard
    *  REACT_APP_FIREBASE_STORAGE_BUCKET - in the Firebase dashboard
    *  REACT_APP_FIREBASE_SENDER_ID - in the Firebase dashboard
    * REACT_APP_FIREBASE_APP_ID - in the Firebase dashboard

# Content Licenses

| Image Filename | Source / Creator | License                                                                      |
| -------------- | ---------------- | ---------------------------------------------------------------------------- |
| default-user-pic.jpeg    | Artist   | [Creative Commons](https://google.com) |
| Back SVG    | Artist   | [Creative Commons](https://google.com) |
| Calendar SVG    | Artist   | [Creative Commons](https://google.com) |
| Daily Log SVG    | Artist   | [Creative Commons](https://google.com) |
| Email SVG    | Artist   | [Creative Commons](https://google.com) |
| Facebook SVG   | Artist   | [Creative Commons](https://google.com) |
| Left Carot SVG   | Artist   | [Creative Commons](https://google.com) |
| Progress SVG    | Artist   | [Creative Commons](https://google.com) |
| Recipe SVG  | Artist   | [Creative Commons](https://google.com) |
| Right Carot SVG    | Artist   | [Creative Commons](https://google.com) |
| Ruler SVG   | Artist   | [Creative Commons](https://google.com) |
| Ruler SVG   | Artist   | [Creative Commons](https://google.com) |
| Scale SVG   | Artist   | [Creative Commons](https://google.com) |
| Scanner SVG    | Artist   | [Creative Commons](https://google.com) |
| Settings SVG    | Artist   | [Creative Commons](https://google.com) |



# Testing

Testing was done with [`jest`](https://jestjs.io/en) and [`enzyme`](https://airbnb.io/enzyme/), along with mutation tests using [`stryker`](https://stryker-mutator.io/). Jest and enzyme allowed us to create more dynamic tsts built around our redux framework. Stryker helped us increase the quality and depth of tests by substituting variable and functions with fake data, then checking if tests passed or failed with the substituted data.

# Installation Instructions

`$ yarn install`

## Other Scripts

`$ yarn start` - starts the production server

`$ yarn test` - runs Jest tests in watch mode

# Contributing

When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change.

Please note we have a [code of conduct](./CODE_OF_CONDUCT.md). Please follow it in all your interactions with the project.

## Issue/Bug Request

**If you are having an issue with the existing project code, please submit a bug report under the following guidelines:**

- Check first to see if your issue has already been reported.
- Check to see if the issue has recently been fixed by attempting to reproduce the issue using the latest master branch in the repository.
- Create a live example of the problem.
- Submit a detailed bug report including your environment & browser, steps to reproduce the issue, actual and expected outcomes, where you believe the issue is originating from, and any potential solutions you have considered.

### Feature Requests

We would love to hear from you about new features which would improve this app and further the aims of our project. Please provide as much detail and information as possible to show us why you think your new feature should be implemented.

### Pull Requests

If you have developed a patch, bug fix, or new feature that would improve this app, please submit a pull request. It is best to communicate your ideas with the developers first before investing a great deal of time into a pull request to ensure that it will mesh smoothly with the project.

Remember that this project is licensed under the MIT license, and by submitting a pull request, you agree that your work will be, too.

#### Pull Request Guidelines

- Ensure any install or build dependencies are removed before the end of the layer when doing a build.
- Update the README.md with details of changes to the interface, including new plist variables, exposed ports, useful file locations and container parameters.
- Ensure that your code conforms to our existing code conventions and test coverage.
- Include the relevant issue number, if applicable.
- You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you.

### Attribution

These contribution guidelines have been adapted from [this good-Contributing.md-template](https://gist.github.com/PurpleBooth/b24679402957c63ec426).

## Documentation

See [Backend Documentation](https://github.com/Lambda-School-Labs/nutrition-tracker-be/blob/master/README.md) for details on the backend of our project.

### Additional documentation

[Product Canvas](https://www.notion.so/Nutrition-Tracker-43bf4b85243d48aaa56c05ab6dbfdc23)

[Figma Prototype - Canvas 1.0 - (bootstrap, no added styles)](https://www.figma.com/file/y1CHPrRYVXDkP2PRHMdGl9/NutraJournal?node-id=2%3A78)

[DB Schema](https://dbdesigner.page.link/vdm7)

[Trello Board](https://trello.com/c/xQH6Q8Iw/77-rc-1-technical-research)
"
picsoung/node-nutritionix,JavaScript,"# Nutritionix package for Node.js
[![Build Status](https://travis-ci.org/picsoung/sleep-sort.png?branch=master)](https://travis-ci.org/picsoung/sleep-sort)

This is a simple wrapper for the [Nutritionix](www.nutritionix.com) API.

[Nutritionix](www.nutritionix.com) is a database of nutrition facts of every food item.

# Installing

`npm install nutritionix`

# Developer Portal

To use this package you need to get API keys form [Nutritionix API portal](https://developer.nutritionix.com).

The documentation of the API could be found [here](https://developer.nutritionix.com/docs/v1_1)

# Usage

```javascript
var Nutritionix = require('nutritionix');
var nutri = new Nutritionix('YOUR_API_KEY','YOUR_APP_ID');

//Search for a brand named coca-cola
nutri.searchBrand({query:""coca-cola""},function(result){
	console.log(result);
});

//Search nutrition fact of an item with barcode = 52200004265
// here it corresponds to Bay cereals for Beet nuts brand
nutri.getItemByUPC(""52200004265"",function(result){
	console.log(result);
});
```
[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/picsoung/node-nutritionix/trend.png)](https://bitdeli.com/free ""Bitdeli Badge"")
"
kathryneh/nutrition,JavaScript,"The administrator manual is intended for the person setting up the system. This needs to include all software and hardware dependencies, download instructions, and any hardware set-up instructions. This is the place to document what systems have been tested, what the expected compatabilities are and any known incompatabilities. If the administrator needs to set up ids and passwords before the system is fully deployed, this needs to be covered in this manual. The administrator manual should include a complete set of easy-to-follow instructions of how to deploy the system in a new environment or how to redeploy the system if it needs to be restarted or refreshed. You again need to be cognizant of the skill level of the administrator. You can assume that it is an adult, but given the intended audience, you must determine the appropriate level of skills that you can assume. This again should be defined in your user descriptions.

Greetings! Thank you for using NutruitionDB, a creation of the COMP 523: Software Engineering course. Authors: Katie Hawthorne (kathryne), Tommy Ferguson (atfergus), Gautam Sanka (gausanka). 

In this document, we will walk you through the process of setting up NutrutionDB on your own server. 

System Requirements:
--PHP
--MySQL
--Public Server Space
--Google Drive  

Dependencies:

1. Make sure that you have PHP installed on your server. This system has been tested and is known to be compatible with PHP version 5.3.15. The installation of PHP is outside the scope of this administrator manual - please check with your server admin to go through this process. 

2. Ensure that you have access to a server running MySQL. Please check with your server administrator to set up a database and provide access to this. 

4. You will need a Google Drive account to store photos. 

3. As NuTRUtion is a web-based application, you will need a server that is publicly accessible. You may need to work with your server admin to ensure that the file space has the correct file permissions and access rights. 

Setting Up NuTRUtion: 
1. Setting up the database
To set up the NuTRUtion database, run the nutritiondb.sql script when logged into a machine running MySQL. This should be performed after creating your database and logging into the database. See your server admin if you need information about login and access information for your database. This script will create all of the tables used in the NuTRUtion web application. 

2. Setting up the website
To set up the website, copy the entire nutrition folder into a publicly-readable folder on your server running PHP. This may be nested however is desirable for your URL structure. You will also need to modify the file dbconnect.php (in the utils folder) to reflect the correct login and credentials for your MySQL server. In this file, modify the lines that define the $host, $username, $password, and $database. You may need to ask your server admin for this information. Replace the values in strings with the correct values that represent your setup. 

3. Setting up Google Drive
To set up the Google Drive Account, create a Google Account. The current system is using the nutrutionation Google account. Go to http://drive.google.com and create a new folder. The new folder is to be created with the setting that it is publicly accessible on the internet. This setting will then extend to any images that are then subsequently added to the folder. The folder will now have a identifier that can be used to find the image files on the web.

Editing NuTRUtion System Settings:
1. Changing verification
After your server is up and running, navigate to the Settings page and scroll down to the Admin Settings section. There is an input box that allows you to enter a numerical value. This value represents the number of agreeing submissions that must be captured before a value is considered to be correct from user input data. 

Using NuTRUtion
1. Adding data
After your server is up and running, navigate to the Settings page and scroll down to the Admin Settings section. To add data to the NuTRUtion database, you should have a .csv (comma separated value) file that contains data collected from nutrition labels that have been OCRed. Remove the first line of column headings if present, and then upload the file. You should see a success statement after the page reloads indicating that the file has been successfully imported to the database. 

2. Adding photos
The photos should be added to the Google Drive Account at http://www.drive.google.com with the username of nutrutionnation. The folder NNImages contains the existing images and the new images need to be added to this folder. To upload, press on the red upload button on the top left and select the images files to be uploaded. 

3. Retrieving data
After your server is up and running, navigate to the Settings page and scroll down to the Admin Settings section. Click on the button that indicates that you can download completed nutrition label information, and you will receive a .csv file of all labels that have been successfully corrected. This file can then be imported into Excel or your favorite analysis tool. 

4. Viewing user activity 
Navigating to the Settings page, scroll down and you will find a drop-down list of all the users in the database. Selecting a user will provide their details: id, username, number of submissions and their admin status. 

Correcting Nutrition Data:
A more detailed, with pictures, guide to correcting nutrition data can be found at help.php when navigated to from your web browser running a successfully deployed version of NuTRUtion. 

    Sign up for an account.
    Log in or use the site as a guest.
    Compare user values in the table to the images of a nutrition label.
        If the value is correct and matches the image of a nutrition label, click the ""correct"" checkbox.
        If the value is not correct, edit the value in the input box.
        If a value is zero, by default it isn't added to the nutrition label table. 
        If a value is missing from the nutrition label input data, but is present in the image, click to add it.
    Continue down the nutrition label, and submit it at the end.
    Repeat! Thank you for participating in NuTRUtion!"
openfoodfacts/openfoodfacts-dart,Dart,"![Pub Version](https://img.shields.io/pub/v/openfoodfacts?&colorB=green)
[![likes](https://badges.bar/openfoodfacts/likes)](https://pub.dev/packages/openfoodfacts/score)
[![popularity](https://badges.bar/openfoodfacts/popularity)](https://pub.dev/packages/openfoodfacts/score)
[![pub points](https://badges.bar/openfoodfacts/pub%20points)](https://pub.dev/packages/openfoodfacts/score)

# Open Food Facts - Dart
Dart package for the Open Food Facts API. Easily access to more than 1.9 million products from all around the world.
Open Food Facts is powered by contributors from around the world and is constantly growing thanks to them.

## How to use ?
You can find the full documentation here : [Documentation](https://github.com/openfoodfacts/openfoodfacts-dart/blob/master/DOCUMENTATION.md).
You can find automated code documentation here:  [Documentation](https://openfoodfacts.github.io/openfoodfacts-dart/).

## General principles
- You can look for information about products, including many useful computed values. 
- If you can't get the information on a specific product, you can get your user to send photos and data, that will then be processed by Open Food Facts AI and contributors to get the computed result you want to show them.
- You can also implement the complete flow so that they get immediately the result with some effort on their side.

## Contributing 

### If your users do not expect a specific result immediately (eg. Inventory apps)
- Send photos (front/nutrition/ingredients/packaging): most painless thing for your users
- The Open Food Facts AI Robotoff will generate some derived data from the photos
- Overtime, other apps, and the Open Food Facts community will fill the data gaps

### If your users do expect a result immediately (eg Nutrition apps, Scoring apps…):
- Send nutrition facts + category > get the Nutri-Score
- Send ingredients > get the NOVA group (about food ultra-processing), additives, allergens, normalized ingredients, vegan, vegetarian…
- Send category (strict minimum) + labels + origins of ingredients + packaging (photo and text) > get the Eco-Score (about environmental impact)

## Open Data Licence
The database in under the OdBL. This means attributing the source and also contributing back any additions (photos, data), which this package makes easy to do.
You can check the terms of use here : [Terms of use](https://world.openfoodfacts.org/terms-of-use).

## List of current features

### GENERAL
- [x] Multilingual (180 languages are supported)
- [x] Create users
- [x] Check if users exist   

### READ
- [x] Product: you can retrieve information about products
- [x] Product images (get product image by field, size and language, current fields are: Front, Ingredients, Nutrition, Packaging)
- [x] Additives, Allergens, Environment impact, Ingredient analysis, Nutrient levels, Nutrition facts (incl. micro-nutrients)
- [x] Language dependant fields (like ingredients, product name, packaging text)
- [x] Eco-Score, Nutri-Score, NOVA groups
- [x] Translated, high-level and customizable product information (Attributes)
- [x] Product completion status

### PERSONALIZATION
- [x] Recommended Daily Intakes
- [x] Translated, high-level and customizable product information (Attributes)
- [x] Autocompleting for the user inputs, by giving suggestions for (Labels, categories, ingredients, additives, traces ...)

### SEARCH
- [x] search products by tags
- [x] search products with / without additives
- [x] search products with keywords
- [x] Personalized search

### WRITE
- [x] Save product to Open Food Facts 
- [x] Send images
- [x] User comments and auth
- [x] Anonymous photo upload

### ML
- [x] Robotoff support
- [x] Extract ingredients from ingredients image: User can extract the ingredients text if it is missing
- [x] Get the OCR of the ingredients photo (for validation purposes)


## Roadmap
List of new APIs to implement: https://github.com/openfoodfacts/api-documentation/issues

### READ
- [ ] ???

### WRITE
- [ ] Photo operations (rotate, crop, select, unselect with language awareness)

### Other

## Contribute
There are many ways to contribute, and Open Food Facts has a lot of projects beside this package.
Most of our operations are coordinated through our Slack which you can join here : [Open Food Facts Slack](https://openfoodfacts.slack.com).

Regarding this package, we accept pull requests as well feature requests.

### Testing

Execute the following command from the root of the repository to run the tests:

```
dart test
```


## Authors
* Alexander Schacht - [Grumpf86](https://github.com/Grumpf86)
* Primaël Quémerais - [Reefind](https://gitlab.com/Reefind)
* Marcus Cantu - [Cantum2](https://github.com/Cantum2)
* Adrien Faure - [Adfaure](https://github.com/adfaure)
* Peter Tran-Jørgensen - [peterwvj](https://github.com/peterwvj)
* Mohamed Boussaid - [MohamedFBoussaid](https://github.com/MohamedFBoussaid)
"
unicef-drp/igrowup_update,Stata,"# igrowup_update
Update of IGROWUP Stata Macro Prevalence Module
"
vkarpov15/lean-mean-nutrition-sample,JavaScript,"lean-mean-nutrition-sample
==========================

Just a simple 80's themed food journal

Setup
=====

1) Download [data set](https://s3.amazonaws.com/valeri.karpov.mongodb/usda.nutrition.tgz)

2) Untar data set and run mongorestore

3) Copy nutrition data to `leanmean` database: `db.copyDatabase('usda', 'leanmean', 'localhost')`

4) Create a text index on `description`: `use leanmean; db.nutrition.ensureIndex({ ""description"" : ""text"" });`
"
MarissaB/NutritionWebsite,C#,"﻿Recipe Analyzer - Marissa Berresford
Current Status: 2 May 2014

- Users cannot save changes to an existing recipe

- Users can add, delete, and view recipes from their account
- Users can calculate changes to an existing recipe
- Streamlined navigation further
- Cleaned up user account page
- Cleaned up error messages and labels

Woo! Got a B+ for the final grade!

Website and database were hosted on Windows Azure trial server,
which was taken offline after graduating. Current login credentials
from Web.config do not work and are placeholders."
vincentlinderhof/NutritionTZA,HTML,"# NutritionTZA
"
AndrejsGrocs/CPW,JavaScript,"

![image info](/src/assets/images/CPW.png)


# Chilly Productive workers aka CPW Team presents
# Healify App :banana: :spaghetti: :pineapple:

# [Run App](https://vibrant-williams-96dd0e.netlify.app/)

## Project description


**The website can crash during the sessions, because search amount is limited from API provider**

```
This is a website where you can enter any food or product name
and get the nutrition data about it.
Also user is receiving the ""Nutrition Score"" of this product,
which is showing how useful this product is for you and your
health.
If you got ""A"" you can go to the gym now,
but if you have ""E"" it is better to wait some time. 
```



## About the team

```
This application is created by creative team,
during the final modules of the studying process in
""Digital Career Institute"" in Fullstack Web Development course

```
**Team members**

Peony Langner - Backend Team :  [Linked In](https://www.linkedin.com/in/peony-langner-6808b218a/)</br>

Robin Skladny - Frontend Team : [Linked In](https://www.linkedin.com/in/robin-skladny-647a1b229/)</br>


Andrejs Grocs - Frontend/Backend : [Linked In](https://www.linkedin.com/in/andrejs-grocs-andrey-detochkin-ab2106141) </br>

Riccardo Limiti - Designer : [Linked In](https://www.linkedin.com/in/riccardo-limiti-a81061226/) </br>

Lars Nemeth - Backend Team :  [Linked In](https://www.linkedin.com/in/lars-nemeth-a2b28ab4/)</br>

Lukasz Trzcinski - Frontend Team : [Linked In](https://www.linkedin.com/in/lukasz-trzcinski-berlin/) </br>


## :raised_hands: :pray: 
**Big Special Thanks to Natalia Maca for help in design.** [Natalia Maca Website](https://nataliamaca.com/)</br>
**and to DCI teachers: Franco Speziali, Gilles Vanhaecke, and Sebastian Salas Laurens for consulting us during this wonderful project.**

"
andgly95/Tailored-Nutrition,JavaScript,"# Tailored-Nutrition
A weight loss app that caters to your lifestyle
"
iisharvard/platemate,TeX,"platemate
=========

PlateMate: crowdsourcing nutritional analyses from food photographs

## Setup

### Install requirements
    sudo apt-get install libjpeg-dev
    pip install -r requirements.txt

This should install:

+ Django 1.2.5
+ Pillow (latest)
+ Boto (latest)
+ httpagentparser (latest)
+ oauth latest

## Modify Local Settings
In the platemate directory modify `local_settings.example.py` to your paths and rename to `local_settings.py`. In the platemate directory, add your Amazon Mechanical Turk keys in `amt_keys.example.py` and save it as `amt_keys.py`

## Create Database Tables
From the platemate directory, run:
    python manage.py syncdb --noinput

## Add an admin user
    python manage.py createsuperuser
    //TODO add the user to initial data fixutre (or is there one?)

## Run the project
    python manage.py runserver 0.0.0.0:8000

or
    ./run.sh


## Create HITs on Amazon MTurk sandbox
    python experiment.py BATCH_NAME sandbox

where `BATCH_NAME` is a subdirectory under `static/uploaded`. This is hardcoded and specifying any other path will break things.

## Issues

### Module no found
Cause: Likely an import statement in the module is failing because of a missing library.
Fix: Try each import in the module individually.

### Database Locked
It seems that when both the runserver and the experiment scripts are running, there is a race condition on the database that would crash one script if the other is accessing the DB.

### Accessing the database through adminer on iis-dev:

http://adminer.iis-dev.seas.harvard.edu/adminer/

### Deleting all hits from mturk AND resetting the database

python cleanup.py flush
"
israelsanche/TRACKR,HTML,"# TRACKR
Nutrition Tracking
App to choose your nutrition plan and track daily intake.

    -User will choose goals
    -User will select types of foods they prefer
    -App will suggest plan
    -User will track foods
    -Total Weekly Calories/Macros compared to goal


APIs: Nutritionix - Nutrition Database https://rapidapi.com/msilverman/api/nutritionix-nutrition-database

UIs: Pure: http://purecss.io, Tachyons: http://tachyons.io, Materialize: https://materializecss.com

Database: Sequel and Heroku

Future App updates:

    -Login ability
    -Multiple User capability
    -BMI Tracking
    -Fitness plans and tracking

Project 2 Created by: Israel, Jo, Vanessa, Will."
CamDavidsonPilon/McData,Python,"# McData

A data repository for fast food nutrition and ingredients. 

To scrape historic nutritional information, use the [waybackpack](https://github.com/jsvine/waybackpack) command line tool. To get unique McDonald's nutritional PDFs until 2018, run the following from the command line:

- `pip install waybackpack`
- `waybackpack http://nutrition.mcdonalds.com/usnutritionexchange/nutritionfacts.pdf -d DESTINATIONDIRECTORY --to-date 2018 --uniques-only`

Note: McDonald's previously stored its nutritional PDFs [here](http://nutrition.mcdonalds.com/getnutrition/nutritionfacts.pdf) 
>>>>>>> d8f72402c21855e426a72c2ba4ef46875b2ed780
"
myint/cronometer,Java,"==========
cronometer
==========

.. image:: https://travis-ci.org/myint/cronometer.svg?branch=master
    :target: https://travis-ci.org/myint/cronometer
    :alt: Build status

`cronometer` is a nutrition tracking tool. This is a fork of the original_.

.. _original: http://sourceforge.net/projects/cronometer


Build on OS X
=============

::

    $ ./build_osx.bash



Build and start on Linux
========================

::

    $ ant
    $ ./start_cronometer.sh


Download
========

https://github.com/myint/cronometer/releases


Importing new USDA food database
================================

As an example, below is the procedure that was used to upgrade from ``SR26`` to
``SR28``.

Unzip the old processed database::

    $ unzip lib/usda_sr26.jar
    $ mv usda_sr26 usda_sr28

Update ``src/ca/spaz/cron/datasource/USDAImport/USDAImporter.java`` to point
to ``sr28``.

Run the importer to update the old processed data::

    $ java -classpath lib/cronometer.jar \
        ca.spaz.cron.datasource.USDAImport.USDAImporter < sr28.zip

Append deleted items from the old ``foods.index`` into the new
``deprecated.index``::

    $ ./scripts/deprecated.py usda_sr26/foods.index usda_sr28/foods.index \
         >> usda_sr28/deprecated.index

Create the new JAR::

    $ rm lib/usda_sr26.jar
    $ zip -r lib/usda_sr28.jar usda_sr28

Update ``src/ca/spaz/cron/datasource/USDAFoods.java`` to point to the new JAR.
And update the OS X app to point to the new JAR.
"
terrenjpeterson/caloriecounter,JavaScript,"# Calorie Counter Chatbot

This is a Lex based chatbot that will calculate calories made by trips to different fast food restaurants. It is enabled from a [FB Messenger Chatbot](https://www.facebook.com/fastfoodcaloriecounter/) that can be accessed from the Facebook Page, or through the Messenger App on your phone.

**Table of Contents**

- [How does this use the NLU models from Lex?](#using-nlu-models)
- [What custom slots are used by the NLU?](#custom-slots)
- [How can multiple slots be used in a single intent?](#multiple-slots-in-a-single-intent)
- [What are the lambda functions called by the bot?](#rules-logic-in-lambda)
- [Where does it get its data from?](#data-lookup-tables)
- [How do you create large custom slots?](#large-custom-slots)
- [How does information get shared between intents?](#sharing-session-data-between-intents)
- [How do you create buttons for the user to click on?](#creating-buttons-in-user-interface)
- [What does the deployment model look like?](#deployment-pipeline)
- [Does a bot have a personality?](#add-personality-to-the-bot)
- [What is the website code for?](#website-in-progress)

## Using NLU Models
This bot uses AWS Lex - a service that contains the intelligence to be able to decipher user requests and trigger intents based on data provided in the models. The intents then invoke lambda functions that contain business logic specific to the intent.

![](https://s3.amazonaws.com/fastfoodchatbot/media/LexArchitecture.png)

Currently there are many different intents that the NLU process sorts into.  Here are the ""core functions"" of the bot.
- FoodTypeOptions (Sample utterance - What are my food options?)
- GetCalories (Sample utterance - How many calories in a Big Mac?)
- GetMexicanFoodCalories (Sample utterance - How many calories in a Chicken Burrito?)
- GetNuggetsCalories (Sample utterance - How many calories in 20 Chicken Nuggets?)
- GetPizzaCalories (Sample utterance - How many calories in 2 slices of Pepperoni Pizza at Papa Johns?)
- GetChineseCalories (Sample utterance - How many calories in a Kung Pao Chicken?)
- GetChickenCalories (Sample utterance - How many calories in a piece of Original Recipe Chicken?) 

There are also intents that complement the core features.
- MoreDetails (Sample utterance - More details. Note: this can only be invoked after prior requests are made in the conversation as it's reading data from the session).
- DailyIntakeAnalysis (Sample utterance - analyze my meal. Similar to more details, this uses session data, so must follow one of the prior requests.
- WhatPizzaTypes (Sample utterance - What types of pizza are there?)
- WhichRestaurants (Sample utterance - List of restaurants.)
- CalculateBMR (Sample utterance - What is my daily recommended calorie intake?)
- GetCarbs (Sample utterance - How many carbs in this?)

Then there are intents that form the 'personality' of the bot. These were created based on real user usage, and prevent the generic error message from being used to respond.
- EndConversation (Built-in intent - uses AWS sample utterances like - Stop)
- Introduction (Sample utterances - Hello, Get Started, Send Message)
- Thanks (Sample utterances - Thanks, Goodbye, Bye)
- Complement (Sample utterances - I love you)
- Critic (Sample utterances - U suck)
- Shock (Sample utterances - wow, ouch)
- MyName (Sample utterances - what is your name)
- HelpRequest (Built-in intent - uses AWS sample utterances like - Help)
- NewRestaurant (Sample utterance - New restaurant. This clears out the session.)

Within each of the intents, sample utterances are provided that construct the potential sentances that a user may provide. The value of the slot (i.e. Large Fry) gets passed to the lambda function as a unique attribute.

You can get the summary information from the AWS CLI by executing the following command.

```sh
aws lex-models get-bot --name FastFoodChecker --version-or-alias PROD
```

## Custom Slots
It is a combination of the sample utterances and slots that determine which intent the NLU models will invoke. These are maintained in Lex, and are used for training the models. 

Currently, here are the custom slots that are used by the intents.
- FoodOptions (sample values: Big Mac, Smokehouse Brisket Sandwich, etc. This has hundreds of entries, and is generated from the foods.json data object).
- DrinkOptions (sample values: Water, Iced Tea, Large Diet Lemonade, etc. This has many entries, and is generated from the drinks.json data object).
- FastFoodRestaurants (sample values: Chick-fil-A, McDonald's, Wendy's)
- FoodType (sample values: Burger, Salad, Chicken)
- ExtraItems (sample values: Large Fry, Sugar Cookie, Side Salad)
- MexicanFoodTypes (sample values: Burrito, Gordita, Soft Taco)
- Preparation (sample values: Grilled, Fried, Baked)
- Protein (sample values: Steak, Chicken, Black Bean)
- PizzaRestaurants (sample values: Dominos, Papa John's, Little Caesars)
- PizzaSize (sample values: Small, Medium, Large)
- PizzaType (sample values: Sausage, Pepperoni, Honolulu Hawaiian)
- ChineseEntree (sample values: Orange Chicken, Kung Pao Chicken)
- ChineseSide (sample values: Fried Rice, Mixed Vegetables)
- ChineseAppetizer (sample values: Egg Roll, Spring Roll)
- FoodAdjustment (sample values: Add Guacomole, No Cheese)
- DressingOptions (sample values: Italian, Balsamic Vinaigrette)
- DippingSauce (sample values: Honey Mustard, Sweet and Sour)
- ChickenPart (sample values: Drumstick, Breast, Wing)
- ChickenStyle (sample values: Original Recipe, Extra Crispy)
- ChickenSides (sample values: Mashed Potatoes, Baked Beans)

An item does not need to be specified in the slot for the NLU to place a value into it. However, if the data is sparse, it may degrade how the NLU interprets the user requests.

## Multiple Slots in a Single Intent

Usability of a chatbot requires natural interaction to occur with a user. One key concept is around how to incorporate multiple slots into a single intent.
For example, a user could ask ""How many calories in a Big Mac, Fries, and a Coke?"" That is three different items that each need to be parsed out.
Within this chatbot, the main processing has many different slots that map into intents. For example, here are the slots that map into the GetCalories intent.

![](https://s3.amazonaws.com/fastfoodchatbot/media/slotsExample.png)

There are a couple of items to note in this.

1) In the example request above, the NLU models would parse the data from the utterance into three different slots (Food, Extra, and Drink).

2) The slot order doesn't matter to the parsing, but it does drive what would be the next response (slot 1 - Which Restaurant are you at?)

3) There are two slots that aren't required in this intent - Ketchup and PacketsKetchup. This optional information is asked for if fries is asked for as a side item. This is driven by the code in the Lambda function that is invoked in the Validation code hook.

## Rules logic in lambda
All of the logic in formulating responses to different intents is processed in a series of lambda functions. Which lambda function to invoke is managed within Lex, and set at the intent level. This enables modularity to be built within the application, keeping the functions lightweight.

There are two different spots within Lex that can invoke a lambda function. The first is through basic validation, and the attribute name that identifies it is called invocationSource. 
There are two potential values for this - DialogCodeHook and FulfillmentCodeHook. Here is where these Lambda functions are specified in the Lex Bot.

![](https://s3.amazonaws.com/fastfoodchatbot/media/lambdaHooks.png)

The first dropdown is the Validation, and calls the lambda function every time the bot is called. The attribute that it passes is called DialogCodeHook.
The second dropdown is the Fulfillment, and only called once the mandatory slots have been completed, and the validation from the initial call is complete.
This allows for the functions to be different, enabling better scalability in building the bot.

Here is an overview of each function currently written.

1) lambda.js - the main function that handles the basic validation for queries, sourced only in DialogCodeHook mode.

2) calculate.js - calculating the response for the actual calories in a meal is handled by this funciton, and is sourced by a FulfillmentCodeHook.

3) pizza.js - handles intents around calculating calories in a pizza, including the intent - WhatPizzaTypes.

4) misc.js - handles simple intents like help, the introduction, and more details around a meal.

5) chinese.js - handles intents around chinese food, and coupling the different slots together to form a meal.

## Data lookup tables
The core functionality of this bot is to be able to answer queries of how many calories are in different meals. While the slots that Lex uses are helpful in training the NLU models, they don't have the ability to serve as lookup files. 
That's where the json objects come in that are stored in the [/src/data/](https://github.com/terrenjpeterson/caloriecounter/tree/master/src/data) folder.

Here is a sample of the format.
```sh
[
    {
        ""restaurant"":""Chipotle"",
        ""foodItems"":[
            {""foodName"":""Chicken Burrito"", ""foodType"":""Burrito"", ""protein"":""chicken"", ""calories"":975},
            {""foodName"":""Steak Burrito"", ""foodType"":""Burrito"", ""protein"":""steak"", ""calories"":945},
            {""foodName"":""Carnitas Burrito"", ""foodType"":""Burrito"", ""protein"":""carnitas"", ""calories"":1005},
```

The lambda functions refer to these objects to respond to different queries, and to calculate calorie consumption for the user.

Each food item may be duplicated for different spellings and phrases used to retrieve. For example.

```sh
	    {""foodName"":""Fries"", ""calories"":340},
            {""foodName"":""Fry"", ""calories"":340},
            {""foodName"":""Frys"", ""calories"":340},
	    {""foodName"":""French Fries"", ""calories"":340},
            {""foodName"":""French Fry"", ""calories"":340},
	    {""foodName"":""Medium Fries"", ""calories"":340},
            {""foodName"":""Medium Fry"", ""calories"":340},
```

There are also lookup tables around sauces, dressings, and individual item adjustments. For example.

```sh

[
    {
        ""dressingName"":""Ranch"",
        ""calories"":200,
        ""carbs"":11,
        ""restaurantNames"":[""McDonalds""]
    },
    {
        ""dressingName"":""French"",
        ""calories"":300,
        ""carbs"":22,
        ""restaurantNames"":[""McDonalds""]
    },

```

Given that the NLU models do not correct spelling provided by the user, it's up to the Lambda functions to handle this part of the logic.

## Large Custom Slots

Managing large custom slots can be difficult, particularly if the data is dynamic. The main food lookup has several hundred unique values in it, and growing based on user usage.
The process for creating this slot has been automated, and the data for the custom slot is taken from the [foods.json](https://github.com/terrenjpeterson/caloriecounter/blob/master/src/data/foods.json) data object.
This is done through the AWS CLI that can load these directly from the command line. All of the files are contained in the [slots}(https://github.com/terrenjpeterson/caloriecounter/tree/master/src/slots) directory for reference. 
Here are the steps used to create.

1) The foods.json data object is passed to a lambda function called convertFoodsObjForSlot.
2) The function sorts through the data, eliminates duplicates, then the data is formatted into a simple array with just the entree names.
3) The array is returned and then passed into the AWS CLI using the [put-slot-type](https://docs.aws.amazon.com/cli/latest/reference/lex-models/put-slot-type.html) command.
4) The model is then manually rebuilt via the console and deployed just like any other training activity.

The syntax looks like this.

```sh
# foods.json is the data object that will be passed to the lambda function
request=$(<foods.json)

# invoke the lambda function from the command line and write the output to output.json
aws lambda invoke --function-name convertFoodsObjForSlot --payload ""$request"" output.json

data=$(<output.json)

# invoke lex to create a new version of the FoodEntreeNames custom slot using the data from output.json
aws lex-models put-slot-type --name FoodEntreeNames --checksum <enter latest checksum here> --enumeration-values ""$data"" >> sysout.txt

```

Also, the checksum value is from the prior deployment of the custom slot. You can find the current checksum for a slot by the get-slot-type command.

```sh

# find the latest information about a custom slot
aws lex-models get-slot-type --name FoodOptions --slot-type-version '$LATEST'

```

## Sharing Session Data between Intents

The key to effective long-running conversations between a user and a bot is around managing context of the conversation.
For example, a dialog could go on for several minutes, and invoke many intents.

![](https://s3.amazonaws.com/fastfoodchatbot/media/LongChat.png)

Part of facilitating this is designing a flow of the conversation. Error messages should not be too abrupt, and should lead the user to an alternative query.
The intents should also pass data between one another. This can be accomplished by saving the session data when completing an intent.
This allows the next intent to retrieve the information and not require the user to repeat it with each request.

In the example above, the conversation begins with the user indicating which restaurant they are eating at. This gets persisted in the session by the FoodTypeOptions intent.
The dialog shifts to details of the meal, but the restaraunt name gets saved. Also, the initial response on the calorie count is brief, but offers a more detailed explainatin if the user says 'more details'.
Once again the data gets stored in the session data, and is passed back as part of the Lex framework. Here is example of one of the objects.

```sh
{
    ""messageVersion"": ""1.0"",
    ""invocationSource"": ""FulfillmentCodeHook"",
    ""userId"": ""1712299768809980"",
    ""sessionAttributes"": {
        ""restaurantName"": ""Burger King"",
        ""foodName"": ""Whopper"",
        ""foodCalories"": ""660"",
        ""extraName"": ""Onion Rings"",
        ""extraCalories"": ""410"",
        ""drinkCalories"": ""310"",
        ""drinkName"": ""32 oz. Large Coke"",
        ""totalCalories"": ""1380""
    },
    ""bot"": {
        ""name"": ""FastFoodChecker"",
        ""alias"": ""PROD"",
        ""version"": ""42""
    },
    ""outputDialogMode"": ""Text"",
    ""currentIntent"": {
        ""name"": ""DailyIntakeAnalysis"",
        ""slots"": {},
        ""slotDetails"": {},
        ""confirmationStatus"": ""None""
    },
    ""inputTranscript"": ""Analyze my meal""
}
```

The lambda functions in this bot are completely stateless, so any data from prior invocations must come through the request object.

## Creating buttons in user interface
One of the features in the major chatbot user interfaces (Messenger, Slack, etc.) is buttons. These reduce the effort by the user by providing a series of options like so.
![](https://s3.amazonaws.com/fastfoodchatbot/media/FBMessengerButtons.JPG)

Each messaging platform has their own implementation of this pattern, and [here](https://developers.facebook.com/docs/messenger-platform/send-messages/template/button) is what Messenger uses.
Lex handles the translation to get the buttons into the correct format, and within Lex, the [responseCard](http://docs.aws.amazon.com/lex/latest/dg/lambda-input-response-format.html#lambda-response-dialogAction) attribute needs to be provided with the specifics on the button detail.

## Deployment pipeline
Modifying Lex is done completely through the console. The lambda functions that serve the business logic are hosted in AWS lambda, and are deployed from an EC2 host.

The full deployment script is [/src/build.sh](https://github.com/terrenjpeterson/caloriecounter/blob/master/src/build.sh) but a quick overview can be found in the following instructions.

```sh
# this creates the build package as a zip file containing the code and relevant data objects
zip -r foodbot.zip lambda.js data/restaurants.json data/foods.json data/drinks.json

# this CLI command copies the build package to an s3 bucket for staging
aws s3 cp foodbot.zip s3://fastfoodchatbot/binaries/

# this CLI command takes the package from the s3 bucket, and overlays the lambda function 'myCalorieCounterGreen'
aws lambda update-function-code --function-name myCalorieCounterGreen --s3-bucket fastfoodchatbot --s3-key binaries/foodbot.zip

# this CLI command invokes the lambda function with the data object  read into request, and writes out a response to the testOutput data object.
aws lambda invoke --function-name myCalorieCalculatorGreen --payload ""$request"" testOutput.json
```

1) Create a zip file on the host that acts as the build server. It's from the build server where both the source code and data files are manipulated. The datafiles are then read locally, and whenever they change, a new deployment is created.
2) Upload the zip file to an s3 bucket using the proper AWS CLI commands.
3) Update the existing lambda function with the new package, and using the AWS CLI command, provide the location of the zip file that contains the build package.
4) Execute a test of the lambda function directly with valid sample data. The response object is returned and written to the console as well as a local file.

This process is repeated for each of the lambda functions that are called by Lex. This includes having at least one test condition for each lambda function to ensure that the deployment was done correctly. 

## Add Personality to the Bot

One of the topics in bot design is around having a personality. Something to consider when designing the intents is what are all of the possible questions that a user may ask.
This should include off-topic questions, such as 'what is your name' or emotional responses like 'oh-no' or 'you suck'.
These are easy to code - usually just a simple request-response with no slots involved, and does tend to make the dialogs more natural.

For an example, here is a brief response coded in the [misc.js](https://github.com/terrenjpeterson/caloriecounter/blob/master/src/misc.js) function that responds to if someone asks what the bots name is.
In the models, an utterance of 'what is your name' resolves to this intent.

```sh

if (intentName === 'MyName') {
    console.log(""user requested bot name"");
    return getBotName(intentRequest, callback);
}
...
function getBotName(intentRequest, callback) {
    const sessionAttributes = intentRequest.sessionAttributes || {};

    var botResponse = ""My name is Chuck. I'm a chatbot that helps people sort out "" +
	""fast food options. Talking about food all day makes me hungry!!!"";

    callback(close(sessionAttributes, 'Fulfilled',
        { contentType: 'PlainText', content: botResponse }));
}

```

## Website in progress
As part of the initial effort, I was attempting to get this chatbot published to the slack store. As part of that, I needed to build a website for public support of the app. It's a work in progress, and called caloriecountbot.com. It's hosted by s3, and the source is located in the /website folder.

"
jeffbcross/jc-nutritional-info,JavaScript,"jc-nutritional-info
====================

An AngularJS component to show nutritional information, supporting one level deep of children.

## Usage

### `bower install jc-nutritional-info`

### Add a nutrition list on the scope

```javascript
$scope.nutrition = [{
  name: 'Carbohydrates',
  total: '50mg',
  children: [{
    name: 'Dietary Fiber',
    total: '10g'
  },{
    name: 'Sugars',
    total: '30g'
  }]
}]
```

### And in your template:
```html
<jc-nutritional-info nutrition-data=""nutrition"">
<jc-nutritional-info>
```

## Development

### Run Tests

 * `bower install`
 * `npm install .`
 * `npm test`"
sanjaybasu/nhanesml,Stata,"# Machine learning on nutrition data to predict cardiovascular mortality

Most physicians base decisions about cardiovascular treatment based on a calculation of overall cardiovascular disease risk.

Nutrition is not currently accounted for in cardiovascular risk calculators, despite being a major contributor to cardiovascular risk. Nutrition is commonly measured through 24-hour dietary recalls, which are difficult to summarize and condense into standard metrics to improve cardiovascular risk estimation.

We propose to use deep learning to study the large sparse matrix of nutrition data from the National Health and Nutrition Examination Survey (1999-2010) linked to the National Death Index (2011), to determine how nutrition data may advance cardiovascular mortality prediction beyond traditional risk factors (age, sex, race/ethnicity, systolic blood pressure, blood pressure treatment, tobacco smoking, diabetes status).

We will compare our deep learning approach to four standard metrics of nutritional quality: the Healthy Eating Index (HEI-2015), Alternative Healthy Eating Index (AHEI-2010), the Mediterranean Diet Score (MDS), and DASH Diet Score.

Authors: Anirudh Jain <anirudhj@stanford.edu>, Pranav Samir Rajpurkar <pranavsr@stanford.edu>, Sanjay Basu <basus@stanford.edu>
"
Take-A-Lap/HomeFit,JavaScript,"# HomeFit

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 6.2.3.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `--prod` flag for a production build.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).
"
Bjavillo1059/Nutritional-Value,HTML,"# ClassProject-1-group-of-5

# Nutrion Value

## Description

Health conscious users are often frustrated by the effort it takes to easily determine the NutriVal of their food. Our nutriVal app addresses those needs and provides quick and easy answers. With our app you can search a specific food item and get all the info you need to make a healthy choice.

Our new NutriVal app brings value to your everyday health by keeping proper records of the food you eat.  It will tell you how many calories, protein, carbs, fat, and sodium are in each meal so that you can track what you are putting into your body.A study on variety in nutrition. Whether eating a meal or a snack, it is important to be aware of the VutritiVal of the foods you consume. NutriVal makes tracking and improving your diet simple. It  integrates  to provide you with a complete picture of your nutrition intake throughout the day and over time ...



Motivation for development? - Health improvement 
User story - Always looking for sites that can tell you how much weight of a specific food would give you the ideal NutriVal you’re looking for 

# User want to see the food tyeps 
NutriVal App helps its users to get the most out of their foods.
Food is something that everyone can relate to. It gives us energy, it provides nutrients for our bodies, and tastes great! NutriVal APP helps people become more aware of how many calories are in their food and the NutriVal in each.


## Deployment

[Deployed Page](https://bjavillo1059.github.io/Nutritional-Value/)

<img src=""./assets/img/Project Snippet.PNG"" alt="" img of Project Snippet""/>


## Technology Used

- HTML   Brandon/Carina/Matthew
- CSS    Carina/Matthew
- JavaScript     Brandon/Carina/Matthew
- Foundation JS     Brandon/Carina/Matthew
- Nutritionix API Brandon
- Edamam API Carina

## Process

As User when NutriVal link is opened, a display will show the title ""NutiVal"" to the left of a Navbar and Dropdown links to the right.

- drop downlinks display the two specific subjects that link to descriptions
- all dropdown items are linked to other sites for descriptions
- these dropdown links are the subject of an article that are directly relayed for in the Types of Food and Food Groups
    - website used for these breakdowns is [yes, therapy article:](https://en.yestherapyhelps.com/the-12-types-of-nutrition-and-their-characteristics-12159)

    - Types of Food
        - Meats/Fish
        - Vegetables/Legumes/Beans
        - Fruits
        - Grains
        - Dairy

    - Food Groups 
        - Vegenism
        - Vegetarianism
        - Emotional Eating
        - Sports Nutrition
        - Healthy Eating

A User has the option of inputing a food item in the input section where it reads ""item you are searching for..."", when the item is annotated in the input black the User will then click the ""Search for Info"" button.

- this function will render multiple information from querying API's and will display specific information
- API's used for information gathering:
    - Nutrionix API
        - will aquery API for information value that is normally found on Nutrition labels in the United States
        - infromation will display within the Nutritional Values field
        - a public APP_ID is required for search query
        - a publis API_key is required for search query
        - API only allows 200 search query's daily

    - Edamam API
        - will query API for information value of 4 popular recipes found and will display with the recipe field
        - a public APP_ID is required for search query
        - a publis API_key is required for search query
        - API allows for 10,000 search query's a week

A User can choose to inspect Site Map information and contributors GitHub pages

- the home link and project repo link will link the user to the site project page on GitHub
- links under ""SiteMap""

    - contributors:
        - Carina Diaz
        - Ricardo Hernandez
        - Brandon Javillo
        - Matthew Jaworski
        - Ayele Lintamo
"
Southern-Cross-Plant-Science/cdno,Makefile,"[![Build Status](https://travis-ci.org/Southern-Cross-Plant-Science/cdno.svg?branch=master)](https://travis-ci.org/Southern-Cross-Plant-Science/cdno)
[![DOI](https://zenodo.org/badge/13996/Southern-Cross-Plant-Science/cdno.svg)](https://zenodo.org/badge/latestdoi/13996/Southern-Cross-Plant-Science/cdno)

# Compositional Dietary Nutrition Ontology

The CDNO provides structured terminologies to describe nutritional attributes of material entities that contribute to human diet. These terms are intended primarily to be associated with datasets that quantify concentration of chemical nutritional components derived from samples taken from any stage in the production of food raw materials (including from crops, livestock, fisheries) and through processing and supply chains. Additional knowledge associated with these dietary sources may be represented by terms that describe functional, physical and other attributes. 

Whilst recognising that dietary nutrients within food substrates may be present as complex and dynamic physical and chemical structures or mixtures, CDNO focuses on components typically quantified in an analytical chemistry laboratory. The primary CDNO class ‘dietary nutritional component’ contains hierarchical sets of terms organised to reflect commonly used classifications of chemical food composition. This class does not represent an exhaustive classification of chemical components, but focuses on structuring terms according to widely accepted categories. This class is independent of, but may be used in conjunction with, classes that describe ‘analytical methods’ for quantification, ‘physical properties’ or ‘dietary function’. Quantification data may be used and reported in research literature, to inform food composition tables and labelling, or for supply chain quality assurance and control. 

More specifically, terms within the ‘nutritional component concentration’ class may be used to represent quantification of components described in the ‘dietary nutritional component’ class. Concentration data are intended to be described in conjunction with post-composed metadata concepts, such as represented by FoodOn ‘Food product by organism’, which derives from some food or anatomical entity and a NCBI organismal classification ontology (NCBITaxon) entity. In addition, one or more CDNO analytical method term may be used to describe the process used to acquire concentration data, where these terms may be inherited from the Ontology for Biomedical Investigations (OBI), the Chemical Methods ontology (CHMO) or the Physico-chemical Methods and Properties ontology (FIX). In combination these formalise the language used to describe sample source and status in the crop production/food supply chain.  

Additional knowledge relating to interactions of food components with human physiological function is embodied within the CNDO dietary function class, where a nutritional component may be associated with one or more functional categories. 

The common vocabulary and relationships defined within CDNO should facilitate description, communication and exchange of material entity-derived nutritional composition datasets typically generated by analytical laboratories.  The organisation of the vocabulary is structured to reflect common categories variously used by those involved in crop, livestock or other organismal production, associated R&D and breeding, as well as the food processing and supply sector, and nutritionists, inlcuding compilers and users of food composition databases. The CDNO therefore supports characterisation of genetic diversity and management of biodiversity collections, as well as sharing of knowledge relating to dietary composition between a wider set of researchers, breeders, farmers, processors and other stakeholders. Further development of the functional class should also assist in understanding how interactions between organismal genetic and environmental variation contribute to human diet and health in the farm to fork continuum.

A more descriptive guide for the Crop and now Compositional Dietary Nutrition Ontology (CDNO) was published in Crop Science in an article by Andres-Hernandez et al. 2020 [doi:10.1002/csc2.20092](https://acsess.onlinelibrary.wiley.com/doi/full/10.1002/csc2.20092).

More information can be found at http://obofoundry.org/ontology/cdno

## Versions

### Stable release versions

The latest version of the ontology can always be found at:

http://purl.obolibrary.org/obo/cdno.owl

(note this will not show up until the request has been approved by obofoundry.org)

### Editors' version

Editors of this ontology should use the edit version, [src/ontology/cdno-edit.owl](src/ontology/cdno-edit.owl)

## Citing the CDNO

Please use this GitHub repository's [Issue tracker](https://github.com/Southern-Cross-Plant-Science/cdno/issues) to request new terms/classes or report errors or specific concerns related to the ontology.

If you use the ontology, please cite its IRI: [http://obofoundry.org/ontology/cdno](http://obofoundry.org/ontology/cdno)

If you mention CDNO in a paper, please cite one of the following:
Andrés‐Hernández, L., Baten, A., Azman Halimi, R., Walls, R., & King, G. J. (2020). Knowledge representation and data sharing to unlock crop variation for nutritional food security. Crop Science, 60(2), 516-529. doi.org/10.1002/csc2.20092

## Contributing to CDNO

Please use the issue tracker for comments, requests for new terms, and suggesting changes to existing terms. 


<img width=""153"" alt=""cdno"" src=""https://user-images.githubusercontent.com/25215773/137417012-78e5a8c4-1726-47bb-a193-8f11ff4f6f8e.png"">



"
andreshj87/CleanFit,Java,"# CleanFit

<img src=""/screenshots/app_icon_512.png"" height=""400px""/>

A sample Android App that demonstrates how to implement and use several different patterns, technologies and libraries:
* Clean Architecture
* MVP in the Presentation Layer
* Dependency Injection using Dagger 2
* GreenDao as an ORM solution
* rxJava & rxAndroid for Reactive Programming
* Material Design

## ToDo:
* Use of [ZXing](https://github.com/zxing/zxing) technology to scan products barcode
* Use of [Retrofit](http://square.github.io/retrofit/) to retrieve nutritional information from [OpenFoodFacts](http://openfoodfacts.org) given a certain barcode
* Testing using Espresso, Mockito, JUnit, Robolectric...
* Translate to spanish
* Include [Retrolambda](https://github.com/orfjackal/retrolambda) for Lambda Expressions.

## Download
[![Download on Google Play](https://developer.android.com/images/brand/en_app_rgb_wo_60.png)](https://play.google.com/store/apps/details?id=com.zireck.calories)

## Screenshots
<img src=""/screenshots/screenshot_home.png"" height=""500px""/>
<img src=""/screenshots/screenshot_diary_expanded.png"" height=""500px""/>
<img src=""/screenshots/screenshot_diary.png"" height=""500px""/>
<img src=""/screenshots/screenshot_food.png"" height=""500px""/>

## Libraries used:
* [Dagger 2](http://google.github.io/dagger)
* [rxJava](https://github.com/ReactiveX/RxJava)
* [rxAndroid](https://github.com/ReactiveX/RxAndroid)
* javaxAnnotation
* [ButterKnife](http://jakewharton.github.io/butterknife)
* [Picasso](http://square.github.io/picasso)
* [EasyFonts](https://github.com/vsvankhede/easyfonts)
* [FloatingActionButton](https://github.com/Clans/FloatingActionButton)
* [CircleImageView](https://github.com/hdodenhof/CircleImageView)
* [BetterPickers](https://github.com/code-troopers/android-betterpickers)
* [HelloCharts](https://github.com/lecho/hellocharts-android)
* [AdvancedRecyclerView](https://github.com/h6ah4i/android-advancedrecyclerview)
* [TextDrawable](https://github.com/amulyakhare/TextDrawable)
* [MaterialSpinner](https://github.com/ganfra/MaterialSpinner)
* [MaterialMenu](https://github.com/balysv/material-menu)
* [MaterialTabStrip](https://github.com/jpardogo/PagerSlidingTabStrip)
* [MaterialIconLib](https://github.com/code-mc/material-icon-lib)
* [MaterialDateTimePicker](https://github.com/wdullaer/MaterialDateTimePicker)
* [MaterialDialogs](https://github.com/afollestad/material-dialogs)
* [FitChart](https://github.com/txusballesteros/fit-chart)

## License

    Copyright 2015 Andrés Hernández

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"
sayf-ismail/03_teamLapar_nutritionApp,CSS,"# Group Project - Nutrition App

#### Technologies used:
- Node.js with Express
- APIs
- PostgreSQL

#### Who this application is for and why:
This is for the health-conscious consumer looking to meet their daily caloric goals. 

#### Wireframes
Link: https://i.imgur.com/L9cjCat.png

#### Database Schema
Link: https://i.imgur.com/49jfnGz.png

#### Challenges

- Database connection issues were faced when deploying to Heroku. One approach we tried was to amend the SSL to 'require' or 'true'.
<!-- Explanations of the technologies used
A few paragraphs about the general approach you took
Link to your user stories – who are your users, what do they want, and why?
Link to your wireframes – sketches of major views / interfaces in your application
Link to your diagrams - database schema
Descriptions of any unsolved problems or major hurdles your team had to overcome -->
"
MensObscura/FeedMe,Java,"#FeedMe

[![GetBadges Game](https://mensobscura-feedme.getbadges.io/shield/company/mensobscura-feedme)](https://mensobscura-feedme.getbadges.io/?ref=shield-game)

Une application centrée nutrition !

#Contributeurs

  Yassine Badache (ybadache)
  
  Thibault Rosa   (MensObscura)
  
  Thibaud Verbaere
  
  Étienne Wattebled (Etienne-Wattebled)
  
  Pauline Dessingué
  
  Maxime Clément
  
  Jean-Baptiste Delaeter
  
  Jordan Piorun
"
pkasson/nutritionix_iOS_lib,Objective-C,"<img src=""http://www.nutritionix.com/images/logo_home.png"">

# Nutritionix Client Library for iOS
===========

This is a iOS client for the [Nutritionix](http://www.nutritionix.com/) API.

This repo contains both the client library and a sample iOS project demonstrating the usage of the Nutritionix API for iOS.

There are two different invocation mechanisms and you are free to choose which one serves your application best - both make use of the AFNetworking library, which is included in the workspace.  One is asynchronous while the other is syncrhonous.  The synchronous call was created to prevent need for any call back mechanism (and works better in the unit test as well).

You must obtain an application id and key to use in the API service call.

## Use
```objective-c


NSDictionary *jsonDictionary = [Nutritionix_iOS_Library callNutritionixWithUPCAndWait:upc];


```

Contact Me:
-------------
If you have any questions comments or suggestions, send me a message. If you find a bug, or want to submit a pull request, let me know.

License:
--------
MIT License

> Copyright (c) 2014 Peter Kasson
> 
> Permission is hereby granted, free of charge, to any person obtaining 
>a copy of this software and associated documentation files (the  
>""Software""), to deal in the Software without restriction, including 
>without limitation the rights to use, copy, modify, merge, publish, 
>distribute, sublicense, and/or sell copies of the Software, and to 
>permit persons to whom the Software is furnished to do so, subject to  
>the following conditions:
> 
> The above copyright notice and this permission notice shall be 
>included in all copies or substantial portions of the Software.
> 
> THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, 
>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
nutritionix/vue-nutrition-label,Vue,"# vue-nutrition-label

> A VueJS component to create a 2018 FDA-style nutrition label

View [Demo](https://nutritionix.github.io/vue-nutrition-label/demo/)

## Installation
### via npm

``` bash
npm install vue-nutrition-label --save
```

### via CDN
``` html
<script src=""https://cdn.jsdelivr.net/npm/vue-nutrition-label/dist/vue-nutrition-label.min.js""></script>
<link href=""https://cdn.jsdelivr.net/npm/vue-nutrition-label/dist/vue-nutrition-label.min.css"" rel=""stylesheet"" type=""text/css"">
```

## Usage
### via npm
``` html
<!-- Vue component -->
<template>
  <div>
    <nutrition-label :options=""options"" v-model=""item""></nutrition-label>
  </div>
</template>

<script>
  import NutritionLabel from 'vue-nutrition-label';

  // register globally
  Vue.component('nutrition-label', NutritionLabel);

  export default {
    // or register locally
    components: {
      NutritionLabel
    },
    data () {
      return {
        options: {},
        item: {}
      };
    }
  }
</script>

<style>
  your styles
</style>
```
### via CDN
``` html
<html>
  <head>
    <title>...</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.2/vue.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vue-nutrition-label/dist/vue-nutrition-label.min.js""></script>
    <link href=""https://cdn.jsdelivr.net/npm/vue-nutrition-label/dist/vue-nutrition-label.min.css"" rel=""stylesheet"" type=""text/css"">
  </head>
  <body>
    <div id=""app"">
      <nutrition-label :options=""options"" v-model=""item""></nutrition-label>
    </div>
   <script>
      var vm = new Vue({
        el: '#app',
        components: {
          'nutrition-label': window.VueNutritionLabel.NutritionLabel
        },
        data() {
          return {
            options: {},
            item: {}
       });
    </script>
  </body>
</html>
```

## :options
The `options` prop must be an `Object`.

``` javascript
const options = {
  width: 280,
  useFdaRounding: 1, // use FDA rounding rules
  readOnly: false,  // show/hide serving input field
  multipleItems: false,
  addedSugars: {
    show: 1,
    na: 1
  },
  calcium: {
    show: 1,
    na: 1
  },
  calories: {
    show: 1,
    na: 1
  },
  cholesterol: {
    show: 1,
    na: 1
  },
  fatCalories: {
    show: 1,
    na: 1
  },
  fiber: {
    show: 1,
    na: 1
  },
  iron: {
    show: 1,
    na: 1
  },
  monounsaturatedFat: {
    show: 0,
    na: 1
  },
  polyunsaturatedFat: {
    show: 0,
    na: 1
  },
  potassium: {
    show: 1,
    na: 1
  },
  protein: {
    show: 1,
    na: 1
  },
  saturatedFat: {
    show: 1,
    na: 1
  },
  sodium: {
    show: 1,
    na: 1
  },
  sugarAlcohol: {
    show: 0,
    na: 1
  },
  sugars: {
    show: 1,
    na: 1
  },
  totalCarb: {
    show: 1,
    na: 1
  },
  totalFat: {
    show: 1,
    na: 1
  },
  transFat: {
    show: 1,
    na: 1
  },
  vitaminA: {
    show: 1,
    na: 1
  },
  vitaminC: {
    show: 1,
    na: 1
  },
  vitaminD: {
    show: 1,
    na: 1
  }
}
```

## Item Object
``` javascript
const item = {
  name: 'Double Cheese Burger',
  serving: 1,
  servingPerContainer: 0,
  servingUnitName: 'serving',
  ingredientStatement: 'Swiss cheese, American cheese, more cheese and a burger.',
  nutrition: {
    calories: 510,
    fatCalories: 170,
    totalFat: 19,
    saturatedFat: 9,
    transFat: 0,
    polyunsaturatedFat: 0,
    monounsaturatedFat: 0,
    cholesterol: 10,
    sodium: 560,
    totalCarb: 79,
    fiber: 4,
    sugars: 35,
    protein: 9,
    vitaminA: 1,
    vitaminC: 2,
    calcium: 35,
    iron: 1,
    addedSugars: 0,
    potassium: 100,
    vitaminD: 0,
    servingWeight: 175
  }
}
```
## Build Setup

``` bash
# install dependencies
npm install

# serve with hot reload at localhost:8080
npm run dev

# build for production with minification
npm run bundle
```

For a detailed explanation on how things work, check out the [guide](http://vuejs-templates.github.io/webpack/) and [docs for vue-loader](http://vuejs.github.io/vue-loader).
"
IBM/watson-calorie-counter,Java,"[![Build Status](https://api.travis-ci.org/IBM/watson-calorie-counter.svg?branch=master)](https://travis-ci.org/IBM/watson-calorie-counter)

# Create a calorie counter mobile app using Watson Visual Recognition

In this Code Pattern, we will create a calorie counter mobile app using Apache Cordova, Node.js and Watson Visual Recognition. This mobile app extracts nutritional information from captured images of food items.

Currently this mobile app only runs on Android, but can be easily ported to iOS.

![Architecture diagram](doc/source/images/architecture.png)

## Flow

1. User interacts with the mobile app and captures an image.
2. The image is passed to the server application which uses Watson Visual Recognition Service to analyze the images and Nutritionix API to provide nutritional information.
3. Data is returned to the mobile app for display.

## Included components

* [Watson Visual Recognition](https://www.ibm.com/watson/developercloud/visual-recognition.html): Visual Recognition understands the contents of images - visual concepts tag the image, find human faces, approximate age and gender, and find similar images in a collection.

## Featured Technologies

* Mobile: Systems of engagement are increasingly using mobile technology as the platform for delivery.
* [Nutritionix API](https://developer.nutritionix.com/): The largest verified database of nutrition information.
* [Node.js](https://nodejs.org/): An asynchronous event driven JavaScript runtime, designed to build scalable applications.

# Watch the Video

[![](https://img.youtube.com/vi/Jp_9hKoNYrM/0.jpg)](https://youtu.be/Jp_9hKoNYrM)

# Steps

> NOTE: The Watson Visual Recognition service required for this patten only exists in the US-South/Dallas region (as of 11/30/18). You will only be able to deploy and/or use this code there.

This Code Pattern contains several pieces. The app server communicates with the Watson Visual Recognition service. The mobile application is built locally and run on the Android phone.

## Deploy the Server Application to IBM Cloud

[![Deploy to IBM Cloud](https://cloud.ibm.com/devops/setup/deploy/button.png)](https://cloud.ibm.com/devops/setup/deploy?repository=https://github.com/IBM/watson-calorie-counter)

1. Press the above ``Deploy to IBM Cloud`` button and then click on ``Deploy``.

2. In `Toolchains`, click on `Delivery Pipeline` to watch while the app is deployed.

![Toolchain pipeline](doc/source/images/toolchain-pipeline.png)

3. To see the app and services created and configured for this Code Pattern, use the IBM Cloud dashboard. The app is named `watson-calorie-counter` with a unique suffix. The following services are created and easily identified by the `wcc-` prefix:
    * wcc-visual-recognition

> Note: Make note of the `watson-calorie-counter` URL route - it will be required for later use in the mobile app.

To complete the installation, perform the following steps:

1. [Clone the repo](#1-clone-the-repo)
2. [Obtain a Nutritionix API ID and key](#2-obtain-a-nutritionix-api-id-and-key)
3. [Update config values for the Mobile App](#3-update-config-values-for-the-mobile-app)
4. Perform either 4a or 4b.

    4a. [Install dependencies to build the mobile application](#4a-install-dependencies-to-build-the-mobile-application)

    4b. [Run mobile application build in Docker container](#4b-run-mobile-application-build-in-docker-container)

5. [Add Android platform and plug-ins](#5-add-android-platform-and-plug-ins)
6. [Setup your Android device](#6-setup-your-android-device)
7. [Build and run the mobile app](#7-build-and-run-the-mobile-app)

## 1. Clone the repo

Clone the `watson-calorie-counter` repo locally. In a terminal, run:

```
$ git clone https://github.com/IBM/watson-calorie-counter.git
$ cd watson-calorie-counter
```

## 2. Obtain a Nutritionix API ID and key

Nutritionix data is used to gather nutritional information of an analyzed image. Instructions for obtaining a key can be found at [Nutritionix.com](https://developer.nutritionix.com/).

> Note: Make note of the API ID and key - they will be required for later use in the mobile app.

## 3. Update config values for the Mobile App

Edit `mobile/www/config.json` and update the setting with the values retrieved previously.

```javascript
""BLUEMIX_SERVER_URL"": ""<add-bluemix-server-url>"",
""NUTRITIONIX_APP_ID"": ""<add-nutritionix-app-id>"",
""NUTRITIONIX_APP_KEY"": ""<add-nutritionix-app-key>""
```

## 4a. Install dependencies to build the mobile application

Building the mobile application requires a few dependencies that you can either manually install yourself, **or** you can use [Docker](https://docs.docker.com/engine/installation/) by skipping to [Run mobile application build in Docker container](#4b-run-mobile-application-build-in-docker-container)

### Using manually-installed dependencies

For this Code Pattern, you'll need to install the prerequisites, by following their respective documentation:

* [Java Development Kit (JDK)](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)
* [Node.js and npm](https://nodejs.org/en/download/) (`npm` version 4.5.0 or higher)
* [Android Studio](https://developer.android.com/studio/), which includes Android tools and gives you access to Android SDKs
* [Cordova](https://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html)
* [Gradle](https://gradle.org/install/)

You'll need to install the specific SDK appropriate for your mobile device. From `Android Studio`, download and install the desired API Level for the SDK. We are using Android API Level 23 as this is widely supported on most phones as of January, 2018. To do this:

* Launch `Android Studio` and accept all defaults.
* Click on the `SDK Manager` icon in the toolbar.
* Navigate to `Appearance & Behavior` -> `System Settings` -> `Android SDK`
* Select Android API level of your choice (Recommended Android 6.0 (Marshmallow) (API Level 23) and above).
* Click apply to download and install.

> Note: the `mobile/config.xml` is configured to build for Android API Level 23. Adjust this if you wish to build for a different API:
```
<preference name=""android-targetSdkVersion"" value=""23"" />
```

Once you have completed all of the required installs and setup, you should have the following environment variables set appropriately for your platform:

* `JAVA_HOME`
* `ANDROID_HOME`
* `PATH`

> Note: For additonal help setting these environment variables, refer to the  [Troubleshooting](#troubleshooting) section below.

## 4b. Run mobile application build in Docker container

If you are running [Docker](https://docs.docker.com/engine/installation/), build the mobile app in a Docker container.

Either download the image:
```
docker pull scottdangelo/cordova_build
```

Or build locally:
```
$ cd watson-calorie-counter/mobile
$ docker build -t cordova_build .
[truncated output]
Successfully built <image-id>
```

Now create the following alias for `cordova` and the commands for cordova will run inside the container. Use `cordova_build` in place of `scottdangelo/cordova_build` if you have built the container locally.

```
alias cordova='docker run -it --rm --privileged  -v $PWD:/mobile scottdangelo:cordova_build cordova'
```

> Note: the `mobile/config.xml` is configured to build for Android API Level 23. Adjust this if you wish to build for a different API:
```
<preference name=""android-targetSdkVersion"" value=""23"" />
```

## 5. Add Android platform and plug-ins

Start by adding the Android platform as the target for your mobile app.

```
$ cd watson-calorie-counter/mobile
$ cordova platform add android
```

Ensure that everything has been installed correctly:

```
$ cordova requirements
```

Finally, install the plugins required by the application:

```
$ cordova plugin add cordova-plugin-camera
$ cordova plugin add cordova-plugin-file-transfer
```

## 6. Setup your Android device

In order to run the application on your Android device, you will need to be prepared to transfer the application's `.apk` file to your device (created in the next step). There are multiple ways for developers to achieve this.

Android Studio will handle the transfer for you if you tether your Android device to your computer, and enable both `developer options` and `web debugging`.

> Note: Please refer to documentation on your specific phone to set these options.

For Mac users, [Android File Transfer](https://www.android.com/filetransfer/) will facilitate simple file transfers between your computer and Android device.

## 7. Build and run the mobile app

```
$ cd watson-calorie-counter/mobile
$ cordova build android
```

An `.apk` file should appear at `watson-calorie-counter/mobile/platforms/android/app/build/outputs/apk/debug/`, which contains the Android application.

You can then either manually transfer the `.apk` to your device and run it yourself, or if your device is tethered (as described in the previous step), then you can run:

```
$ cordova run android
```

However, a Docker container does not have access to your host's USB devices, unless you explicitly allow them to be passed through. You can expose your device to the Docker container, and allow Cordova to do the transfer for you. To accomplish that, you'll need to know which USB device to pass through. Discover your USB devices on a Linux machine with `lsusb`.

For example, in this case, I know that my Android device is `Bus 001, Device 002`:

```
$ lsusb
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 003: ID 046d:082d Logitech, Inc. HD Pro Webcam C920
Bus 001 Device 002: ID 18d1:4ee6 Google Inc.
Bus 001 Device 005: ID 046d:c085 Logitech, Inc.
Bus 001 Device 004: ID 045e:02e6 Microsoft Corp.
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
```

I can then pass my device through to the container using `--device=/dev/bus/usb/<bus-number>/<device-number>` and allow Cordova to access it. The new alias for the cordova command would then be:

```
alias cordova='docker run -it --rm --privileged  --device=/dev/bus/usb/001/002 -v $PWD:/mobile scottdangelo:cordova_build cordova'
```
Then we can run:
```
cordova run android
```

At this point, the app named `Calorie Counter` should be on your mobile device. Use the camera icon to take a photo of a food item, and allow Watson to analyze the image and fetch the calorie results.

# Sample Output

<img src=""doc/source/images/output1.jpg"" width=""250"">  <img src=""doc/source/images/output2.jpg"" width=""250"">

# Troubleshooting

* `cordova run android` error: Failure [INSTALL_FAILED_UPDATE_INCOMPATIBLE]

> The `Calorie Counter` app is already installed on your phone and incompatible with the version you are now trying to run. Uninstall the current version and try again.

* `cordova run android` error: No target specified and no devices found, deploying to emulator

> Ensure that your phone is plugged into your computer and you can access it from the Android File Transfer utility (see Step #6 above).

* How to determine proper values for environment variables:

Open `Android Studio` and navigate to `File` -> `Project Structure` -> `SDK
Location`. This location value will serve as the base for your environment variables. For example, if the location is `/users/joe/Android/sdk`, then:

```
$ export ANDROID_HOME=/users/joe/Android/sdk
$ export ANDROID_SDK_HOME=/users/joe/Android/sdk/platforms/android-<api-level>
$ export PATH=${PATH}:/users/joe/Android/sdk/platform-tools:/users/joe/Android/sdk/tools
```

* Error: Server error, status code: 502, error code: 10001, message: Service broker error: {""description""=>""Only one free key is allowed per organization. Contact your organization owner to obtain the key.""}

> Only one free key is allowed per organization. Binding the service to an application triggers a process that tries to allocate a new key, which will get rejected. If you already have an instance of Visual Recognition and an associated key, you can bind that instance to your application or update the API key in your server code to tell the app which key to use.

* When using Docker, first `cordova` command fails with:
```
-bash: cordova: command not found
```

> Test that you have the proper alias with:
```
alias |grep cordova
```
If you do not see the `alias cordova=...` output from [4b](#4b-run-mobile-application-build-in-docker-container), re-execute the `alias` command above.

# Links

* [Demo on Youtube](https://youtu.be/Jp_9hKoNYrM): Watch the video.
* [Watson Node.js SDK](https://github.com/watson-developer-cloud/node-sdk): : Visit the Node.js library to access IBM Watson services.
* [Sample code](https://www.ibm.com/developerworks/library/cc-sample-code-image-classification-watson-node/index.html): Identify objects in an image with the Watson Visual Recognition service.

# Learn more

* **Artificial Intelligence Code Patterns**: Enjoyed this Code Pattern? Check out our other [AI Code Patterns](https://developer.ibm.com/technologies/artificial-intelligence/).
* **AI and Data Code Pattern Playlist**: Bookmark our [playlist](https://www.youtube.com/playlist?list=PLzUbsvIyrNfknNewObx5N7uGZ5FKH0Fde) with all of our Code Pattern videos
* **With Watson**: Want to take your Watson app to the next level? Looking to utilize Watson Brand assets? [Join the With Watson program](https://www.ibm.com/watson/with-watson/) to leverage exclusive brand, marketing, and tech resources to amplify and accelerate your Watson embedded commercial solution.

# License

This code pattern is licensed under the Apache Software License, Version 2.  Separate third party code objects invoked within this code pattern are licensed by their respective providers pursuant to their own separate licenses. Contributions are subject to the [Developer Certificate of Origin, Version 1.1 (DCO)](https://developercertificate.org/) and the [Apache Software License, Version 2](https://www.apache.org/licenses/LICENSE-2.0.txt).

[Apache Software License (ASL) FAQ](https://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN)
"
tylerburleigh/nutritionR,R,"# nutritionR
A wrapper for the Nutritionix API (https://www.nutritionix.com), allowing nutritional analysis of foods and recipes expressed in natural language.

# Requirements

Requires a Nutritionix API key (it's free!). Go to https://developer.nutritionix.com

# Installation / getting started

1. Install the package

```
devtools::install_github(""tylerburleigh/nutritionR"")
```

2. Load the package and set your API keys

```
library(""nutritionR"")
Sys.setenv(NUTRITIONIX_APP_ID = ""MY_APP_ID"")
Sys.setenv(NUTRITIONIX_API_KEY = ""MY_API_KEY"")
```

# How do I use `nutritionR`?

This package has two functions:

## 1. `nutritionix_lookup()`

`nutritionix_lookup()` takes a natural language food query as input, it sends this query to the Nutritionix API, and then returns an list object with all sorts of nutrition information. 

You can inspect this object. It has all sorts of information like portion size, quantity, weight, brand name (if applicable), and of course nutrition. If you don't specify a portion size or quantity, it will make its own assumptions. You can see what these assumptions are.

For example, let's say you wanted to query Nutritionix with ""A hamburger with cheese"":

```
obj <- nutritionix_lookup(""A hamburger with cheese"")
```

## 2. `nutrient()`

`nutrient()` takes a nutrition object returned by `nutritionix_lookup()` and a nutrient as input, and returns the information about that nutrient. Specifically, it returns the name, amount, and unit. 

For example, let's say you wanted to know how many calories were in your query ""A hamburger with cheese"".

```
obj <- nutritionix_lookup(""A hamburger with cheese"")
nutrient(obj, ""calories"")

$name
[1] ""calories""

$amount
[1] 653.26

$unit
[1] ""kcal""
```

# Natural language, what?

The Nutritionix API uses natural language processing to process your queries. It can usually figure out what food items you're referring to even when you give it a complex input with non-food related details. For example, let's say you had eggs and toast for breakfast, and a burrito for lunch. You can use this query exactly as it is:

```
obj <- nutritionix_lookup(""I had eggs and toast for breakfast, and a burrito for lunch."")
nutrient(obj, ""calories"")

$name
[1] ""calories""

$amount
[1] 569.1

$unit
[1] ""kcal""
```

Here, `nutritionix_lookup()` returns a list object with 3 items, and `nutrient(obj, ""calories"")` returns the calories for all of the ingredients summed together.

# Using `nutritionR` for recipes

You can use `nutritionR` to lookup nutrition info for recipes. 

For example, this is one of my favorite simple curry recipes:

- 2 cups dry red lentils
- 2 tsps turmeric
- 4 tbsp olive oil
- 2 tsps cumin seeds
- 1 small onion
- 2 cloves garlic
- 2 fresh green chiles
- 1 tsp garam masala
- 1 tsp ground coriander
- 1 tbsp fresh ginger
- 2 medium tomatoes

If I want to know the nutrition of this recipe, I can take these ingredients and enter them as a query to the `nutritionix_lookup()` function, as a comma-separated string like this:

```
obj <- nutritionix_lookup(""2 cups red lentils, 
                           2 tsps turmeric, 
                           4 tbsp olive oil, 
                           2 tsps cumin seeds, 
                           1 small onion, 
                           2 cloves garlic, 
                           2 fresh green chiles, 
                           1 tsp garam masala, 
                           1 tsp ground coriander, 
                           1 tbsp fresh ginger, 
                           2 medium tomatoes"")
nutrient(obj, ""calories"")

$name
[1] ""calories""

$amount
[1] 2022.532

$unit
[1] ""kcal""
```

Let's say I want to know the calories per serving. If I know how many servings the recipe makes, then I could divide the `amount` returned by `nutrient()` by the number of servings.

```
obj <- nutritionix_lookup(""2 cups dry red lentils, 
                           2 tsps turmeric, 
                           4 tbsp olive oil, 
                           2 tsps cumin seeds, 
                           1 small onion, 
                           2 cloves garlic, 
                           2 fresh green chiles, 
                           1 tsp garam masala, 
                           1 tsp ground coriander, 
                           1 tbsp fresh ginger, 
                           2 medium tomatoes"")
calories <- nutrient(obj, ""calories"")
calories$amount / 6

[1] 337.0887
```

# Great, so what nutrients can I lookup?

Currently, 68 nutrients are supported. 
This includes macronutrients like fat, protein, carbs, calories, and also micronutrients, vitamins, and minerals.

The full list of nutrients is as follows:

- calcium
- carbohydrate
- cholesterol
- calories
- saturated fat
- fat
- trans fat
- iron
- fiber
- potassium
- sodium
- protein
- sugar
- vitamin d
- alanine
- alcohol
- arginine
- ash
- aspartic acid
- caffeine
- carotene alpha
- carotene beta
- choline
- cryptoxanthin
- copper
- cystine
- monosaturated fat
- polysaturated fat
- folate
- folic acid
- folate
- glutamic acid
- glycine
- histidine
- isoleucine
- leucine
- lutein and zeaxanthin
- lycopene
- lysine
- methionine
- magnesium
- manganese
- niacin
- phosphorus
- pantothenic acid
- phenylalanine
- proline
- retinol
- riboflavin
- selenium
- serine
- theobromine
- thiamin
- threonin
- vitamin e
- tryptophan
- tyrosine
- valine
- vitamin a
- vitamin b12
- vitamin b-6
- vitamin c
- vitamin d2 and d3
- vitamin k
- water
- zinc

This list can also be accessed with `data(nutrients)`


# Package maintainer / author

nutritionR is written and maintained by [Tyler Burleigh](https://tylerburleigh.com).

<a href=""https://twitter.com/intent/follow?screen_name=tylerburleigh""><img src=""https://img.shields.io/twitter/follow/tylerburleigh?style=social&logo=twitter"" alt=""follow on Twitter""></a>
"
revan/RU-Food-Scraper,Python,"#Rutgers Nutritional Information Scraper

Scrapes food.rutgers.edu for menus and nutritional information, saves to file.

Official website reports wonky numbers for certain fields, so only scraping calories, serving size, and ingredients for now.

###Format
Enable indentation with the `--fancy` flag.

Use the `--dicts` flag to organize for easier random access, like so:
```
{
	'Brower Commons' : {
		'Breakfast' : [
			'CATEGORY' : [
				{
					'name' : 'ITEM NAME',
					'serving' : 'SERVING SIZE',
					'calories' : 100,
					'ingredients' : [
						'INGREDIENT1',
						'INGREDIENT2',
						...
					]
				},
				{
					...
				},
				...
			],
			...
		],
		'Lunch' : {
			...
		},
		'Dinner' : {
			...
		},
		'Knight Room' : {
			...
		}
	},
	'Busch Dining Hall' : {
		...
	},
	'Neilson Dining Hall' : {
		...
	},
	'Livingston Dining Commons' : {
		...
	}
}
```

Use without the `--dicts` flag to organize with arrays like the old food API does.
```
[
	{
		'location_name' : 'LOCATION NAME'
		'meals' : [
			{
				'meal_name' : 'MEAL NAME',
				'genres' : [
					{
						'genre_name' : 'CATEGORY NAME'
						'items' : [
							{
								'name' : 'ITEM NAME',
								'serving' : 'SERVING SIZE',
								'calories' : 100,
								'ingredients' : [
									'INGREDIENT1',
									'INGREDIENT2',
									...
								]
							},
							...
						]
					},
					...
				]
			},
			...
		]
	},
	...
]
```

###Dependencies
Python script requires package `BeautifulSoup`."
superzzp/SeeNutrition,Swift,"# SeeNutrition
<p align = ""middle"">
    <img src=""Documentation/login.png"" alt=""login page"" width=""350""/>
    <img src=""Documentation/chicken1.png"" alt=""chicken1"" width=""350""/>
    <img src=""Documentation/chicken2.png"" alt=""chicken2"" width=""350""/>
    <img src=""Documentation/spaghetti1.png"" alt=""spaghetti1"" width=""350""/>
    <img src=""Documentation/spaghetti2.png"" alt=""spaghetti2"" width=""350""/>
    <img src=""Documentation/salad1.png"" alt=""salad1"" width=""350""/>
    <img src=""Documentation/salad2.png"" alt=""salad2"" width=""350""/>
</p>

SeeNutrition is a machine learning food app. Inspired by the classic app from the TV show Silicon Valley, It can not only classify ""hotdog and not hotdog"", but also find out the name of food in the photo you take, and display its nutrition information. </br>

It utilizes Google's image regnition services and its pre-trained neural net, and gets the nutrition data from Nutritionix api. It uses Firebase as backend for user registration and login.</br>

Download on App Store today!

"
reMRKableDev/ironNutrition-solution,JavaScript,"![logo_ironhack_blue 7](https://user-images.githubusercontent.com/23629340/40541063-a07a0a8a-601a-11e8-91b5-2f13e4e6b441.png)

# LAB | React IronNutrition

## Introduction

You just realized that since the beginning of the bootcamp, your diet is not healthy and it may have an impact on your health (and productivity), now and in the long term.

To take care of the food you eat, you decided to create a nutrition app that will track everything you eat!

![](https://media.giphy.com/media/fH0dyqpPJRvTbiF5rJ/giphy.gif)

## Setup

- Fork this repo
- Clone this repo

```shell
$ cd lab-react-ironnutrution
$ npm install
$ npm start
```

## Submission

- Upon completion, run the following commands:

  ```
  git add .
  git commit -m ""done""
  git push origin master
  ```

- Create Pull Request so your TAs can check up your work.

## Instructions

### Iteration 0 | Setup

#### Bulma installation

We will use [Bulma](https://bulma.io/) for the design :)

```sh
$ npm install bulma --save
```

```javascript
import 'bulma/css/bulma.css';
```

#### Import a JSON

Import the foods from the `foods.json`.

```js
import foods from './foods.json';
```

#### About the design

If you struggle with the design, you can find a static example of what is expected inside file `style-guides.html`.

So let's start!

### Iteration 1 | Create `FoodBox` component

Create a `FoodBox` component that takes at least `food` as a prop and displays a box with all the information about an ingredient.

You can use this HTML snippet to display properly the `FoodBox`:

```html
<div className=""box"">
  <article className=""media"">
    <div className=""media-left"">
      <figure className=""image is-64x64"">
        <img src=""https://i.imgur.com/eTmWoAN.png"" />
      </figure>
    </div>
    <div className=""media-content"">
      <div className=""content"">
        <p>
          <strong>Pizza</strong> <br />
          <small>400 cal</small>
        </p>
      </div>
    </div>
    <div className=""media-right"">
      <div className=""field has-addons"">
        <div className=""control"">
          <input className=""input"" type=""number"" value=""1"" />
        </div>
        <div className=""control"">
          <button className=""button is-info"">
            +
          </button>
        </div>
      </div>
    </div>
  </article>
</div>
```

![](https://i.imgur.com/bY9i5Rw.png)

### Iteration 2 | Display food

In your `App` component (your main component), display as many `FoodBox` as elements inside the variable `foods`.

![](https://i.imgur.com/3TVQJDO.png)

### Iteration 3 | Add new food

Create a button to add new foods.

When a user clicks the button, a form will appear with fields for a name, number of calories, and an image.

When the user clicks submit, the food will be added to the list.

The form should disappear when the user clicks the submit button.

### Iteration 4 | Implement search bar

Create a `Search` component to perform a search that updates the list of all meal.

![](https://i.imgur.com/XaOpAx8.png)

### Iteration 5 | Create add buttons

On your `FoodBox`, you have an input an ""+"" button. Use them so that when a user clicks on the button, it adds them on a list on the right called ""_Today's foods_"".

You will also need to display the total amount of calories at the bottom of the list as a recap.

![](https://media.giphy.com/media/fH0dyqpPJRvTbiF5rJ/giphy.gif)

If you don't remember how to create responsive columns with Bulma, you can check the [documentation](https://bulma.io/documentation/columns/basics/).

### Iteration 6 | Bonus | Group ingredients

You made an awesome application, but you have found a little problem in the UX. For example, if you click twice on ""Pizza"", it will display 2 lines ""_1 Pizza = 400 cal_"" instead of 1 line ""_2 Pizza = 800 cal_"". Fix that problem.

### Iteration 7 | Bonus | Allow the user to remove an ingredient

On the ""_Today's food_"", add a trash icon to let users removing one of their items.

Happy coding! :heart:
"
shahhafiz/WhatTheFood,Java,"# WhatTheFood (Android)

Training Dataset:
1. Apple (200 images)
2. Orange (200 images)
3. Salak (100 images)
4. Mangosteen (100 images)
5. Banana (200 images)
"
amirisback/nutrition-framework,Kotlin,"![ScreenShoot Apps](https://raw.githubusercontent.com/amirisback/nutrition-framework/master/docs/image/banner.png?raw=true)

## About This Project (release-and-work-in-progress 👷🔧️👷‍♀️⛏)
[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-nutrition--framework-brightgreen.svg?style=flat-square)](https://android-arsenal.com/details/1/8370)
[![JitPack](https://jitpack.io/v/amirisback/nutrition-framework.svg?style=flat-square)](https://jitpack.io/#amirisback/nutrition-framework)
- Generator Aplikasi MicroNutrient
- Pengembang Framework untuk Membuat Aplikasi Seputar Permasalahan Gizi berbasis Platform Android
- General Framework for Application Development Around Nutrition Using the Android Platform, Skripsi S1 Muhammad Faisal Amir from Telkom University
- Privacy Policy [Click Here](https://github.com/amirisback/nutrition-framework/blob/master/PRIVACY-POLICY.md)

## Version Release
This Is Latest Release

    ~ Beta Release
    $version_release = 1.0.0

What's New??

    * Multi Platform Library *
    * Compose UI Multi Platform *
    * Update Compose Component *
    * List Item Compose Desktop and Android *
    * Grid Item Compose Desktop and Android *
    * Vitamin Function *
    * NutriRecyclerView Update *

## Screen Shoot Apps - Android

| SS 1 | SS 2 | SS 3 | SS 4 |
|:----:|:----:|:----:|:----:|
|<img width=""200px"" height=""360px"" src=""https://raw.githubusercontent.com/amirisback/nutrition-framework/master/docs/image/ss/ss-1.png""> | <img width=""200px"" height=""360px"" src=""https://raw.githubusercontent.com/amirisback/nutrition-framework/master/docs/image/ss/ss-2.png""> | <img width=""200px"" height=""360px"" src=""https://raw.githubusercontent.com/amirisback/nutrition-framework/master/docs/image/ss/ss-3.png""> | <img width=""200px"" height=""360px"" src=""https://raw.githubusercontent.com/amirisback/nutrition-framework/master/docs/image/ss/ss-4.png""> |

## Download this project

### Step 1. Add the JitPack repository to your build file (build.gradle : Project / Root)

#### <Option 1> Groovy Gradle (build.gradle)

    // Add it in your root build.gradle at the end of repositories:

    allprojects {
        repositories {
            ...
            maven { url 'https://jitpack.io' }
        }
    }

#### <Option 2> Kotlin DSL Gradle (build.gradle.kts / settings.gradle.kts)

```kotlin
// Add it in your root build.gradle.kts at the end of repositories:

allprojects {
    repositories {
        ...
        maven { url = uri(""https://jitpack.io"") }
    }
}
```

### Step 2. Add the dependency (build.gradle : Module)

#### <Option 1> Groovy Gradle (build.gradle)

    dependencies {
        // library nutrition-framework
        implementation 'com.github.amirisback:nutrition-framework:1.0.0'
    }

#### <Option 2> Kotlin DSL Gradle (build.gradle.kts)

    dependencies {
        // library nutrition-framework
        implementation(""com.github.amirisback:nutrition-framework:1.0.0"")
    }

## Application Framework
![ScreenShoot Apps](docs/image/skeleton-component.png?raw=true)

## User Manual Protocol
- How To Generate New Project [Klik Disini](https://github.com/amirisback/nutrition-framework/wiki/How-To-Generate-New-Project)
- How To Start Project [Klik Disini](https://github.com/amirisback/nutrition-framework/wiki/How-To-Start)
- Android Library Implementation [Klik Disini](https://github.com/amirisback/nutrition-framework/wiki/Implementasi-Code-Framework-Android-Library)
- Desktop Library Implementation [Klik Disini](https://github.com/amirisback/nutrition-framework/wiki/Implementasi-Code-Framework-Desktop-Library)

## Test Case Framework
- Scenario Test [Click Here](https://github.com/amirisback/nutrition-framework/tree/master/docs/scenario-test)
- Report All Test [Click Here](https://github.com/amirisback/nutrition-framework/blob/master/docs/scenario-test/report-profiler-test.xlsx?raw=true)
- Android
    - Test Case Android [nf-testcase-app-consume-library](https://github.com/amirisback/nf-testcase-app-consume-library)
    - Test Case Android [nf-testcase-app-no-framework](https://github.com/amirisback/nf-testcase-app-no-framework)
    - Test Case Android [nf-testcase-googlesample](https://github.com/amirisback/nf-testcase-googlesample)
    - Test Case Android [nf-testcase-googlesample-consume-library](https://github.com/amirisback/nf-testcase-googlesample-consume-library)
- Desktop
    - Test Case Desktop [nutrition-framework-desktop](https://github.com/amirisback/nutrition-framework-desktop)

## Documentation

### Research Data
- Image [Click Here](https://github.com/amirisback/nutrition-framework/tree/master/docs/image)
- Proposal [Click Here](https://github.com/amirisback/nutrition-framework/tree/master/docs/proposal)
- Guidance [Click Here](https://github.com/amirisback/nutrition-framework/tree/master/docs/bimbingan)
- Journal List [Click Here](https://github.com/amirisback/nutrition-framework/tree/master/docs/journal)
- Design on Figma [Click Here](https://www.figma.com/file/Ons8XY0YvxecwC71Aa92Qj/TA?node-id=0%3A1)
- Sheet Feedback [Click Here](https://docs.google.com/spreadsheets/d/1P8U2lu8odQJwLPD3QiSJGJXAgocdc_H5j7PdT23lPZc/edit#gid=0)
- Diagram on Draw Io [Click Here](https://drive.google.com/file/d/1OCsoqVV3UYnLxpUK9jYm2yNjcFj9sUPP/view?usp=sharing)
- Research Nutrition Apps [Click Here](https://docs.google.com/spreadsheets/d/1t0aWoMrBEVfeZTIV438V8P0YMeGUK2VV_HHC7qnZUtU/edit?usp=sharing)

### Final Task (Tugas Akhir)
- Important Document [Click Here](https://github.com/amirisback/nutrition-framework/tree/master/docs/pengganti-sidang)
- Final Task Journal [Click Here](https://github.com/amirisback/nutrition-framework/raw/master/docs/pengganti-sidang/Muhammad%20Faisal%20Amir_1301198497_TUGAS_AKHIR.docx)
- HKI Certificate [Click Here](https://github.com/amirisback/nutrition-framework/blob/master/docs/pengganti-sidang/hki-license/HCAP1512210222_ki_file_cert.pdf)
- HKI Link URL [Click Here](https://pdki-indonesia.dgip.go.id/detail/EC00202180905?type=copyright&keyword=generator+aplikasi+micronutrient)
- Slide Presentasi [Click Here](https://docs.google.com/presentation/d/12kmmpXcHClVqapPHyhkMgV1aC2vENhD6EjkcO2tIvfM/edit?usp=sharing)

## Telkom University Lecturers
- DAS - Dana Sulistyo Kusumo, S.T., M.T., PhD. (NIP. 02780011) - danakusumo@telkomuniversity.ac.id
- SYP - Shinta Yulia Puspitasari, S.T., M.T. (NIP. 13880046)- shintayulia@telkomuniversity.ac.id
- HMT - Hasmawati, S.Kom., M. Kom. (NIP. 15900049)

## Screen Shoot Apps - Desktop
![ScreenShoot Apps](docs/image/ss/ss-desktop.png?raw=true)

## Architecture
-   Pattern  [Model-View-ViewModel](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel)  (MVVM) facilitating a [separation](https://en.wikipedia.org/wiki/Separation_of_concerns) of development of the graphical user interface.
-   [S.O.L.I.D](https://en.wikipedia.org/wiki/SOLID)  design principles intended to make software designs more understandable, flexible and maintainable.

## Tech-stack
Min API level is set to 21, so the presented approach is suitable for over 94% of devices running Android. This project takes advantage of many popular libraries and tools of the Android ecosystem. Most of the libraries are in the stable version unless there is a good reason to use non-stable dependency.
-   [Jetpack](https://developer.android.com/jetpack):
    -   [Android KTX](https://developer.android.com/kotlin/ktx.html)  - provide concise, idiomatic Kotlin to Jetpack and Android platform APIs.
    -   [AndroidX](https://developer.android.com/jetpack/androidx)  - major improvement to the original Android  [Support Library](https://developer.android.com/topic/libraries/support-library/index), which is no longer maintained.
    -   [View Binding](https://developer.android.com/topic/libraries/view-binding)  - allows you to more easily write code that interacts with views/
    -   [Lifecycle](https://developer.android.com/topic/libraries/architecture/lifecycle)  - perform actions in response to a change in the lifecycle status of another component, such as activities and fragments.
    -   [LiveData](https://developer.android.com/topic/libraries/architecture/livedata)  - lifecycle-aware, meaning it respects the lifecycle of other app components, such as activities, fragments, or services.
    -   [Navigation](https://developer.android.com/guide/navigation/)  - helps you implement navigation, from simple button clicks to more complex patterns, such as app bars and the navigation drawer.
    -   [Room](https://developer.android.com/topic/libraries/architecture/room)  - persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite.
    -   [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel)  - designed to store and manage UI-related data in a lifecycle conscious way. The ViewModel class allows data to survive configuration changes such as screen rotations.
-   [Coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html)  - managing background threads with simplified code and reducing needs for callbacks.
-   [Coroutines Flow](https://kotlinlang.org/docs/reference/coroutines-overview.html)  - cold asynchronous data stream that sequentially emits values and completes normally or with an exception
-   [Dagger2](https://dagger.dev/)  - dependency injector for replacement all Factory classes.
-   [Retrofit](https://square.github.io/retrofit/)  - type-safe HTTP client.
-   [Glide](https://github.com/bumptech/glide)  - image loading and caching library
-   [Compose](https://www.jetbrains.com/lp/compose/) - Compose for Desktop simplifies and accelerates UI development for desktop applications, and allows extensive UI code sharing between Android and desktop applications. Currently in alpha.
-   [Coil](https://coil-kt.github.io/coil/) - Coroutine Image Loader

## Inpiration


<table>
    <tr>
        <th>No.</th>
        <th>Github Name / Organization</th>
        <th>Github Project</th>
    </tr>
    <tr>
        <td>1.</td>
        <td><a href=""https://github.com/amirisback"">Muhammad Faisal Amir</a></td>
        <td><a href=""https://github.com/amirisback/frogo-log"">frogo-log</a></td>
    </tr>
    <tr>
        <td>2.</td>
        <td><a href=""https://github.com/amirisback"">Muhammad Faisal Amir</a></td>
        <td><a href=""https://github.com/amirisback/frogo-admob"">frogo-admob</a></td>
    </tr>
    <tr>
        <td>3.</td>
        <td><a href=""https://github.com/amirisback"">Muhammad Faisal Amir</a></td>
        <td><a href=""https://github.com/amirisback/frogo-recycler-view"">frogo-recycler-view</a></td>
    </tr>
    <tr>
        <td>4.</td>
        <td><a href=""https://github.com/amirisback"">Muhammad Faisal Amir</a></td>
        <td><a href=""https://github.com/amirisback/frogo-notification"">frogo-notification</a></td>
    </tr>
    <tr>
        <td>5.</td>
        <td><a href=""https://github.com/amirisback"">Muhammad Faisal Amir</a></td>
        <td><a href=""https://github.com/amirisback/android-kick-start"">android-kick-start</a></td>
    </tr>
    <tr>
        <td>6.</td>
        <td><a href=""https://github.com/amirisback"">Muhammad Faisal Amir</a></td>
        <td><a href=""https://github.com/amirisback/android-kick-start-modular"">android-kick-start-modular</a></td>
    </tr>
    <tr>
        <td>7.</td>
        <td><a href=""https://github.com/amirisback"">Muhammad Faisal Amir</a></td>
        <td><a href=""https://github.com/amirisback/desktop-experimental-catalgoue"">desktop-experimental-catalgoue</a></td>
    </tr>
    <tr>
        <td>8.</td>
        <td><a href=""https://github.com/amirisback"">Muhammad Faisal Amir</a></td>
        <td><a href=""https://github.com/amirisback/jitpack-library-kotlin-dsl-guide"">jitpack-library-kotlin-dsl-guide</a></td>
    </tr>
    <tr>
        <td>9.</td>
        <td><a href=""https://github.com/frogobox"">Frogobox</a></td>
        <td><a href=""https://github.com/frogobox/frogo-android-sdk"">frogo-android-sdk</a></td>
    </tr>
    <tr>
        <td>10.</td>
        <td><a href=""https://github.com/frogobox"">Frogobox</a></td>
        <td><a href=""https://github.com/frogobox/frogo-android-ui-kit"">frogo-android-ui-kit</a></td>
    </tr>
    <tr>
        <td>11.</td>
        <td><a href=""https://github.com/frogobox"">Frogobox</a></td>
        <td><a href=""https://github.com/frogobox/frogo-consume-api"">frogo-consume-api</a></td>
    </tr>
    <tr>
        <td>12.</td>
        <td><a href=""https://github.com/nazmulidris"">Nazmul Idris</a></td>
        <td><a href=""https://github.com/nazmulidris/color-console"">color-console</a></td>
    </tr>
    <tr>
        <td>13.</td>
        <td><a href=""https://github.com/aclassen"">Andre Claßen</a></td>
        <td><a href=""https://github.com/aclassen/ComposeReorderable"">ComposeReorderable</a></td>
    </tr>
    <tr>
        <td>14.</td>
        <td><a href=""https://github.com/Gurupreet"">Gurupreet Singh</a></td>
        <td><a href=""https://github.com/Gurupreet/ComposeCookBook"">ComposeCookBook</a></td>
    </tr>
    <tr>
        <td>15.</td>
        <td><a href=""https://github.com/joreilly"">John O'Reilly</a></td>
        <td><a href=""https://github.com/joreilly/PeopleInSpace"">PeopleInSpace</a></td>
    </tr>
</table>

## Colaborator
Name Of Contribute
- Dana Sulistyo Kusumo, S.T., M.T., PhD. - danakusumo@telkomuniversity.ac.id
- Shinta Yulia Puspitasari, S.T., M.T. - shintayulia@telkomuniversity.ac.id
- Muhammad Faisal Amir - faisalamircs@telkomuniversity.ac.id

## Attention !!!
- Please enjoy and don't forget fork and give a star
- Don't Forget Follow My Github Account

## Mad Score Card
![Mad Score](docs/image/mad_score.png?raw=true)

## Profiler
![Profiler](docs/image/profiler.png?raw=true)

## HKI Certificate
![HKI Certificate](docs/image/hki-certificate.png?raw=true)
"
DerekGloudemans/Nutrition-Optimization-New,Python,"# Nutrition-Optimization-New
This repo implements a linear program solver to create an optimal diet based on a large database of foods and nutritional content. I originally created this program in attempt to optimize my own health, and have been happily eating a program-recommended chili 5 days a week since March of 2019! Nutritional data was obtained by downloading the database files from the [USDA's Food Composition Database](https://fdc.nal.usda.gov/download-datasets.html). This dataset contains nutritional content information for over 9000 foods and over 100 nutrients. Nutritional guidelines were estimated for a 25 year-old male based on [health.gov](https://health.gov/dietaryguidelines/2015/guidelines/appendix-7/) and [The National Academies Press dietary references](https://www.nap.edu/read/11537/chapter/33).  

Here's an example diet output by the program:
![ex_foods](ex_foods.PNG)
![ex_nutrients](ex_nutrients.PNG)


The nuts and bolts of how to run the code are detailed below. It is a bit clunky to work with as it relies on inputing nutrient and food constraints into two separate excel csv files. Sorry :(

- data_parse.py is used to convert the USDA's Food Composition Database .csv files into a more human-readable form, where each row of the CSV represents a food and each column represents a nutrient.

- linear_solver.py is used to formulate the task of selecting a diet with optimal nutritional content as a linear program. Nutritional minimums and maximums are input as constraints to the program, and the objective function seeks to minimize the overall weight of selected foods. As of now, the mechanism for interacting with the solver is a bit clunky, and I am still thinking of a more elegant way to input constraints, etc. 

- In the food_exclusions.xlsx file, the first column indicates whether the food should be included at all in the optimization. The second column indicates whether the food's weight should count towards the objective function. The solver will attempt to use only foods that do not count towards the overall weight first, so one can easily specify a set of base ingredients that the solver will always attempt to use first. The third and fourth columns specify the minimum and maximum allowable weight of that food in the solution.

- In the nut_constraints.xlsx, the first and second columns correspond to the daily min and max values for each nutrient.

- All nutritional content values can be viewed in data_chart.xlsx

- To generate a diet, modify the nut_constraints and food_exclusions files, then run linear_solver.py. A diet will be output indicating the weight of each food included in the diet as well as the overall nutritional content of the diet.

- This repository isn't really in a finished state yet, but if you're interested in using it, let me know and I'll be happy to answer any questions to get it up and running for you!
"
ferpar/exer2,HTML,"# React | Nutrition

## Introduction

You just realized that lately your diet is not healthy and it may have an impact on your health (and productivity), now and in the long term. 

To take care of the food you eat, you decided to create a nutrition app that will track everything you eat!


![](https://media.giphy.com/media/fH0dyqpPJRvTbiF5rJ/giphy.gif)


## Requirements

- Fork this repo
- Clone this repo

## Submission

- Upon completion, run the following commands:

  ```
  git add .
  git commit -m ""done""
  git push origin master
  ```

- Create Pull Request so your teacher can check up your work.

## Instructions


### Import a JSON

Import the foods from the `foods.json`.

```js
import foods from './foods.json'
```


## About the design

If you struggle with the design, you can find a static example of what is expected inside file `style-guides.html` in the `starter-code` folder.

So let's start: 

### Iteration 1 | Create `FoodBox` component

Create a `FoodBox` component that takes at least `food` as a prop and displays a box with all the information about an ingredient.

You can use this HTML snippet to display properly the `FoodBox`:


![](https://i.imgur.com/bY9i5Rw.png)


### Iteration 2 | Display food

In your `App` component (your main component), display as many `FoodBox` as elements inside the variable `foods`.


![](https://i.imgur.com/3TVQJDO.png)



### Iteration 3 | Add new food


Create a button to add new foods.

When a user clicks the button, a form will appear with fields for a name, number of calories, and an image.

When the user clicks submit, the food will be added to the list.

The form should disappear when the user clicks the submit button.


### Iteration 4 | Implement search bar

Create a `Search` component to perform a search that updates the list of all meal. 

![](https://i.imgur.com/XaOpAx8.png)



### Iteration 5 | Create add buttons

On your `FoodBox`, you have an input an ""+"" button. Use them so that when a user clicks on the button, it adds them on a list on the right called ""*Today's foods*"".

You will also need to display the total amount of calories at the bottom of the list as a recap.

![](https://media.giphy.com/media/fH0dyqpPJRvTbiF5rJ/giphy.gif)

If you don't remember how to create responsive columns with Bulma, you can check the [documentation](https://bulma.io/documentation/columns/basics/).


### Iteration 5 | Bonus | Group ingredients

You made an awesome application, but you have found a little problem in the UX. For example, if you click twice on ""Pizza"", it will display 2 lines ""*1 Pizza = 400 cal*"" instead of 1 line  ""*2 Pizza = 800 cal*"". Fix that problem.


### Iteration 6 | Bonus | Allow the user to remove an ingredient

On the ""*Today's food*"", add a trash icon to let users removing one of their items.


Happy coding! :heart:
"
ekg/USDA-SR22-importer,Shell,"These files are useful in creating a MySQL database from the SR22 nutrition
information produced by the USDA.

You must first create a new user and database, make sure that these are
referred to in createdb.sh.

Then make sure you have a recent copy of mdb-tools.  These tools are used to
convert the sr22 data from access format into SQL.

Edit create_db.sh to reflect your local MySQL installation, user, password, and
database.

Then:

    make sr22

This should insert all the data into your mysql database!
"
esha/nutrition-api-demo,JavaScript,"First, install NodeJS. It comes with NPM. Also, it might be easier to install with NVM to manage multiple versions.

Add ```APIKEY=myapikey``` as an environment variable.

Then run these commands:
```
git clone git@github.com:esha/wsdemo.git
cd wsdemo
npm install
cd dist
npx nf start -p 8000
```

Then direct your browser to ```http://localhost:8000/```

To change the project, edit the html/css/js files in /app.
Whenever you make a change, rebuild and restart by doing:
```cd .. && grunt && cd dist && npx nf start -p 8000```

To deploy the app to Heroku, follow these instructions.
Create your own Heroku app with:  
```heroku apps:create myappname```
Set your APIKEY:
```heroku config:set APIKEY=myapikey```
Deploy the app:  
```git subtree push --prefix dist heroku master```
For later updates, force the subtree push:
```git push heroku `git subtree split --prefix dist master`:master --force```
"
b-ash/nutrition,JavaScript,"# Nutrition

A quick, no-frills way to track your macros. It can be used as an app on the iPhone if a user navigates to the site and downloads it to the home screen. I didn't feel like dealing with the app store / marketplace.

## How do I run this bad boy locally?

### Abridged Version:

Git clone, npm install, run. Profit.


### Unabridged Version:

This UI runs on node, and I recommend brunch.io as your framework of choice. That being said, you can always run this straight-up in Node. In server.coffee, the difference in environments is handled.

* First, you'll need node.js (0.8.x): `brew install node`
* Then, you'll need brunch: `npm install -g brunch`
* cd into nutrition, and pull down the dependencies: `npm install`
* Run it! `brunch watch --server`
* Profit

The default settings bind it to localhost:3333


## TODO

* Searching for an item
* User-defined supplements
"
matixezor/Nutritional-Calculator,Python,"# Nutritional-Calculator
A simple app that tells you the nutritional values of your food. Also with an option to add your own products.
"
muhammedaydogan/DeepNutrition,Jupyter Notebook,"# DeepNutrition

Introduction to DeepNutrition: https://www.youtube.com/watch?v=GGbImsmBeQw <br />
And The Paper: https://drive.google.com/file/d/1Nuq-Mepx1YVq0IrwNcjdS6hX_tkKevEx/view?usp=sharing

Our term project of BBM406 Fundamentals of Machine Learning Lecture in Hacettepe University Computer Science.
We tested RESNet-50, VGGNet-16, Inceptionv3 (aka GoogleNet). Results have demonstrated at paper.
We have over %85 prediction accuracy for food recognition from 101 food class.
We worked on Food-101 Dataset.

# Food recognition from image for facilitating the dietary assessment process.

Dietary assessment plays a signiﬁcant role in ﬁghting obesity. In this paper, we used computer vision techniques to facilitate the dietary assessment process by detecting foods from images. We used the Food-101 dataset which consists of 101 classes and developed a model that uses a ﬁne-tuned model of InceptionV3 and get 85% top-1 accuracy. In this process, we tried different Models, Activation Functions, LossFunctions, Dropouts, LearningRates, Batch Sizes. We observed the model’s behavior in each of those conditions and tried to get the best case possible. Our results show that the InceptionV3 which is a CNN model can be a good choice for identifying Foods by using Food-101 Dataset.

# Our Medium Blogs:

You can access this project's medium blogs from here: <br />
Week 1: https://medium.com/bbm406f19/deepnutrition-be-aware-of-your-macronutrients-c47497c423cc  <br />
Week 2: https://medium.com/bbm406f19/week-2-deepnutrition-be-aware-of-your-macronutrients-131dc0389e8 <br />
Week 3: https://medium.com/bbm406f19/week-3-deepnutrition-be-aware-of-your-macronutrients-e3cd3f01a9f7 <br />
Week 4: https://medium.com/bbm406f19/week-4-deepnutrition-be-aware-of-your-macronutrients-aaecce8b330e <br />
Week 5: https://medium.com/bbm406f19/week-5-deepnutrition-be-aware-of-your-macronutrients-f6f36dc070a0 <br />
Week 6: https://medium.com/bbm406f19/week-6-deepnutrition-be-aware-of-your-macronutrients-54abd178148 <br />

# Our Team
Ali Kayadibi (https://www.linkedin.com/in/ali-kayadibi-a1a262147/), <br />
Ismet Okatar (https://www.linkedin.com/in/ismetokatar/), (https://github.com/ismetokatar) <br />
Muhammed Aydogan (https://www.linkedin.com/in/muhammed-aydogan-22b31b179)
"
Sharonyel/Nutrition_Journal,JavaScript,"# Nutrition Journal

Description
---

Nutrition Log is an application where a user can sign up by creating an account and keep track of their nutrition habits.  This app allows you to enter the foods you have eaten and the nutritional facts about that food will be displayed. It also tells you how many calories are in that food.  The user can also enter exercise completed and the expected calories to burn will be provided. 

# Built With
 
Passport, Express, BULMA, Heroku, Sequelize, Javascript, jQuery, MySql
Handlebars, Nutritionix API

How To Use:
---

![screenshot of the code](./public/assets/images/gif2.gif);



![screenshot of the code](./public/assets/images/gif.gif);


# Getting Started
Link to deployed app (https://salty-ravine-80275.herokuapp.com/)
---


# Credits



# License
MIT License

Copyright (c) [2020] [Thomas Argent, Sharon Yelverton, Matt Dominick, Alexander Garcia]

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
sun-fox/Swastik,HTML,��#
TerrenceHo/NutritionIQ,JavaScript,"# NutritionIQ
NutritionIQ is a machine-learning based receipt scanner with nutritional information about food items in the receipt. It was made in a team of 4 with Terrence Ho, David Lu, Rut Patel, and Ryan Kim for MHacks X (2017).

Built using the Google Cloud Platform (Storage, Machine-learning, Cloud Vision), Expo.io (React-Native), Node.js, Heroku, and NutritionIX.

## Inspiration
We wanted to utilize machine learning in order to get nutritional information from a grocery receipt. We needed an easy way to get relevant nutritional facts about our grocery shopping trips, without having to look everything up individually.
## What it does
NutritionIQ uses Google Cloud Platform tools to get smart-data about items on a grocery receipt. No matter how long the grocery list, precise nutritional details are displayed for every food item in order to help us make smart, conscious decisions about our daily nutrition.
## How I built it
To build it, we used Expo.io (React-Native) to offer cross-platform mobile support. We used the Google Cloud Platform tools for our machine learning and part of our backend, and used Heroku with Node.js for the rest of our backend. NutritionIX API was used for up-to-date nutritional info.
## Challenges I ran into
Some challenges we faced included:
1. Grocery receipts were not standardized amoung any grocery stores so we needed a way to parse the receipts in a way so that results were still consistent amoung different sellers. Also, a lot of items are abbreviated in grocery receipts so searching up the exact item was hard.
2. Not everyone on the team was familiar with the stack we used, so it was difficult learning a new language/framework while trying to work with it to use the APIs.
3. The data we received from the API's we used would not always be consistent due to the nature of our product. We had to come up with algorithms and implementations that were robust enough to handle errors due to inconsistencies from certain API calls.
## Accomplishments that I'm proud of
We are proud that we integrated each part that we worked on into one big, working product. We worked with technologies that were not all familiar to us but we read through enough docs and examples to learn what we needed to succeed.
## What I learned
Since we all had different experiences, we specialized in certain tasks, depending on our background. Even so, we learned a lot of things from using the APIs, integrating each component of our project into one working product, and working with new technologies.
## What's next for NutritionIQ
We would love to add support for recipe recommendations based on the ingredients that were parsed from the receipt. Also, we could extend our app to be a health-tracker with users' food and nutritional data stored on the server. We could also recommend what foods to buy in order to meet our daily nutritional requirements.
"
TerrenceHo/NutritionIQ,JavaScript,"# NutritionIQ
NutritionIQ is a machine-learning based receipt scanner with nutritional information about food items in the receipt. It was made in a team of 4 with Terrence Ho, David Lu, Rut Patel, and Ryan Kim for MHacks X (2017).

Built using the Google Cloud Platform (Storage, Machine-learning, Cloud Vision), Expo.io (React-Native), Node.js, Heroku, and NutritionIX.

## Inspiration
We wanted to utilize machine learning in order to get nutritional information from a grocery receipt. We needed an easy way to get relevant nutritional facts about our grocery shopping trips, without having to look everything up individually.
## What it does
NutritionIQ uses Google Cloud Platform tools to get smart-data about items on a grocery receipt. No matter how long the grocery list, precise nutritional details are displayed for every food item in order to help us make smart, conscious decisions about our daily nutrition.
## How I built it
To build it, we used Expo.io (React-Native) to offer cross-platform mobile support. We used the Google Cloud Platform tools for our machine learning and part of our backend, and used Heroku with Node.js for the rest of our backend. NutritionIX API was used for up-to-date nutritional info.
## Challenges I ran into
Some challenges we faced included:
1. Grocery receipts were not standardized amoung any grocery stores so we needed a way to parse the receipts in a way so that results were still consistent amoung different sellers. Also, a lot of items are abbreviated in grocery receipts so searching up the exact item was hard.
2. Not everyone on the team was familiar with the stack we used, so it was difficult learning a new language/framework while trying to work with it to use the APIs.
3. The data we received from the API's we used would not always be consistent due to the nature of our product. We had to come up with algorithms and implementations that were robust enough to handle errors due to inconsistencies from certain API calls.
## Accomplishments that I'm proud of
We are proud that we integrated each part that we worked on into one big, working product. We worked with technologies that were not all familiar to us but we read through enough docs and examples to learn what we needed to succeed.
## What I learned
Since we all had different experiences, we specialized in certain tasks, depending on our background. Even so, we learned a lot of things from using the APIs, integrating each component of our project into one working product, and working with new technologies.
## What's next for NutritionIQ
We would love to add support for recipe recommendations based on the ingredients that were parsed from the receipt. Also, we could extend our app to be a health-tracker with users' food and nutritional data stored on the server. We could also recommend what foods to buy in order to meet our daily nutritional requirements.
"
moethu/codenutrition,Go,"# Code Nutrition

[![codenutrition](http://code.grevit.net/badge/O%2B%2B_S%2B%2B_I%2B%2B_C_E_M_V%2B_PS%2B%2B_D%2B_)](http://code.grevit.net/facts/O%2B%2B_S%2B%2B_I%2B%2B_C_E_M_V%2B_PS%2B%2B_D%2B)

**Imagine your code and all dependencies would carry nutrition labels.**

Code Nutrition is a service for labelling code so everybody can understand what they are getting into when building upon or using your software. The survey is based on a set of questions presented by Felix von Leitner: ""Nützlich-Unbedenklich Spektrum"" at 36C3 (Minor adjustmenst have been made to the original text.) [learn more here](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwjE-v7ropLnAhXUwMQBHd68B9UQwqsBMAB6BAgKEAQ&url=https%3A%2F%2Fmedia.ccc.de%2Fv%2F36c3-10608-das_nutzlich-unbedenklich_spektrum&usg=AOvVaw1_05ix3-K_lRn_T9LbJRZi).

The survey itself is still under development you are welcome to discuss, contribute and improve it. Currently it consists of 9 fundamental questions regarding the state of your (legacy) code. After answering them by multiple choice the service generates an embeddable badge representing the state of your project. I highly reccommend completing the survey even if you don't want to use the badge - the questions asked can be very helpful.

[Survey](https://github.com/moethu/codenutrition/blob/master/static/spectrum.json)

Again, the intention of this repo and the survey is to get the conversation started and potentially develop a solid metric representing the state of a project.

[Start your survey now](http://code.grevit.net:8084)

## Requirements for building the service

[![Go Report Card](https://goreportcard.com/badge/github.com/moethu/codenutrition)](https://goreportcard.com/report/github.com/moethu/codenutrition)

- go 1.11.5+

### requirements (via go modules)

- github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751
- github.com/gin-gonic/gin v1.5.0
- github.com/llgcode/draw2d v0.0.0-20200110163050-b96d8208fcfc
- github.com/swaggo/gin-swagger v1.2.0
- github.com/swaggo/swag v1.6.5
"
sharminpathan/Nutrition-Expert-System-Gestational-Diabetes,Prolog,# Nutrition-Expert-System-Gestational-Diabetes
paulbricman/lexiscore,Python,"---
title: lexiscore
emoji: 📗
colorFrom: green
colorTo: gray
sdk: streamlit
app_file: main.py
pinned: false
---

![](https://paulbricman.com/assets/img/lexiscore_cover.png)
# Lexiscore

As a first effort in tackling the [theme of information overload](https://paulbricman.com/reflections/twenty-one) in content consumption, I've been working on the lexiscore: a nutritional label for food for thought designed to help you narrow in on resources which personally bring you the most value. The open source companion software can automatically label raw text originating from RSS feeds, bookmarked pages, PDFs, EPUBs, and more. In the scope of this project, I'm considering valuable resources to be those from which you learn a lot, those which are packed with ideas you find surprising.

[Read more...](https://paulbricman.com/thoughtware/lexiscore)

# Installation

**Note**: This tool requires a running instance of the [conceptarium](https://paulbricman.com/thoughtware/conceptarium) as a proxy for your knowledge.

The lexiscore labeler can either be deployed from source or using Docker.

### Docker

To deploy the lexiscore labeler using Docker, first make sure to have Docker installed, then simply run the following.

```
docker run -p 8501:8501 paulbricman/lexiscore 
```

The tool should be available at `localhost:8501`.

### From Source

To set up the lexiscore labeler, clone the repository and run the following:

```
python3 -m pip install -r requirements.txt
streamlit run main.py
```

The tool should be available at `localhost:8501`.

# Screenshots

![](https://paulbricman.com/assets/img/lexiscore_mockup.png)
![](https://paulbricman.com/assets/img/lexiscore_mealprep.png)
"
partnercloudsupport/Flutter-Nutrition-Application,Dart,"# Flutter-Nutrition-Application ( WIP )


## Notable Links:
- [Flutter Information](https://flutter.io/docs)
- [Flutter Documentation](https://docs.flutter.io/index.html)
- [Firebase Console](https://console.firebase.google.com/u/0/)
- [Firebase Documentation](https://firebase.google.com/)

## Version Information:
- **Flutter:** v. 1.1.6 
- **Dart:** v. 2.1.1
- **Android API Platform:** v. 27
- **Java:** v. 1.8.0_152 

## Coding Standards:
- Functions:
    - If possible, prefer lower-upper camel case on function naming.

- Classes:
    - All lowercase file names.
    - Uppercase CamelCase Formatting.  
      Example: ```class MyClass```
    - Flutter Widget State Hierarchy (Top to Bottom):
        - Variables
        - Constructor Functions
        - Utility Functions
        - @override Flutter Functions  
       Example 
       ```
       class MyClass extends StatelessWidget {
                    int _currentIndex = 0;  
                    Widget myWidget;    
                    MyClass(this.myWidget);
                    
                    void doStuff(Widget widget) {
                        this.myWidget = widget;
                    }
                    
                    @override
                    Widget build (BuildContext context) {
                        return new MaterialApp();
                    }
           }
       ```

- Variables:
    - Variables behave in a lower-upper camel case format similar to functions.


## Git ( For Collaborators )
- Make your own branch named ""dev-*name*"".
- Once your are done with a task, submit a pull request to the **dev** branch for review.
"
levberlin/nutrition_label_plugin,Ruby,"= NutritionLabelPlugin
Nutrition label generation for Rails 3.1 using the asset pipeline. 

== Installation

1. If using bundler, add to your Gemfile and run bundle install:
    gem nutrition_label_plugin
2. Otherwise run 'gem install nutrition_label_plugin'
3. To add the CSS file to your load path, add to your app's application.css file: 
    *= require nutrition_label_plugin

== Feature list

Currently, there is a single method available that accepts a hash of all optional 
parameters. 
    create_base_label(args)

The method returns html output, which you can use in your views to show these
awesome nutrition fact labels. 

---
=== create_base_label arguments

create_base_label takes a number of optional arguments in the form of a hash:
* :name => ""string""
* :yield => float, in grams
* :servings => float, # of servings
* :calories => float, # of calories
* :fat => float, in grams
* :saturated_fat => float, in grams
* :trans_fat => float, in grams
* :cholesterol => float, in milligrams
* :sodium => float, in milligrams
* :carbohydrate => float, in grams
* :fiber => float, in grams
* :sugar => float, in grams
* :vitamin_C => float, in milligrams
* :vitamin_A => float, in IU (international units)
* :Iron => float, in milligrams
* :calcium => float, in milligrams

== Planned features

* Automatic rounding according to USDA conventions
* Additional optional nutrients
* Additional output formats
* If you have ideas for features, let me know and I'll see what I can do!

== Contributing

If you have any feedback or want to add methods other than the basic nutrition label,
feel free to fork and send a pull request.

---
This project rocks and uses MIT-LICENSE.
"
blackcrabb/The-Nutrition-Coach,HTML,"# The-Nutrition-Coach

## Inspiration
Growing up you might have heard the term ‘Health is Wealth’, but its essential meaning is still not clear to most people. Our food habits does not have merely one but numerous benefits. It helps us in various spheres of life. So to help you keep track of it we present you The Nutrition Coach , a website to raise people's awareness about diets and it's types. Here person can convert the language of nutrition label and receive access to exercise bot.

## What it does
The Nutrition Coach helps in three area's :
<br>
1. **Diet** : It provides diet corresponding to illness and chart to find their category.It has explained diets according to provided illness 
<br>

2. **Action Console or Bot** : This functionality provides the user to join into exercise workspace in slack and talk in #general channel with each other and also a dialog flow bot. 
<br>

3. **Language converter**: This functionality helps in converting English nutrition labels behind the packaging of product into their native language for better understanding.

## How I built it
It is purely HTML , CSS , JavaScript web application. It has customize diets for illness with detailed description to follow rendered in cards format .
It has a trained Dialog flow conversational bot linked to Slack through Exercise workspace.It was built in dialog flow console and integrated to slack
It has built with Tesseract.js to build an OCR web application.

## Demo

#### Home Page
<img src=""https://github.com/blackcrabb/The-Nutrition-Coach/blob/screenshots/Screenshots/home.gif"" width=300 height=150>

#### Dietary
<img src=""https://github.com/blackcrabb/The-Nutrition-Coach/blob/screenshots/Screenshots/dietary.gif"" width=300 height=150>

#### Action Console
<img src=""https://github.com/blackcrabb/The-Nutrition-Coach/blob/screenshots/Screenshots/action-console.gif"" width=300 height=150>

#### Nutrition Language Converter
<img src=""https://github.com/blackcrabb/The-Nutrition-Coach/blob/screenshots/Screenshots/converter.gif"" width=300 height=150>
"
BrianMehrman/nutrition,Ruby,"Here is the basic gist of this application. This is a testing ground for me to build a gem that imports the USDA National Nutrient Database for Standard Reference  (http://www.ars.usda.gov/Services/docs.htm?docid=8964). The text version of the database is in a none conventional format, delimitated by a '^' and surrounded by '~'s. 

This application has 12 models that match the 12 tables in the Nutrient Database. These models are used to import the data that is parsed from the ""ASCII"" form of the database. The actual format of the text files are 'windows-1251'.

In the lib/tasks directory there is a rake task file that will parse the Nutrient Database ASCII files, found lib/data directory.

There is a task called 'process_data', it will run the parse method from the 'parse_usda.rb' file. This file will convert the USDA text files to a conventional 'CSV' file. Each file is then imported into its matching table using a CSV reader.

The tasks require the 12 models to already be created in a local database. There are 12 migration files in the 'db' directory. These will help you create the models you need.

If you have any questions please email me at bcmehrman@gmail.com


 "
moonyin10/FeedMeWell-nutrition-tracker-and-food-delivery,JavaScript,"# csci-3308-Project-GroupAwesome

Project Name: FeedmeWell

Project Description: 
This project is a food ordering app that can order food for user based on user's workout data tracked by Fitbit.

Deployment:
Link: https://ide.c9.io/kino6052/nodeauthentication
Instruction : 

1. Follow the link
2. Log into the cloud9
3. Request Access
4. Go to the terminal on the bottom (should say ""Terminal"", if not, click ""+"" to add new Terminal)
5. In terminal, go to workspace directory and execute mongod-start (if you see errors, this is likely because mongod is already running)
6. Then, go to temp and open app.js
7. Press on the play button on the top of the screen
 
## Repo Organization

* Documentation
  * This is where the auto-generated documentation .html files are found
* database
  * Folder containing UML diagram for the database organization
* nodeServer
  * node.js server with project folders
* node_modules
  * jsdocs is found here
* toolbox
  * Folder with various code snippets used throughout our project
* www
  * PhoneGap project bones 

## Running Tests

1. Go to the ""toolbox"" folder
2. Run apis.html


## APIs
https://www.nutritionix.com/ - Calorie APIs
https://api.delivery.com/ - Restaurants APIs

##Toolbox
Folder that contains snippets that will be useful further in the project

###Project managment tracker
https://www.pivotaltracker.com/n/projects/1342872

###UI Prototype
https://www.fluidui.com/editor/live/preview/p_c8Q7gDMTCopDB6E77aVIQFxWKMGipBlt.1447357197567
.
"
nimuh/FANTA,Java,# FANTA
